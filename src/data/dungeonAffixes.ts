import { DungeonAffix, DungeonAffixType } from '@/types/game';

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ñ—Ñ–∏–∫—Å–æ–≤ –ø–æ–¥–∑–µ–º–µ–ª–∏–π
export const DUNGEON_AFFIXES: Record<DungeonAffixType, DungeonAffix> = {
  strong_enemies: {
    type: 'strong_enemies',
    name: '–ö—Ä–µ–ø–∫–∏–µ –≤—Ä–∞–≥–∏',
    description: '–í—Ä–∞–≥–∏ –∏–º–µ—é—Ç –Ω–∞ 15% –±–æ–ª—å—à–µ –∑–¥–æ—Ä–æ–≤—å—è',
    icon: 'üí™',
    positive: false
  },
  
  fragile_chests: {
    type: 'fragile_chests',
    name: '–•—Ä—É–ø–∫–∏–µ —Å—É–Ω–¥—É–∫–∏',
    description: '–ò–∑ –∫–∞–∂–¥–æ–≥–æ —Å—É–Ω–¥—É–∫–∞ –≤—ã–ø–∞–¥–∞–µ—Ç –Ω–∞ 1 –ø—Ä–µ–¥–º–µ—Ç –º–µ–Ω—å—à–µ',
    icon: 'üì¶',
    positive: false
  },
  
  dark_paths: {
    type: 'dark_paths',
    name: '–¢–µ–º–Ω—ã–µ —Ç—Ä–æ–ø—ã',
    description: '–ù–∞—á–∏–Ω–∞–µ—Ç–µ —Å 2 —Ñ–∞–∫–µ–ª–∞–º–∏ –º–µ–Ω—å—à–µ',
    icon: 'üåë',
    positive: false
  },
  
  treasure_call: {
    type: 'treasure_call',
    name: '–ó–æ–≤ —Å–æ–∫—Ä–æ–≤–∏—â',
    description: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫ –∏ +5% —à–∞–Ω—Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
    icon: '‚ú®',
    positive: true
  },
  
  cursed_healing: {
    type: 'cursed_healing',
    name: '–ü—Ä–æ–∫–ª—è—Ç–æ–µ –∏—Å—Ü–µ–ª–µ–Ω–∏–µ',
    description: '–ê–ª—Ç–∞—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –Ω–∞ 50% –º–µ–Ω—å—à–µ –∑–¥–æ—Ä–æ–≤—å—è',
    icon: 'ü©∏',
    positive: false
  },
  
  blessed_combat: {
    type: 'blessed_combat',
    name: '–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω—ã–π –±–æ–π',
    description: '–ü–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ 10% –±–æ–ª—å—à–µ –æ–ø—ã—Ç–∞ –æ—Ç —Å—Ä–∞–∂–µ–Ω–∏–π',
    icon: '‚öîÔ∏è',
    positive: true
  },
  
  merchant_discount: {
    type: 'merchant_discount',
    name: '–¢–æ—Ä–≥–æ–≤–∞—è —É–¥–∞—á–∞',
    description: '–¶–µ–Ω—ã —É —Ç–æ—Ä–≥–æ–≤—Ü–µ–≤ —Å–Ω–∏–∂–µ–Ω—ã –Ω–∞ 20%',
    icon: 'üí∞',
    positive: true
  },
  
  trap_master: {
    type: 'trap_master',
    name: '–ú–∞—Å—Ç–µ—Ä –ª–æ–≤—É—à–µ–∫',
    description: '–õ–æ–≤—É—à–∫–∏ –Ω–∞–Ω–æ—Å—è—Ç –Ω–∞ 25% –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞',
    icon: 'ü™§',
    positive: false
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∞—Ñ—Ñ–∏–∫—Å–æ–≤
export function getRandomAffixes(count: number = 2, seed?: number): DungeonAffix[] {
  const allAffixes = Object.values(DUNGEON_AFFIXES);
  const rng = seed ? mulberry32(seed) : Math.random;
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã
  const shuffled = [...allAffixes].sort(() => rng() - 0.5);
  
  // –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Å—Ç–∞—Ä–∞—è—Å—å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ
  const selected: DungeonAffix[] = [];
  const positive = shuffled.filter(a => a.positive);
  const negative = shuffled.filter(a => !a.positive);
  
  // –°—Ç–∞—Ä–∞–µ–º—Å—è –≤–∑—è—Ç—å –ø–æ—Ä–æ–≤–Ω—É –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö
  const halfCount = Math.floor(count / 2);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ
  for (let i = 0; i < Math.min(halfCount, negative.length); i++) {
    selected.push(negative[i]);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ
  for (let i = 0; i < Math.min(count - selected.length, positive.length); i++) {
    selected.push(positive[i]);
  }
  
  // –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –¥–æ–±–∏—Ä–∞–µ–º –ª—é–±—ã–º–∏
  const remaining = shuffled.filter(a => !selected.includes(a));
  for (let i = 0; i < count - selected.length && i < remaining.length; i++) {
    selected.push(remaining[i]);
  }
  
  return selected;
}

// –ü—Ä–æ—Å—Ç–æ–π PRNG –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
function mulberry32(a: number) {
  return function() {
    let t = a += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∞—Ñ—Ñ–∏–∫—Å–æ–≤
export function applyAffixEffects(
  affixes: DungeonAffix[],
  context: {
    type: 'enemy_stats' | 'chest_loot' | 'altar_heal' | 'merchant_price' | 'trap_damage' | 'combat_exp' | 'torch_count';
    value: number;
  }
): number {
  let modifiedValue = context.value;
  
  for (const affix of affixes) {
    switch (affix.type) {
      case 'strong_enemies':
        if (context.type === 'enemy_stats') {
          modifiedValue *= 1.15; // +15% HP –≤—Ä–∞–≥–æ–≤
        }
        break;
        
      case 'fragile_chests':
        if (context.type === 'chest_loot') {
          modifiedValue = Math.max(1, modifiedValue - 1); // -1 –ª—É—Ç, –º–∏–Ω–∏–º—É–º 1
        }
        break;
        
      case 'dark_paths':
        if (context.type === 'torch_count') {
          modifiedValue = Math.max(1, modifiedValue - 2); // -2 —Ñ–∞–∫–µ–ª–∞, –º–∏–Ω–∏–º—É–º 1
        }
        break;
        
      case 'cursed_healing':
        if (context.type === 'altar_heal') {
          modifiedValue *= 0.5; // -50% –∏—Å—Ü–µ–ª–µ–Ω–∏—è
        }
        break;
        
      case 'blessed_combat':
        if (context.type === 'combat_exp') {
          modifiedValue *= 1.1; // +10% –æ–ø—ã—Ç
        }
        break;
        
      case 'merchant_discount':
        if (context.type === 'merchant_price') {
          modifiedValue *= 0.8; // -20% —Ü–µ–Ω–∞
        }
        break;
        
      case 'trap_master':
        if (context.type === 'trap_damage') {
          modifiedValue *= 1.25; // +25% —É—Ä–æ–Ω
        }
        break;
        
      case 'treasure_call':
        // –≠—Ç–æ—Ç –∞—Ñ—Ñ–∏–∫—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã (–¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É–Ω–¥—É–∫)
        // –∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —à–∞–Ω—Å–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–æ–∫
        break;
    }
  }
  
  return Math.round(modifiedValue);
}

