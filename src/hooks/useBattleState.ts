
import { useRef, useState, useEffect } from 'react';
import { calculateFinalStats } from '@/utils/enhancedCharacterStats';
import { Player } from '@/types/game';

// Add missing types here
export type BattleZone = 'head' | 'chest' | 'stomach' | 'groin' | 'legs';

export type BattleLogEntry = {
  text: string;
  type: 'normal' | 'crit' | 'dodge' | 'victory' | 'defeat' | 'info';
};

interface Bot {
  id: string;
  name: string;
  level: number;
  health: number;
  maxHealth: number;
  attack: number;
  defense: number;
  experience: number;
  gold: number;
  image: string;
  image_url: string | null;
  difficulty: string;
}

interface UseBattleStateProps {
  player: Player;
  onPlayerUpdate: (updates: Partial<Player>) => void;
  onBattleStateChange?: (inBattle: boolean) => void;
  onBattleEnd?: (victory: boolean, rewards: { experience: number; gold: number }) => void;
  bots: Bot[];
  toast: any;
}

export const useBattleState = ({
  player,
  onPlayerUpdate,
  onBattleStateChange,
  onBattleEnd,
  bots,
  toast,
}: UseBattleStateProps) => {
  const [selectedBot, setSelectedBot] = useState<Bot | null>(null);
  const [currentBotHealth, setCurrentBotHealth] = useState(0);
  const [inBattle, setInBattle] = useState(false);
  const [playerAttackZone, setPlayerAttackZone] = useState<BattleZone | null>(null);
  const [playerDefenseZone, setPlayerDefenseZone] = useState<BattleZone | null>(null);
  const [battleLog, setBattleLog] = useState<BattleLogEntry[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);

  useEffect(() => {
    onBattleStateChange?.(inBattle);
  }, [inBattle, onBattleStateChange]);

  // Add error handling for calculateFinalStats
  let playerStats;
  try {
    playerStats = calculateFinalStats(player, player.equipment || {});
  } catch (error) {
    console.error('Error calculating player stats:', error);
    // Fallback stats
    playerStats = {
      attack: player.attack || 10,
      defense: player.defense || 5,
      maxHealth: player.maxHealth || 100,
      maxMana: player.maxMana || 50,
      critChance: 5,
      dodgeChance: 5,
    };
  }

  const startBattle = (bot: Bot) => {
    console.log('Starting battle with:', bot);
    setSelectedBot(bot);
    setCurrentBotHealth(bot.health);
    setInBattle(true);
    setBattleLog([{ text: `üî• –°–º–µ—Ä—Ç–µ–ª—å–Ω–∞—è —Å—Ö–≤–∞—Ç–∫–∞ —Å ${bot.name} –Ω–∞—á–∞–ª–∞—Å—å! –ö—Ä–æ–≤—å –ø—Ä–æ–ª—å–µ—Ç—Å—è...`, type: 'info' }]);
    setPlayerAttackZone(null);
    setPlayerDefenseZone(null);
  };

  const getBrutalPhrases = () => {
    const attackPhrases = [
      '–Ω–∞–Ω–æ—Å–∏—Ç –∂–µ—Å—Ç–æ–∫–∏–π —É–¥–∞—Ä',
      '—Ä–∞–∑—Ä—ã–≤–∞–µ—Ç –ø–ª–æ—Ç—å',
      '–ø—Ä–æ–ª–∏–≤–∞–µ—Ç –∫—Ä–æ–≤—å',
      '—Å–æ–∫—Ä—É—à–∞–µ—Ç –∫–æ—Å—Ç–∏',
      '—Ç–µ—Ä–∑–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞',
      '–±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω–æ –∞—Ç–∞–∫—É–µ—Ç',
      '–Ω–∞–Ω–æ—Å–∏—Ç —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä',
      '—Ä–∞–∑–±–∏–≤–∞–µ—Ç —á–µ—Ä–µ–ø',
      '–ø—Ä–æ–Ω–∑–∞–µ—Ç –Ω–∞—Å–∫–≤–æ–∑—å',
      '—Ä–∞–∑–º–∞–∑—ã–≤–∞–µ—Ç –ø–æ —Å—Ç–µ–Ω–µ'
    ];

    const blockPhrases = [
      '–æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–º–µ—Ä—Ç–æ–Ω–æ—Å–Ω—É—é –∞—Ç–∞–∫—É',
      '–∏–∑–±–µ–≥–∞–µ—Ç –∫—Ä–æ–≤–∞–≤–æ–π —Ä–∞—Å–ø—Ä–∞–≤—ã',
      '—É–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç –ø–æ–≥–∏–±–µ–ª–∏',
      '–±–ª–æ–∫–∏—Ä—É–µ—Ç —É–¥–∞—Ä —Å—É–¥—å–±—ã',
      '—Å–ø–∞—Å–∞–µ—Ç—Å—è –æ—Ç –Ω–µ–º–∏–Ω—É–µ–º–æ–π —Å–º–µ—Ä—Ç–∏'
    ];

    const victoryPhrases = [
      '–í—Ä–∞–≥ –ø–æ–≤–µ—Ä–∂–µ–Ω –≤ –∞–≥–æ–Ω–∏–∏!',
      '–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç –∫—Ä–æ–≤—å—é!',
      '–ñ–µ—Ä—Ç–≤–∞ –ø–∞–ª–∞ –∫ –≤–∞—à–∏–º –Ω–æ–≥–∞–º!',
      '–ï—â–µ –æ–¥–∏–Ω —Ç—Ä—É–ø –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏!',
      '–°–º–µ—Ä—Ç—å –∑–∞–±—Ä–∞–ª–∞ –æ—á–µ—Ä–µ–¥–Ω—É—é –¥—É—à—É!'
    ];

    const defeatPhrases = [
      '–í–∞—à–∞ –∫—Ä–æ–≤—å –æ—Ä–æ—à–∞–µ—Ç –∑–µ–º–ª—é...',
      '–¢—å–º–∞ –ø–æ–≥–ª–æ—â–∞–µ—Ç –≤–∞—à—É –¥—É—à—É...',
      '–°–º–µ—Ä—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å...',
      '–í–∞—à–∏ –∫–æ—Å—Ç–∏ –±—É–¥—É—Ç —É–¥–æ–±—Ä–µ–Ω–∏–µ–º...',
      '–ê–≥–æ–Ω–∏—è - –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø—É—Ç–Ω–∏–∫...'
    ];

    return { attackPhrases, blockPhrases, victoryPhrases, defeatPhrases };
  };

  const executeAttack = () => {
    if (!selectedBot || !playerAttackZone || !playerDefenseZone || isProcessing) {
      console.log('Attack blocked:', { selectedBot, playerAttackZone, playerDefenseZone, isProcessing });
      return;
    }

    console.log('Executing attack...');
    setIsProcessing(true);
    const phrases = getBrutalPhrases();

    setTimeout(() => {
      const zones: BattleZone[] = ['head', 'chest', 'stomach', 'groin', 'legs'];
      const botAttackZone = zones[Math.floor(Math.random() * zones.length)];
      const botDefenseZone = zones[Math.floor(Math.random() * zones.length)];

      let turnLog: BattleLogEntry[] = [];
      let playerDamage = 0;
      let botDamage = 0;

      const zoneNames = {
        head: '–≥–æ–ª–æ–≤—É',
        chest: '–≥—Ä—É–¥—å',
        stomach: '–∂–∏–≤–æ—Ç',
        groin: '–ø–∞—Ö',
        legs: '–Ω–æ–≥–∏'
      };

      // Player's turn
      const isPlayerCrit = Math.random() * 100 < (playerStats.critChance || 5);
      const isBotDodge = Math.random() * 100 < 5; // Bots have a base 5% dodge chance

      if (isBotDodge) {
        turnLog.push({ text: `üí® ${selectedBot.name} —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∞—à–µ–π –∞—Ç–∞–∫–∏!`, type: 'dodge' });
      } else if (playerAttackZone !== botDefenseZone) {
        playerDamage = Math.max(1, (playerStats.attack || 10) - selectedBot.defense + Math.floor(Math.random() * 10));
        if (isPlayerCrit) {
          playerDamage = Math.floor(playerDamage * 1.5);
          turnLog.push({ text: `üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! –í—ã –≤–æ–Ω–∑–∞–µ—Ç–µ –æ—Ä—É–∂–∏–µ –≤ ${zoneNames[playerAttackZone]}: ${playerDamage} —É—Ä–æ–Ω–∞`, type: 'crit' });
        } else {
          const attackPhrase = phrases.attackPhrases[Math.floor(Math.random() * phrases.attackPhrases.length)];
          turnLog.push({ text: `‚öîÔ∏è –í—ã ${attackPhrase} –≤ ${zoneNames[playerAttackZone]}: ${playerDamage} —É—Ä–æ–Ω–∞`, type: 'normal' });
        }
      } else {
        const blockPhrase = phrases.blockPhrases[Math.floor(Math.random() * phrases.blockPhrases.length)];
        turnLog.push({ text: `üõ°Ô∏è ${selectedBot.name} ${blockPhrase}`, type: 'normal' });
      }
      
      const newBotHealth = Math.max(0, currentBotHealth - playerDamage);
      setCurrentBotHealth(newBotHealth);

      // Bot's turn
      if (newBotHealth > 0) {
        const isBotCrit = Math.random() * 100 < 5;
        const isPlayerDodge = Math.random() * 100 < (playerStats.dodgeChance || 5);
        
        if (isPlayerDodge) {
            turnLog.push({ text: `üí® –í—ã —É–≤–µ—Ä–Ω—É–ª–∏—Å—å –æ—Ç –∞—Ç–∞–∫–∏ ${selectedBot.name}!`, type: 'dodge' });
        } else if (botAttackZone !== playerDefenseZone) {
          botDamage = Math.max(1, selectedBot.attack - (playerStats.defense || 5) + Math.floor(Math.random() * 8));
          if (isBotCrit) {
              botDamage = Math.floor(botDamage * 1.5);
              turnLog.push({ text: `üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–î–ê–†! ${selectedBot.name} –Ω–∞–Ω–æ—Å–∏—Ç —Å–æ–∫—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–π —É–¥–∞—Ä –≤ ${zoneNames[botAttackZone]}: ${botDamage} —É—Ä–æ–Ω–∞`, type: 'crit' });
          } else {
              const attackPhrase = phrases.attackPhrases[Math.floor(Math.random() * phrases.attackPhrases.length)];
              turnLog.push({ text: `üí• ${selectedBot.name} ${attackPhrase} –≤ ${zoneNames[botAttackZone]}: ${botDamage} —É—Ä–æ–Ω–∞`, type: 'normal' });
          }
        } else {
          const blockPhrase = phrases.blockPhrases[Math.floor(Math.random() * phrases.blockPhrases.length)];
          turnLog.push({ text: `üõ°Ô∏è –í—ã ${blockPhrase}`, type: 'normal' });
        }
      }

      setBattleLog(prev => [...prev, ...turnLog]);

      const newPlayerHealth = Math.max(0, player.health - botDamage);

      setTimeout(() => {
        if (newBotHealth <= 0) {
          const victoryPhrase = phrases.victoryPhrases[Math.floor(Math.random() * phrases.victoryPhrases.length)];
          setBattleLog(prev => [...prev, { text: `üèÜ ${victoryPhrase} +${selectedBot.experience} –æ–ø—ã—Ç–∞, +${selectedBot.gold} –∑–æ–ª–æ—Ç–∞`, type: 'victory' }]);
          
          onPlayerUpdate({
            experience: player.experience + selectedBot.experience,
            gold: player.gold + selectedBot.gold,
            health: newPlayerHealth,
          });

          toast({
            title: '–ö—Ä–æ–≤–∞–≤–∞—è –ø–æ–±–µ–¥–∞!',
            description: `+${selectedBot.experience} –æ–ø—ã—Ç–∞, +${selectedBot.gold} –∑–æ–ª–æ—Ç–∞`,
          });

          // Call onBattleEnd with victory and rewards
          onBattleEnd?.(true, {
            experience: selectedBot.experience,
            gold: selectedBot.gold
          });

          endBattle();
        } else if (newPlayerHealth <= 0) {
          const defeatPhrase = phrases.defeatPhrases[Math.floor(Math.random() * phrases.defeatPhrases.length)];
          setBattleLog(prev => [...prev, { text: `üíÄ ${defeatPhrase}`, type: 'defeat' }]);
          onPlayerUpdate({ health: newPlayerHealth });
          toast({
            title: '–°–º–µ—Ä—Ç–µ–ª—å–Ω–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ',
            description: '–í—ã –ø–∞–ª–∏ –≤ –±–æ—é',
            variant: 'destructive',
          });
          
          // Call onBattleEnd with defeat and no rewards
          onBattleEnd?.(false, {
            experience: 0,
            gold: 0
          });
          
          endBattle();
        } else {
          if (botDamage > 0) {
            onPlayerUpdate({ health: newPlayerHealth });
          }
          setPlayerAttackZone(null);
          setPlayerDefenseZone(null);
          setIsProcessing(false);
        }
      }, 1500);
    }, 1000);
  };

  const endBattle = () => {
    setInBattle(false);
    setSelectedBot(null);
    setCurrentBotHealth(0);
    setPlayerAttackZone(null);
    setPlayerDefenseZone(null);
    setIsProcessing(false);
    setTimeout(() => setBattleLog([]), 5000);
  };

  return {
    playerStats,
    selectedBot,
    setSelectedBot,
    currentBotHealth,
    setCurrentBotHealth,
    inBattle,
    setInBattle,
    playerAttackZone,
    setPlayerAttackZone,
    playerDefenseZone,
    setPlayerDefenseZone,
    battleLog,
    setBattleLog,
    isProcessing,
    setIsProcessing,
    startBattle,
    executeAttack,
    endBattle,
  };
};
