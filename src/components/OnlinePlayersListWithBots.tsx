import React from 'react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { useToast } from '@/hooks/use-toast';
import { formatPlayerName } from '@/utils/playerUtils';
import { useIsMobile } from '@/hooks/use-mobile';
import { useFastOnlinePlayers } from '@/hooks/useFastOnlinePlayers';
import { useBotSystem } from '@/hooks/useBotSystem';
import { OnlinePlayer } from '@/services/fastOnlineService';
import { RefreshCw, Users, UserCheck, UserX, Bot } from 'lucide-react';

const OnlinePlayersListWithBots = () => {
  const isMobile = useIsMobile();
  const { toast } = useToast();
  
  const { 
    onlinePlayers, 
    loading, 
    error, 
    refreshPlayers, 
    onlineCount, 
    afkCount, 
    inBattleCount,
    inDungeonCount,
    totalCount 
  } = useFastOnlinePlayers(true);

  const { bots, isInitialized } = useBotSystem();

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ –±–æ—Ç–æ–≤
  const allPlayers = React.useMemo(() => {
    const botPlayers: OnlinePlayer[] = bots.map(bot => ({
      id: bot.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
      username: bot.username,
      level: bot.level,
      character_class: bot.character_class,
      last_seen: bot.last_activity,
      status: bot.status,
      location: bot.location,
      isBot: true // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –±–æ—Ç–æ–≤
    }));

    return [...onlinePlayers, ...botPlayers];
  }, [onlinePlayers, bots]);

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –±–æ—Ç–∞–º–∏
  const totalWithBots = allPlayers.length;
  const onlineWithBots = allPlayers.filter(p => p.status === 'online').length;
  const afkWithBots = allPlayers.filter(p => p.status === 'afk').length;
  const inBattleWithBots = allPlayers.filter(p => p.status === 'in_battle').length;
  const inDungeonWithBots = allPlayers.filter(p => p.status === 'in_dungeon').length;
  const botCount = bots.length;

  const handleRefresh = async () => {
    await refreshPlayers();
    toast({
      title: "–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω",
      description: `–ù–∞–π–¥–µ–Ω–æ ${totalWithBots} –∏–≥—Ä–æ–∫–æ–≤ (${botCount} –±–æ—Ç–æ–≤)`,
    });
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'online': return <UserCheck className="h-4 w-4 text-green-500" />;
      case 'afk': return <UserX className="h-4 w-4 text-yellow-500" />;
      case 'in_battle': return <Users className="h-4 w-4 text-red-500" />;
      case 'in_dungeon': return <Users className="h-4 w-4 text-purple-500" />;
      default: return <UserX className="h-4 w-4 text-gray-500" />;
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'online': return '–û–Ω–ª–∞–π–Ω';
      case 'afk': return '–û—Ç–æ—à–µ–ª';
      case 'in_battle': return '–í –±–æ—é';
      case 'in_dungeon': return '–í –ø–æ–¥–∑–µ–º–µ–ª—å–µ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const getClassIcon = (characterClass: string) => {
    switch (characterClass) {
      case 'warrior': return '‚öîÔ∏è';
      case 'mage': return 'üîÆ';
      case 'archer': return 'üèπ';
      default: return '‚ùì';
    }
  };

  const formatLastSeen = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins}–º`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours}—á`;
    
    return date.toLocaleDateString();
  };

  if (error) {
    return (
      <div className="p-4 text-center text-red-500">
        –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤: {error}
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-2 text-sm">
        <div className="bg-background border rounded-lg p-3 text-center">
          <div className="flex items-center justify-center gap-1 mb-1">
            <Users className="h-4 w-4 text-blue-500" />
            <span className="font-semibold">–í—Å–µ–≥–æ</span>
          </div>
          <div className="text-lg font-bold text-blue-600">{totalWithBots}</div>
          {botCount > 0 && (
            <div className="text-xs text-muted-foreground">
              ({botCount} –±–æ—Ç–æ–≤)
            </div>
          )}
        </div>
        
        <div className="bg-background border rounded-lg p-3 text-center">
          <div className="flex items-center justify-center gap-1 mb-1">
            <UserCheck className="h-4 w-4 text-green-500" />
            <span className="font-semibold">–û–Ω–ª–∞–π–Ω</span>
          </div>
          <div className="text-lg font-bold text-green-600">{onlineWithBots}</div>
        </div>
        
        <div className="bg-background border rounded-lg p-3 text-center">
          <div className="flex items-center justify-center gap-1 mb-1">
            <UserX className="h-4 w-4 text-yellow-500" />
            <span className="font-semibold">–û—Ç–æ—à–µ–ª</span>
          </div>
          <div className="text-lg font-bold text-yellow-600">{afkWithBots}</div>
        </div>
        
        <div className="bg-background border rounded-lg p-3 text-center">
          <div className="flex items-center justify-center gap-1 mb-1">
            <Users className="h-4 w-4 text-red-500" />
            <span className="font-semibold">–í –±–æ—é</span>
          </div>
          <div className="text-lg font-bold text-red-600">{inBattleWithBots}</div>
        </div>
        
        <div className="bg-background border rounded-lg p-3 text-center">
          <div className="flex items-center justify-center gap-1 mb-1">
            <Users className="h-4 w-4 text-purple-500" />
            <span className="font-semibold">–ü–æ–¥–∑–µ–º–µ–ª—å–µ</span>
          </div>
          <div className="text-lg font-bold text-purple-600">{inDungeonWithBots}</div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">–ò–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω</h3>
        <button
          onClick={handleRefresh}
          disabled={loading}
          className="flex items-center gap-2 px-3 py-1 text-sm bg-primary text-primary-foreground rounded-md hover:bg-primary/90 disabled:opacity-50"
        >
          <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />
          –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ */}
      <ScrollArea className="h-64 md:h-96">
        {loading ? (
          <div className="text-center py-8 text-muted-foreground">
            –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤...
          </div>
        ) : allPlayers.length === 0 ? (
          <div className="text-center py-8 text-muted-foreground">
            –ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω
          </div>
        ) : (
          <div className="space-y-2">
            {allPlayers.map((player) => (
              <div
                key={player.id}
                className="flex items-center justify-between p-3 bg-background border rounded-lg hover:bg-muted/50 transition-colors"
              >
                <div className="flex items-center gap-3">
                  <div className="flex items-center gap-2">
                    <span className="text-lg">{getClassIcon(player.character_class)}</span>
                    {(player as any).isBot && (
                      <Bot className="h-4 w-4 text-blue-500" title="–ë–æ—Ç" />
                    )}
                  </div>
                  
                  <div>
                    <div className="flex items-center gap-2">
                      <span className="font-medium">
                        {formatPlayerName(player.username)}
                      </span>
                      <span className="text-sm text-muted-foreground">
                        –£—Ä. {player.level}
                      </span>
                    </div>
                    <div className="text-sm text-muted-foreground capitalize">
                      {player.character_class}
                    </div>
                  </div>
                </div>

                <div className="text-right">
                  <div className="flex items-center gap-2 mb-1">
                    {getStatusIcon(player.status)}
                    <span className="text-sm font-medium">
                      {getStatusText(player.status)}
                    </span>
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {player.location}
                  </div>
                  <div className="text-xs text-muted-foreground">
                    {formatLastSeen(player.last_seen)}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </ScrollArea>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–∞—Ö */}
      {isInitialized && botCount > 0 && (
        <div className="text-xs text-muted-foreground text-center">
          üí° –í —Å–ø–∏—Å–∫–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏, —Ç–∞–∫ –∏ –±–æ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∂–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        </div>
      )}
    </div>
  );
};

export default OnlinePlayersListWithBots;
