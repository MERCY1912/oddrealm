import React, { useState, useEffect } from 'react';
import { Player, Item } from '@/types/game';
import { normalizeItemImageUrl } from '@/utils/imageUtils';
import ItemTooltip from './ItemTooltip';

interface InventoryPanelProps {
  player: Player;
  inventory?: Item[];
  onEquipItem?: (item: Item) => void;
  onRemoveFromInventory?: (itemId: string) => void;
}

const InventoryPanel = ({ player, inventory = [], onEquipItem, onRemoveFromInventory }: InventoryPanelProps) => {
  const [draggedItem, setDraggedItem] = useState<number | null>(null);
  const [dragOverSlot, setDragOverSlot] = useState<number | null>(null);
  const [sparkSlot, setSparkSlot] = useState<number | null>(null);
  const [newItemSlot, setNewItemSlot] = useState<number | null>(null);
  const [previousInventoryLength, setPreviousInventoryLength] = useState(inventory.length);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  useEffect(() => {
    if (inventory.length > previousInventoryLength) {
      // –ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      const newItemIndex = inventory.length - 1;
      setNewItemSlot(newItemIndex);
      setTimeout(() => setNewItemSlot(null), 2000);
    }
    setPreviousInventoryLength(inventory.length);
  }, [inventory.length, previousInventoryLength]);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –ø—Ä–æ–ø—Å–æ–≤
  const displayInventory = inventory.length > 0 ? inventory : [
    // –î–µ–º–æ-–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    { id: 1, name: "–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è", type: "consumable", rarity: "common", icon: "üß™", quantity: 3 },
    { id: 2, name: "–ó–µ–ª—å–µ –º–∞–Ω—ã", type: "consumable", rarity: "common", icon: "üíô", quantity: 2 },
    { id: 3, name: "–†–µ–¥–∫–∏–π –∫–∞–º–µ–Ω—å", type: "material", rarity: "rare", icon: "üíé", quantity: 1 },
    { id: 4, name: "–ö–æ–∂–∞ –¥—Ä–∞–∫–æ–Ω–∞", type: "material", rarity: "epic", icon: "üêâ", quantity: 1 },
    { id: 5, name: "–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏", type: "consumable", rarity: "uncommon", icon: "üìú", quantity: 1 },
    { id: 6, name: "–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á", type: "key", rarity: "rare", icon: "üóùÔ∏è", quantity: 2 },
    { id: 7, name: "–Ø–¥ —Å–∫–æ—Ä–ø–∏–æ–Ω–∞", type: "poison", rarity: "uncommon", icon: "ü¶Ç", quantity: 1 },
    { id: 8, name: "–†—É–Ω–∞ —Å–∏–ª—ã", type: "rune", rarity: "rare", icon: "üîÆ", quantity: 1 },
  ];

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'common': return 'border-gray-400 border-2';
      case 'rare': return 'border-blue-400 border-2';
      case 'epic': return 'border-purple-400 border-2';
      case 'legendary': return 'border-yellow-400 border-2';
      default: return 'border-gray-400 border-2';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'consumable': return 'üß™';
      case 'material': return 'üì¶';
      case 'key': return 'üóùÔ∏è';
      case 'poison': return '‚ò†Ô∏è';
      case 'rune': return 'üîÆ';
      case 'weapon': return '‚öîÔ∏è';
      case 'armor': return 'üõ°Ô∏è';
      case 'helmet': return '‚õëÔ∏è';
      case 'boots': return 'üë¢';
      case 'gloves': return 'üß§';
      case 'belt': return 'üîó';
      case 'necklace': return 'üìø';
      case 'ring': return 'üíç';
      case 'shield': return 'üõ°Ô∏è';
      case 'leggings': return 'üëñ';
      case 'bracers': return 'ü¶æ';
      case 'earring': return 'ü¶ª';
      case 'spell': return 'üìú';
      case 'elixir': return 'üß™';
      case 'charm': return 'üîÆ';
      case 'food': return 'üçñ';
      default: return 'üì¶';
    }
  };

  const handleDragStart = (e: React.DragEvent, itemId: string | number) => {
    setDraggedItem(Number(itemId));
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e: React.DragEvent, slotIndex: number) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverSlot(slotIndex);
  };

  const handleDragLeave = () => {
    setDragOverSlot(null);
  };

  const handleDrop = (e: React.DragEvent, slotIndex: number) => {
    e.preventDefault();
    setDragOverSlot(null);
    
    if (draggedItem !== null) {
      // –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –≤—Å–ø–ª–µ—Å–∫–∞
      setSparkSlot(slotIndex);
      setTimeout(() => setSparkSlot(null), 300);
      
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
      console.log(`Moving item ${draggedItem} to slot ${slotIndex}`);
    }
    
    setDraggedItem(null);
  };

  const handleItemClick = (item: Item | { id: number; name: string; type: string; rarity: string; icon: string; quantity: number; }) => {
    if (onEquipItem && onRemoveFromInventory && 'stats' in item && 'price' in item && 'description' in item) {
      // –≠–∫–∏–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç Item
      onEquipItem(item as Item);
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      onRemoveFromInventory(item.id);
    }
  };

  return (
    <section className="panel panel--tint h-full flex flex-col">
      <div className="p-6 h-full flex flex-col">
        <h2 className="text-xl font-bold text-white mb-2 text-center">
          –ò–ù–í–ï–ù–¢–ê–†–¨
        </h2>
        <p className="text-xs text-gray-400 text-center mb-4">
          –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ–±—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å
        </p>
        
        <div className="flex-1 overflow-y-auto">
          <div className="grid grid-cols-4 gap-2 py-0.5">
            {Array.from({ length: 24 }, (_, index) => {
              const item = displayInventory[index];
              const isDragOver = dragOverSlot === index;
              const isSpark = sparkSlot === index;
              const isDragged = draggedItem === item?.id;
              const isNewItem = newItemSlot === index;
              
              const slotElement = (
                <div 
                  key={index}
                  draggable={!!item}
                  onDragStart={(e) => item && handleDragStart(e, item.id)}
                  onDragOver={(e) => handleDragOver(e, index)}
                  onDragLeave={handleDragLeave}
                  onDrop={(e) => handleDrop(e, index)}
                  onClick={() => item && handleItemClick(item)}
                  className={`inventory-empty-slot aspect-square cursor-pointer flex flex-col items-center justify-center p-1 relative rounded-lg transition-all duration-200 ${
                    item ? getRarityColor(item.rarity) : 'border-gray-600 border-2'
                  } ${
                    isDragOver ? 'outline outline-2 outline-amber-300/60' : ''
                  } ${
                    isSpark ? 'animate-spark' : ''
                  } ${
                    isDragged ? 'opacity-50' : ''
                  } ${
                    isNewItem ? 'animate-pulse bg-green-500/20 border-green-400' : ''
                  } ${
                    item ? 'hover:shadow-lg hover:shadow-blue-500/20' : ''
                  }`}
                  title={item ? `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å: ${item.name} (${item.rarity})` : '–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç'}
                >
                  {item ? (
                    <>
                      {'image_url' in item && item.image_url ? (
                        <img
                          src={normalizeItemImageUrl(item.image_url) || item.image_url}
                          alt={item.name || '–ü—Ä–µ–¥–º–µ—Ç'}
                          className="w-full h-full object-contain rounded"
                          onError={(e) => {
                            console.error('Image failed to load in InventoryPanel:', item.image_url, 'for item:', item.name);
                            console.error('Normalized URL:', normalizeItemImageUrl(item.image_url));
                            console.error('Error details:', e);
                            e.currentTarget.style.display = 'none';
                            const parent = e.currentTarget.parentElement;
                            if (parent) {
                              const emojiDiv = document.createElement('div');
                              emojiDiv.className = 'text-lg mb-1';
                              emojiDiv.textContent = getTypeIcon(item.type);
                              parent.appendChild(emojiDiv);
                            }
                          }}
                          onLoad={() => {
                            console.log('Image loaded successfully in InventoryPanel:', item.image_url, 'for item:', item.name);
                          }}
                        />
                      ) : (
                        <div className="text-lg mb-1">{getTypeIcon(item.type)}</div>
                      )}
                      {'quantity' in item && item.quantity && item.quantity > 1 && (
                        <div className="text-xs text-gray-400 absolute bottom-0 right-0 bg-black/50 rounded px-1">
                          {item.quantity}
                        </div>
                      )}
                    </>
                  ) : (
                    <div className="text-gray-600 text-xs">‚Ä¢</div>
                  )}
                </div>
              );

              // –û–±–µ—Ä—Ç—ã–≤–∞–µ–º –≤ —Ç—É–ª—Ç–∏–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç
              if (item && 'stats' in item && 'price' in item && 'description' in item) {
                return (
                  <ItemTooltip key={index} item={item as Item} side="top">
                    {slotElement}
                  </ItemTooltip>
                );
              }

              return slotElement;
            })}
          </div>
        </div>
        
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ */}
        <div className="mt-4 p-3 panel">
          <div className="flex justify-between text-sm text-gray-300">
            <span>–ü—Ä–µ–¥–º–µ—Ç–æ–≤:</span>
            <span className="text-white font-bold">{displayInventory.length}</span>
              </div>
          <div className="flex justify-between text-sm text-gray-300 mt-1">
            <span>–°–ª–æ—Ç—ã:</span>
            <span className="text-white font-bold">{displayInventory.length}/24</span>
          </div>
        </div>
      </div>
    </section>
  );
};

export default InventoryPanel;