import React from 'react';
import { Item } from '@/types/game';
import EquipmentSlotPlaceholder from './EquipmentSlotPlaceholder';
import { normalizeItemImageUrl } from '@/utils/imageUtils';

interface FixedSlotProps {
  w: number;
  h: number;
  title: string;
  item?: Item;
  icon?: React.ReactNode;
  rarity?: "common" | "rare" | "epic" | "legend";
  onClick?: () => void;
  onUnequip?: (item: Item) => void;
}

export default function FixedSlot({ 
  w, 
  h, 
  title, 
  item,
  icon, 
  rarity = "common",
  onClick,
  onUnequip
}: FixedSlotProps) {
  const getRarityStyles = () => {
    const itemRarity = item?.rarity || rarity;
    switch (itemRarity) {
      case "legendary":
      case "legend":
        return "ring-1 ring-[#83622c] shadow-[inset_0_0_14px_rgba(251,191,36,.35),0_0_12px_rgba(251,191,36,.25)]";
      case "epic":
        return "ring-1 ring-[#83622c] shadow-[inset_0_0_12px_rgba(167,139,250,.3),0_0_10px_rgba(167,139,250,.2)]";
      case "rare":
        return "ring-1 ring-[#83622c] shadow-[inset_0_0_12px_rgba(56,189,248,.25),0_0_10px_rgba(56,189,248,.15)]";
      default:
        return "ring-1 ring-[#2a2a33] shadow-[inset_0_0_10px_rgba(255,255,255,.04)]";
    }
  };

  const getItemIcon = () => {
    if (item) {
      console.log('FixedSlot getItemIcon - Item data:', {
        name: item.name,
        type: item.type,
        rarity: item.rarity,
        image_url: item.image_url,
        fullItem: item
      });
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
      if (item.image_url) {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const normalizedImageUrl = normalizeItemImageUrl(item.image_url);
        console.log('FixedSlot getItemIcon - Normalized image URL:', normalizedImageUrl);
        
        return (
          <img
            src={normalizedImageUrl || item.image_url}
            alt={item.name || '–ü—Ä–µ–¥–º–µ—Ç'}
            className="w-full h-full object-contain rounded"
            onError={(e) => {
              console.error('Image failed to load in FixedSlot:', {
                originalUrl: item.image_url,
                normalizedUrl: normalizedImageUrl,
                finalUrl: normalizedImageUrl || item.image_url,
                itemName: item.name,
                slot: title
              });
              e.currentTarget.style.display = 'none';
              const parent = e.currentTarget.parentElement;
              if (parent) {
                parent.innerHTML = `<span class="text-lg">${getEmojiForType(item.type)}</span>`;
              }
            }}
            onLoad={() => {
              console.log('Image loaded successfully in FixedSlot:', {
                originalUrl: item.image_url,
                normalizedUrl: normalizedImageUrl,
                finalUrl: normalizedImageUrl || item.image_url,
                itemName: item.name,
                slot: title
              });
            }}
          />
        );
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏
      console.log('FixedSlot getItemIcon - No image_url, using emoji for type:', item.type);
      return getEmojiForType(item.type);
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º EquipmentSlotPlaceholder
    if (!icon) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ª–æ—Ç–∞ –ø–æ title
      const slotType = getSlotTypeFromTitle(title);
      return <EquipmentSlotPlaceholder slot={slotType} width={w} height={h} />;
    }
    
    return icon;
  };

  const getEmojiForType = (type: string) => {
    switch (type) {
      case 'weapon':
        return '‚öîÔ∏è';
      case 'armor':
        return 'üõ°Ô∏è';
      case 'helmet':
        return '‚õëÔ∏è';
      case 'boots':
        return 'üë¢';
      case 'gloves':
        return 'üß§';
      case 'shield':
        return 'üõ°Ô∏è';
      case 'ring':
        return 'üíç';
      case 'necklace':
        return 'üìø';
      case 'earring':
        return 'üíé';
      default:
        return 'üì¶';
    }
  };

  const getSlotTypeFromTitle = (title: string): string => {
    const titleToSlotMap: { [key: string]: string } = {
      '–®–ª–µ–º': 'helmet',
      '–ù–∞—Ä—É—á–∏': 'bracers',
      '–û—Ä—É–∂–∏–µ': 'weapon',
      '–î–æ—Å–ø–µ—Ö–∏': 'armor',
      '–ü–æ—è—Å': 'belt',
      '–°–µ—Ä—å–≥–∏': 'earring',
      '–ê–º—É–ª–µ—Ç': 'necklace',
      '–ö–æ–ª—å—Ü–æ': 'ring1',
      '–ö–æ–ª—å—Ü–æ 1': 'ring1',
      '–ö–æ–ª—å—Ü–æ 2': 'ring2',
      '–ö–æ–ª—å—Ü–æ 3': 'ring3',
      '–ü–µ—Ä—á–∞—Ç–∫–∏': 'gloves',
      '–©–∏—Ç': 'shield',
      '–ü–æ–Ω–æ–∂–∏': 'leggings',
      '–ë–æ—Ç–∏–Ω–∫–∏': 'boots',
      '–°–∞–ø–æ–≥–∏': 'boots'  // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è CharacterEquipmentPanel
    };
    
    const slotType = titleToSlotMap[title];
    console.log('FixedSlot getSlotTypeFromTitle:', title, '->', slotType);
    return slotType || 'helmet';
  };

  const handleClick = () => {
    if (item && onUnequip) {
      onUnequip(item);
    } else if (onClick) {
      onClick();
    }
  };

  return (
    <button 
      className={`empty-slot ${getRarityStyles()} grid place-items-center cursor-pointer transition-transform`}
      style={{ width: w, height: h }}
      onClick={handleClick}
      title={item ? `–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å: ${item.name} (${item.rarity})` : title}
    >
      {getItemIcon() || <span className="text-ash/60 text-lg">‚óÜ</span>}
    </button>
  );
}
