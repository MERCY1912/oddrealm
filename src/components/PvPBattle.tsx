import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Player, PvPBattle as PvPBattleType, BattleZone } from '@/types/game';
import { toast } from 'sonner';
import PlayerBattlePanel from './PlayerBattlePanel';
import BotBattlePanel from './BotBattlePanel';
import BattleControlPanel from './BattleControlPanel';
import VictoryAnimation from './VictoryAnimation';
import DefeatAnimation from './DefeatAnimation';

interface PvPBattleProps {
  player: Player;
  battle: PvPBattleType;
  onMakeMove: (attackZone: BattleZone, defenseZone: BattleZone) => void;
  onBattleEnd: () => void;
  onRefreshBattle?: () => void;
  onEndBattle?: () => void;
}

const PvPBattle: React.FC<PvPBattleProps> = ({
  player,
  battle,
  onMakeMove,
  onBattleEnd,
  onRefreshBattle,
  onEndBattle
}) => {
  const [selectedAttackZone, setSelectedAttackZone] = useState<BattleZone>('chest');
  const [selectedDefenseZone, setSelectedDefenseZone] = useState<BattleZone>('chest');
  const [timeLeft, setTimeLeft] = useState(30);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showVictoryAnimation, setShowVictoryAnimation] = useState(false);
  const [showDefeatAnimation, setShowDefeatAnimation] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ battle –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
  if (!battle) {
    return (
      <div className="space-y-4">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-400 mb-4">
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—è
          </h2>
          <p className="text-white">
            –î–∞–Ω–Ω—ã–µ –±–æ—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–±–µ–¥—ã –∏–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—è
  useEffect(() => {
    const isPlayer1 = battle.player1.id === player.id;
    const currentPlayer = isPlayer1 ? battle.player1 : battle.player2;
    const opponent = isPlayer1 ? battle.player2 : battle.player1;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –±–æ–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏–≥—Ä–æ–∫–æ–≤
    const battleFinished = currentPlayer.currentHealth <= 0 || opponent.currentHealth <= 0;
    
    if (battle.status === 'finished' || battleFinished) {
      console.log('Battle finished - showing animation:', {
        battleStatus: battle.status,
        battleFinished,
        currentPlayerHealth: currentPlayer.currentHealth,
        opponentHealth: opponent.currentHealth,
        playerId: player.id,
        winner: battle.winner
      });
      
      if (battle.winner === player.id || opponent.currentHealth <= 0) {
        setShowVictoryAnimation(true);
        console.log('Showing victory animation');
      } else {
        setShowDefeatAnimation(true);
        console.log('Showing defeat animation');
      }
    }
  }, [battle.status, battle.winner, battle.player1.currentHealth, battle.player2.currentHealth, player.id]);

  const isPlayer1 = battle.player1.id === player.id;
  const isPlayer2 = battle.player2.id === player.id;
  const isMyTurn = (battle.currentTurn === 1 && isPlayer1) || (battle.currentTurn === 2 && isPlayer2);
  const opponent = isPlayer1 ? battle.player2 : battle.player1;
  const currentPlayer = isPlayer1 ? battle.player1 : battle.player2;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫–ª–∞—Å—Å–∞
  const getClassEmoji = (className: string) => {
    const classEmojis = {
      warrior: '‚öîÔ∏è',
      mage: 'üîÆ',
      archer: 'üèπ',
    };
    return classEmojis[className as keyof typeof classEmojis] || 'üëæ';
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å BotBattlePanel
  const opponentBot = {
    id: opponent.id,
    name: opponent.name,
    level: opponent.level,
    class: opponent.class,
    health: opponent.currentHealth,
    maxHealth: opponent.maxHealth,
    mana: 50, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    maxMana: 50,
    equipment: {}, // –ü—É—Å—Ç–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    image: getClassEmoji(opponent.class) // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å PlayerBattlePanel
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—è, –∞ –Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
  const playerStats = {
    maxHealth: currentPlayer?.maxHealth || player.maxHealth || 100,
    maxMana: player.maxMana || 50, // –ú–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–æ—é
    health: currentPlayer?.currentHealth || player.health || 100,
    mana: player.mana || 50 // –ú–∞–Ω–∞ –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –±–æ—é
  };

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è
  console.log('PvPBattle - Player data sync:', {
    playerId: player.id,
    playerUsername: player.username,
    isPlayer1,
    currentPlayerHealth: currentPlayer.currentHealth,
    currentPlayerMaxHealth: currentPlayer.maxHealth,
    opponentHealth: opponent.currentHealth,
    opponentMaxHealth: opponent.maxHealth,
    battleRound: battle.round,
    battleStatus: battle.status,
    playerStats: {
      health: playerStats.health,
      maxHealth: playerStats.maxHealth,
      mana: playerStats.mana,
      maxMana: playerStats.maxMana
    },
    opponentBot: {
      health: opponentBot.health,
      maxHealth: opponentBot.maxHealth
    }
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–≥ –±–æ—è –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å BattleLog
  const battleLogEntries = battle.battleLog.map((log, index) => ({
    id: index.toString(),
    text: log,
    type: 'normal' as const
  }));

  useEffect(() => {
    if (battle.status === 'waiting_for_moves' && isMyTurn && timeLeft > 0) {
      const timer = setTimeout(() => {
        setTimeLeft(timeLeft - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && isMyTurn) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      handleMakeMove();
    }
  }, [timeLeft, isMyTurn, battle.status]);

  useEffect(() => {
    if (battle.status === 'waiting_for_moves' && isMyTurn) {
      setTimeLeft(30);
    }
  }, [battle.currentTurn, battle.status, isMyTurn]);

  const handleMakeMove = () => {
    if (!isMyTurn || isProcessing) return;
    
    setIsProcessing(true);
    onMakeMove(selectedAttackZone, selectedDefenseZone);
    
    // –°–±—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setIsProcessing(false);
    }, 2000);
  };

  if (battle.status === 'finished') {
    const isWinner = battle.winner === player.id;
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    console.log('Battle finished - Winner determination:', {
      battleWinner: battle.winner,
      playerId: player.id,
      playerUsername: player.username,
      isWinner: isWinner,
      battleStatus: battle.status
    });
    
    return (
      <div className="space-y-4">
        {/* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–±–µ–¥—ã */}
        {isWinner && (
          <VictoryAnimation
            isVisible={showVictoryAnimation}
            onContinue={() => setShowVictoryAnimation(false)}
          />
        )}
        
        {/* –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è */}
        {!isWinner && (
          <DefeatAnimation
            isVisible={showDefeatAnimation}
            onContinue={() => setShowDefeatAnimation(false)}
          />
        )}
        
        {/* –û–±—ã—á–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ */}
        <div className="text-center">
          <h2 className={`text-4xl font-bold ${isWinner ? 'text-green-400' : 'text-red-400'} mb-4`}>
            {isWinner ? 'üèÜ –ü–û–ë–ï–î–ê!' : 'üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï'}
          </h2>
          <p className="text-white text-lg mb-4">
            {isWinner ? '–í—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –ø–æ–±–µ–¥—É!' : '–í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ!'}
          </p>
          {battle.rewards && (
            <div className="medieval-bg-secondary border-2 border-amber-600 rounded-lg p-4 max-w-md mx-auto">
              <h4 className="text-amber-400 font-bold mb-2">–ù–∞–≥—Ä–∞–¥—ã:</h4>
              <div className="space-y-1 text-sm">
                <p className="text-white">
                  –û–ø—ã—Ç: <span className="text-green-400">+{battle.rewards[isWinner ? 'winner' : 'loser'].experience}</span>
                </p>
                <p className="text-white">
                  –ó–æ–ª–æ—Ç–æ: <span className="text-yellow-400">+{battle.rewards[isWinner ? 'winner' : 'loser'].gold}</span>
                </p>
                <p className="text-white">
                  –†–µ–π—Ç–∏–Ω–≥: <span className="text-blue-400">{isWinner ? '+' : ''}{battle.rewards[isWinner ? 'winner' : 'loser'].rating}</span>
                </p>
              </div>
            </div>
          )}
          <Button
            onClick={onBattleEnd}
            className="medieval-bg-primary hover:medieval-bg-primary/80 mt-4"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞—Ä–µ–Ω—É
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–æ—è */}
      <div className="text-center">
        <div className="flex items-center justify-center space-x-4">
          <h2 className="text-2xl font-bold text-amber-400 medieval-title">
            PvP –°—Ä–∞–∂–µ–Ω–∏–µ - –†–∞—É–Ω–¥ {battle.round}
          </h2>
          {onRefreshBattle && (
            <Button
              onClick={onRefreshBattle}
              variant="outline"
              size="sm"
              className="medieval-bg-secondary"
            >
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          )}
          {onEndBattle && (
            <Button
              onClick={onEndBattle}
              variant="destructive"
              size="sm"
              className="medieval-bg-red"
            >
              ‚öîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–æ–π
            </Button>
          )}
        </div>
        {isMyTurn && timeLeft > 0 && (
          <div className="mt-2">
            <Badge className="bg-red-600 text-white">
              –í–∞—à —Ö–æ–¥: {timeLeft}—Å
            </Badge>
          </div>
        )}
        {!isMyTurn && (
          <div className="mt-2">
            <Badge className="bg-blue-600 text-white">
              –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            </Badge>
          </div>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—è */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ò–≥—Ä–æ–∫ */}
        <div className="lg:col-span-1">
          <PlayerBattlePanel 
            player={player} 
            playerStats={playerStats} 
          />
        </div>

        {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–º */}
        <div className="lg:col-span-1">
          {isMyTurn ? (
            <BattleControlPanel
              playerAttackZone={selectedAttackZone}
              playerDefenseZone={selectedDefenseZone}
              setPlayerAttackZone={setSelectedAttackZone}
              setPlayerDefenseZone={setSelectedDefenseZone}
              executeAttack={handleMakeMove}
              isProcessing={isProcessing}
            />
          ) : (
            <div className="panel panel--tint panel--warm h-full">
              <div className="p-4 h-full flex flex-col items-center justify-center">
                <div className="text-center">
                  <h3 className="text-xl font-bold text-blue-400 mb-4">
                    ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                  </h3>
                  <p className="text-white">
                    –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ {opponent.name} –¥–µ–ª–∞–µ—Ç —Ö–æ–¥...
                  </p>
                  <p className="text-sm text-gray-400 mt-2">
                    –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ */}
        <div className="lg:col-span-1">
          <BotBattlePanel 
            selectedBot={opponentBot}
            currentBotHealth={opponent.currentHealth}
            botEquipment={{}}
          />
        </div>
      </div>

      {/* –õ–æ–≥ –±–æ—è */}
      <div className="lg:col-span-3">
        <div className="panel panel--tint panel--warm">
          <div className="p-4">
            <h3 className="font-ui text-lg font-bold tracking-wide mb-3 text-center"
                style={{ background: "linear-gradient(180deg,#fde8a7,#8a5a18)", WebkitBackgroundClip: "text", color: "transparent" }}>
              –•–†–û–ù–ò–ö–ê –ë–ò–¢–í–´
            </h3>
            <div className="h-32 overflow-y-auto space-y-1 game-scrollbar">
              {battleLogEntries.map((log, index) => {
                let logClass = "text-gray-300";
                if (log.type === 'crit') logClass = "text-red-400 font-bold";
                if (log.type === 'dodge') logClass = "text-green-400 font-bold";
                if (log.type === 'victory') logClass = "text-yellow-400 font-bold";
                if (log.type === 'defeat') logClass = "text-red-400 font-bold";
                if (log.type === 'info') logClass = "text-blue-400";
                return (
                  <div key={index} className={`text-sm transition-all duration-300 ${logClass}`}>
                    {log.text}
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PvPBattle;
