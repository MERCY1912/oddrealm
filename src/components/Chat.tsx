
import React, { useState, useEffect, useRef } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { ScrollArea } from '@/components/ui/scroll-area';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useIsMobile } from '@/hooks/use-mobile';

interface ChatMessage {
  id: string;
  player_name: string;
  message: string;
  created_at: string;
  mentions?: string[]; // –ú–∞—Å—Å–∏–≤ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
}

interface ChatProps {
  userId: string;
  username: string;
}

const Chat = ({ userId, username }: ChatProps) => {
  const isMobile = useIsMobile();
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const processedMessageIds = useRef<Set<string>>(new Set());
  const messageInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    loadMessages();
    addMockMessages();
    subscribeToMessages();
    
    // Fallback: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(() => {
      loadMessages();
    }, 5000);

    return () => {
      clearInterval(interval);
    };
  }, []);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  const addMockMessages = () => {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const mockMessages: ChatMessage[] = [
      {
        id: 'mock-1',
        player_name: '–î—Ä–∞–∫–æ–Ω–æ–±–æ–π',
        message: '–ö—Ç–æ-–Ω–∏–±—É–¥—å —Ö–æ—á–µ—Ç —Å—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ?',
        created_at: new Date(Date.now() - 300000).toISOString(),
      },
      {
        id: 'mock-2',
        player_name: '–¢–µ–º–Ω—ã–π_–ú–∞–≥',
        message: '–ü—Ä–æ–¥–∞—é —Ä–µ–¥–∫–∏–π –ø–æ—Å–æ—Ö +20 –∫ –º–∞–≥–∏–∏!',
        created_at: new Date(Date.now() - 240000).toISOString(),
      },
      {
        id: 'mock-3',
        player_name: '–ë—ã—Å—Ç—Ä–∞—è_–°—Ç—Ä–µ–ª–∞',
        message: '–ì–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à—É—é –±—Ä–æ–Ω—é?',
        created_at: new Date(Date.now() - 180000).toISOString(),
      },
      {
        id: 'mock-4',
        player_name: '–ñ–µ–ª–µ–∑–Ω—ã–π_–ö—É–ª–∞–∫',
        message: '–ò—â—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–π–¥–∞ –Ω–∞ –±–æ—Å—Å–∞!',
        created_at: new Date(Date.now() - 120000).toISOString(),
      },
      {
        id: 'mock-5',
        player_name: '–õ–µ–¥—è–Ω–∞—è_–í–µ–¥—å–º–∞',
        message: '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞, –≤–æ–∏–Ω—ã?',
        created_at: new Date(Date.now() - 60000).toISOString(),
      },
      {
        id: 'mock-6',
        player_name: '–ó–ª–∞—Ç–æ–≤–ª–∞—Å–∫–∞',
        message: '–ö—Ç–æ –∑–Ω–∞–µ—Ç, –≥–¥–µ —Ç–æ—Ä–≥–æ–≤–µ—Ü –∞–ª—Ö–∏–º–∏–µ–π?',
        created_at: new Date(Date.now() - 30000).toISOString(),
      },
    ];
    
    setMessages(mockMessages);
    setLoading(false);
  };

  const loadMessages = async () => {
    try {
      const { data, error } = await supabase
        .from('all_chat_messages')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(20);

      if (error) throw error;

      if (data && data.length > 0) {
        const reversedData = data.reverse();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        setMessages(prevMessages => {
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
          if (prevMessages.length === 0 || loading) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ ID –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            reversedData.forEach(msg => processedMessageIds.current.add(msg.id));
            return reversedData;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          const lastMessage = prevMessages[prevMessages.length - 1];
          const newMessages = reversedData.filter(msg => 
            new Date(msg.created_at) > new Date(lastMessage.created_at) &&
            !processedMessageIds.current.has(msg.id)
          );
          
          if (newMessages.length > 0) {
            console.log(`üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newMessages.length} –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
            // –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            newMessages.forEach(msg => processedMessageIds.current.add(msg.id));
            return [...prevMessages, ...newMessages];
          }
          
          return prevMessages;
        });
      }
    } catch (error: any) {
      console.log('–ß–∞—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ');
    } finally {
      setLoading(false);
    }
  };

  const subscribeToMessages = () => {
    console.log('üì° –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞...');
    
    const channel = supabase
      .channel('chat_messages')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'chat_messages',
        },
        (payload) => {
          console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', payload);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (processedMessageIds.current.has(payload.new.id)) {
            console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
          }
          
          const newMessage: ChatMessage = {
            id: payload.new.id,
            player_name: payload.new.player_name,
            message: payload.new.message,
            created_at: payload.new.created_at
          };
          
          processedMessageIds.current.add(payload.new.id);
          setMessages(prev => [...prev, newMessage]);
        }
      )
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'bot_chat_messages',
        },
        (payload) => {
          console.log('ü§ñ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:', payload);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (processedMessageIds.current.has(payload.new.id)) {
            console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
          }
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç ChatMessage
          const botMessage: ChatMessage = {
            id: payload.new.id,
            player_name: payload.new.player_name,
            message: payload.new.message,
            created_at: payload.new.created_at
          };
          
          processedMessageIds.current.add(payload.new.id);
          setMessages(prev => [...prev, botMessage]);
        }
      )
      .subscribe();

    return () => {
      console.log('üì° –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–∞—Ç–∞');
      supabase.removeChannel(channel);
    };
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ –Ω–∏–∫—É
  const handleUsernameClick = (clickedUsername: string) => {
    if (messageInputRef.current) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ø–æ–º—è–Ω—É—Ç –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const currentMessage = newMessage;
      const mentionPattern = new RegExp(`@${clickedUsername}\\b`, 'i');
      
      if (!mentionPattern.test(currentMessage)) {
        // –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
        const mention = `@${clickedUsername} `;
        const newText = currentMessage + (currentMessage ? ' ' : '') + mention;
        setNewMessage(newText);
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setTimeout(() => {
          messageInputRef.current?.focus();
        }, 100);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  const renderMessageWithMentions = (message: string) => {
    const mentionRegex = /@(\w+)/g;
    const parts = [];
    let lastIndex = 0;
    let match;

    while ((match = mentionRegex.exec(message)) !== null) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (match.index > lastIndex) {
        parts.push(message.slice(lastIndex, match.index));
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
      parts.push(
        <span 
          key={match.index} 
          className="bg-blue-100 text-blue-800 px-1 rounded font-medium cursor-pointer hover:bg-blue-200 transition-colors"
          onClick={() => handleUsernameClick(match[1])}
          title={`–£–ø–æ–º—è–Ω—É—Ç—å ${match[1]}`}
        >
          @{match[1]}
        </span>
      );
      
      lastIndex = match.index + match[0].length;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if (lastIndex < message.length) {
      parts.push(message.slice(lastIndex));
    }
    
    return parts.length > 0 ? parts : message;
  };

  const sendMessage = async () => {
    if (!newMessage.trim()) return;

    const messageText = newMessage.trim();
    setNewMessage('');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const mentionRegex = /@(\w+)/g;
    const mentions: string[] = [];
    let match;
    while ((match = mentionRegex.exec(messageText)) !== null) {
      mentions.push(match[1]);
    }

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const newMsg: ChatMessage = {
      id: `local-${Date.now()}`,
      player_name: username,
      message: messageText,
      created_at: new Date().toISOString(),
      mentions: mentions.length > 0 ? mentions : undefined
    };
    
    setMessages(prev => [...prev, newMsg]);

    // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try {
      const { error } = await supabase
        .from('chat_messages')
        .insert({
          player_id: userId,
          player_name: username,
          message: messageText,
        });

      if (error) throw error;
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } catch (error: any) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      sendMessage();
    }
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className="h-full flex flex-col chat-area">
      <ScrollArea 
        className={`flex-1 min-h-0 game-scrollbar ${isMobile ? 'px-1 py-0.5' : 'p-2'}`}
        ref={scrollAreaRef}
      >
        <div className={`${isMobile ? 'space-y-0.5' : 'space-y-2'}`}>
          {loading ? (
            <div className={`text-gray-500 text-center ${isMobile ? 'text-xs py-1' : 'text-sm'}`}>
              –ó–∞–≥—Ä—É–∑–∫–∞...
            </div>
          ) : messages.length === 0 ? (
            <div className={`text-gray-500 text-center ${isMobile ? 'text-xs py-1' : 'text-sm'}`}>
              {isMobile ? '–ß–∞—Ç –ø—É—Å—Ç' : '–ß–∞—Ç –ø—É—Å—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –Ω–∞—á–Ω–µ—Ç –±–µ—Å–µ–¥—É!'}
            </div>
          ) : (
            messages.map((message) => (
              <div key={message.id} className={`text-white ${isMobile ? 'py-0.5 text-xs' : 'py-1 text-sm'}`}>
                {isMobile ? (
                  <div className="flex items-start gap-1">
                    <span 
                      className="text-red-400 font-bold text-xs flex-shrink-0 cursor-pointer hover:text-red-300 transition-colors"
                      onClick={() => handleUsernameClick(message.player_name)}
                      title={`–£–ø–æ–º—è–Ω—É—Ç—å ${message.player_name}`}
                    >
                      {message.player_name}:
                    </span>
                    <span className="break-words">{renderMessageWithMentions(message.message)}</span>
                  </div>
                ) : (
                  <>
                    <span className="text-gray-500 text-xs">{formatTime(message.created_at)}</span>
                    <span 
                      className="text-red-400 font-bold text-xs ml-2 cursor-pointer hover:text-red-300 transition-colors"
                      onClick={() => handleUsernameClick(message.player_name)}
                      title={`–£–ø–æ–º—è–Ω—É—Ç—å ${message.player_name}`}
                    >
                      {message.player_name}
                    </span>
                    <span className="ml-2 break-words">{renderMessageWithMentions(message.message)}</span>
                  </>
                )}
              </div>
            ))
          )}
          {/* –ù–µ–≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ */}
          <div ref={messagesEndRef} />
        </div>
      </ScrollArea>
      
      <div className={`border-t medieval-border flex-shrink-0 ${isMobile ? 'px-1 py-0.5' : 'p-2'}`}>
        <div className={`flex ${isMobile ? 'gap-1' : 'gap-2'}`}>
          <Input
            ref={messageInputRef}
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={isMobile ? "–°–æ–æ–±—â–µ–Ω–∏–µ..." : "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."}
            className={`medieval-bg-tertiary medieval-border text-white flex-1 shadow-[inset_0_1px_0_rgba(255,255,255,.06)] ${isMobile ? 'text-xs h-7' : 'text-sm'}`}
            style={{
              background: 'linear-gradient(145deg, hsl(var(--medieval-bg-tertiary)), hsl(var(--medieval-bg-secondary)))'
            }}
            maxLength={200}
          />
          <Button
            onClick={sendMessage}
            className={`bg-red-600 hover:bg-red-700 text-white flex-shrink-0 ${isMobile ? 'text-xs px-2 h-7' : 'text-sm px-3'}`}
            disabled={!newMessage.trim()}
          >
            {isMobile ? '‚Üµ' : '‚Üµ'}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Chat;
