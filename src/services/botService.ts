import { supabase } from '@/integrations/supabase/client';
import MistralService from './mistralService';
import { BotCharacter, BotMessage, ChatMessage } from '@/types/bot';

class BotService {
  private static instance: BotService;
  private mistralService: MistralService;
  private botCharacters: BotCharacter[] = [];
  private isRunning = false;
  private chatCheckInterval: NodeJS.Timeout | null = null;
  private presenceUpdateInterval: NodeJS.Timeout | null = null;
  private processedMessages: Set<string> = new Set();
  private isProcessingMessage: Set<string> = new Set();
  private instanceId: string = Math.random().toString(36).substr(2, 9);

  private constructor() {
    this.mistralService = MistralService.getInstance();
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const apiKey = import.meta.env.VITE_MISTRAL_API_KEY;
    if (apiKey) {
      this.mistralService.setApiKey(apiKey);
    }
  }

  public static getInstance(): BotService {
    if (!BotService.instance) {
      BotService.instance = new BotService();
    }
    return BotService.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   */
  async initializeBots(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —É–∂–µ –±–æ—Ç—ã
      if (this.isRunning) {
        console.log('‚ö†Ô∏è BotService —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
        return;
      }

      console.log(`BotService [${this.instanceId}]: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–æ–≤...`);
      
      // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      await this.createDefaultBots();
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
      await this.loadActiveBots();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤
      this.startBotActivity();
      
      console.log(`BotService: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${this.botCharacters.length} –±–æ—Ç–æ–≤`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–æ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private async createDefaultBots(): Promise<void> {
    const defaultBots: Omit<BotCharacter, 'id' | 'last_activity'>[] = [
      {
        name: '–ì–∞—Ä–æld',
        username: 'garold_bot',
        character_class: 'warrior',
        level: 15,
        personality: '–û–ø—ã—Ç–Ω—ã–π –≤–æ–∏–Ω, –ª—é–±–∏—Ç –ø–æ–º–æ–≥–∞—Ç—å –Ω–æ–≤–∏—á–∫–∞–º. –ì–æ–≤–æ—Ä–∏—Ç –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ß–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ—Ç –±–æ–∏ –∏ –∞—Ä–µ–Ω—É.',
        is_active: true,
        response_chance: 70,
        location: '–¢–∞–≤—Ä–æ—Å',
        status: 'online'
      },
      {
        name: '–ú–µ—Ä–ª–∏–Ω',
        username: 'merlin_bot',
        character_class: 'mage',
        level: 22,
        personality: '–ú—É–¥—Ä—ã–π –º–∞–≥, –∑–Ω–∞–µ—Ç –º–Ω–æ–≥–æ –æ –º–∞–≥–∏–∏ –∏ –ø–æ–¥–∑–µ–º–µ–ª—å—è—Ö. –õ—é–±–∏—Ç –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏.',
        is_active: true,
        response_chance: 60,
        location: '–¢–∞–≤—Ä–æ—Å',
        status: 'online'
      },
      {
        name: '–õ—É–Ω–∞',
        username: 'luna_bot',
        character_class: 'archer',
        level: 18,
        personality: '–õ–æ–≤–∫–∏–π –ª—É—á–Ω–∏–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω–∞—è. –õ—é–±–∏—Ç –æ–±—Å—É–∂–¥–∞—Ç—å –∫–≤–µ—Å—Ç—ã –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.',
        is_active: true,
        response_chance: 80,
        location: '–¢–∞–≤—Ä–æ—Å',
        status: 'online'
      }
    ];

    for (const botData of defaultBots) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–æ—Ç
        const { data: existingBot } = await supabase
          .from('bot_characters')
          .select('id')
          .eq('username', botData.username)
          .single();

        if (!existingBot) {
          const { data, error } = await supabase
            .from('bot_characters')
            .insert([{
              ...botData,
              last_activity: new Date().toISOString()
            }])
            .select()
            .single();

          if (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ ${botData.username}:`, error);
          } else {
            console.log(`–°–æ–∑–¥–∞–Ω –±–æ—Ç: ${botData.name}`);
          }
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞ ${botData.username}:`, error);
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  private async loadActiveBots(): Promise<void> {
    try {
      const { data, error } = await supabase
        .from('bot_characters')
        .select('*')
        .eq('is_active', true);

      if (error) {
        throw error;
      }

      this.botCharacters = data || [];
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.botCharacters.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–æ–≤:', error);
      this.botCharacters = [];
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤
   */
  private startBotActivity(): void {
    if (this.isRunning) {
      return;
    }

    this.isRunning = true;
    console.log('BotService: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.chatCheckInterval = setInterval(() => {
      this.checkForNewMessages();
    }, 30000);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    this.presenceUpdateInterval = setInterval(() => {
      this.updateBotPresence();
    }, 120000);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    setTimeout(() => {
      this.checkForNewMessages();
      this.updateBotPresence();
    }, 5000);
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤
   */
  stopBotActivity(): void {
    this.isRunning = false;
    
    if (this.chatCheckInterval) {
      clearInterval(this.chatCheckInterval);
      this.chatCheckInterval = null;
    }
    
    if (this.presenceUpdateInterval) {
      clearInterval(this.presenceUpdateInterval);
      this.presenceUpdateInterval = null;
    }
    
    console.log('BotService: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
   */
  private async checkForNewMessages(): Promise<void> {
    try {
      console.log(`üîç BotService [${this.instanceId}]: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...`);
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
      const tenMinutesAgo = new Date(Date.now() - 10 * 60 * 1000).toISOString();
      this.cleanOldProcessedMessages(tenMinutesAgo);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
      const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();
      
      const { data: recentMessages, error } = await supabase
        .from('all_chat_messages')
        .select('*')
        .gte('created_at', fiveMinutesAgo)
        .order('created_at', { ascending: false })
        .limit(10);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
        return;
      }

      console.log(`üì® –ù–∞–π–¥–µ–Ω–æ ${recentMessages?.length || 0} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç`);
      
      if (!recentMessages || recentMessages.length === 0) {
        console.log('üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
      }

      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ is_bot_message –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      const humanMessages = recentMessages.filter(msg => 
        !msg.is_bot_message && !this.botCharacters.some(bot => bot.username === msg.player_name)
      );

      console.log(`üë§ –ù–∞–π–¥–µ–Ω–æ ${humanMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      if (humanMessages.length === 0) {
        console.log('ü§ñ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–≤)
      const { data: chatHistory } = await supabase
        .from('all_chat_messages')
        .select('player_name, message, created_at')
        .order('created_at', { ascending: false })
        .limit(20);

      // –í—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      console.log('üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      const respondingBot = this.selectBotForResponse();
      if (!respondingBot) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
        return;
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
      const messageToRespond = this.selectMessageToRespond(humanMessages);
      if (!messageToRespond) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –ª–∏ —É–∂–µ –±–æ—Ç—ã –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (this.processedMessages.has(messageToRespond.id)) {
        console.log(`‚ö†Ô∏è –ù–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ "${messageToRespond.message}" —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –±–æ—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (this.isProcessingMessage.has(messageToRespond.id)) {
        console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ "${messageToRespond.message}" —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        return;
      }

      // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ
      this.isProcessingMessage.add(messageToRespond.id);

      try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      console.log(`üöÄ BotService [${this.instanceId}] - –ë–æ—Ç ${respondingBot.name} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞: "${messageToRespond.message}"`);
      await this.generateBotResponse(respondingBot, messageToRespond, chatHistory || []);
      
      // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
      this.processedMessages.add(messageToRespond.id);
      console.log(`‚úÖ BotService [${this.instanceId}] - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processedMessages.size}`);
      } finally {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
        this.isProcessingMessage.delete(messageToRespond.id);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private cleanOldProcessedMessages(cutoffTime: string): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ù–æ –ø–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ ID, –ø—Ä–æ—Å—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä Set
    if (this.processedMessages.size > 100) {
      console.log('üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      this.processedMessages.clear();
      this.isProcessingMessage.clear();
    }
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   */
  private selectBotForResponse(): BotCharacter | null {
    console.log('üéØ –í—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞...');
    console.log('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã:', this.botCharacters.map(bot => ({
      name: bot.name,
      status: bot.status,
      response_chance: bot.response_chance
    })));

    const availableBots = this.botCharacters.filter(bot => 
      bot.status !== 'offline' && Math.random() * 100 < bot.response_chance
    );

    console.log(`‚úÖ –ë–æ—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –æ—Ç–≤–µ—Ç—É: ${availableBots.length}`);

    if (availableBots.length === 0) {
      console.log('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
      return null;
    }

    const selectedBot = availableBots[Math.floor(Math.random() * availableBots.length)];
    console.log(`‚úÖ –í—ã–±—Ä–∞–Ω –±–æ—Ç: ${selectedBot.name}`);
    return selectedBot;
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
   */
  private selectMessageToRespond(messages: any[]): any | null {
    console.log('üìù –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞...');
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const latestMessage = messages[0];
    console.log('üí¨ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', latestMessage);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–Ω–µ –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç)
    const messageTime = new Date(latestMessage.created_at).getTime();
    const now = Date.now();
    const twoMinutesAgo = now - (2 * 60 * 1000);
    
    console.log(`‚è∞ –í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${new Date(messageTime).toLocaleTimeString()}`);
    console.log(`‚è∞ –°–µ–π—á–∞—Å: ${new Date(now).toLocaleTimeString()}`);
    console.log(`‚è∞ 2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥: ${new Date(twoMinutesAgo).toLocaleTimeString()}`);
    
    if (messageTime < twoMinutesAgo) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return null; // –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ
    }
    
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞');
    return latestMessage;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
   */
  private async generateBotResponse(
    bot: BotCharacter, 
    messageToRespond: any, 
    chatHistory: any[]
  ): Promise<void> {
    try {
      console.log(`ü§ñ BotService [${this.instanceId}] - –ë–æ—Ç ${bot.name} –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${messageToRespond.message}"`);
      console.log(`üîë Mistral API –¥–æ—Å—Ç—É–ø–µ–Ω: ${this.mistralService.isAvailable()}`);
      
      const response = await this.mistralService.generateBotResponse(
        bot.personality,
        chatHistory,
        messageToRespond.message,
        bot.name
      );
      
      console.log(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: "${response}"`);

      if (response) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        const { error } = await supabase
          .from('bot_chat_messages')
          .insert([{
            bot_id: bot.id,
            player_name: bot.username,
            message: response,
            created_at: new Date().toISOString()
          }]);

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞:', error);
        } else {
          console.log(`‚úÖ BotService [${this.instanceId}] - –ë–æ—Ç ${bot.name} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç: "${response}"`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
          await this.updateBotActivity(bot.id, 'chat', `–û—Ç–≤–µ—Ç–∏–ª: "${response.substring(0, 50)}..."`);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞:', error);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–æ–≤
   */
  private async updateBotPresence(): Promise<void> {
    for (const bot of this.botCharacters) {
      try {
        // –°–ª—É—á–∞–π–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ª–æ–∫–∞—Ü–∏—é
        const shouldChangeStatus = Math.random() < 0.3; // 30% —à–∞–Ω—Å
        const shouldChangeLocation = Math.random() < 0.2; // 20% —à–∞–Ω—Å

        let newStatus = bot.status;
        let newLocation = bot.location;

        if (shouldChangeStatus) {
          const statuses: Array<BotCharacter['status']> = ['online', 'afk', 'in_battle', 'in_dungeon'];
          newStatus = statuses[Math.floor(Math.random() * statuses.length)];
        }

        if (shouldChangeLocation) {
          const locations = ['–¢–∞–≤—Ä–æ—Å', '–ê—Ä–µ–Ω–∞', '–ü–æ–¥–∑–µ–º–µ–ª—å–µ', '–ì–∏–ª—å–¥–∏—è'];
          newLocation = locations[Math.floor(Math.random() * locations.length)];
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const now = new Date().toISOString();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–æ—Ç–∞
        console.log(`ü§ñ –ë–æ—Ç ${bot.name}: ${newStatus} –≤ ${newLocation}`);
        const { error: botError } = await supabase
          .from('bot_characters')
          .update({
            status: newStatus,
            location: newLocation,
            last_activity: now
          })
          .eq('id', bot.id);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ—Ç–∞
        const { error: presenceError } = await supabase
          .from('bot_presence')
          .upsert({
            bot_id: bot.id,
            last_seen: now,
            status: newStatus,
            location: newLocation,
            last_activity: now
          }, {
            onConflict: 'bot_id'
          });

        const error = botError || presenceError;

        if (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –±–æ—Ç–∞ ${bot.name}:`, error);
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
          bot.status = newStatus;
          bot.location = newLocation;
          bot.last_activity = new Date().toISOString();

          console.log(`–ë–æ—Ç ${bot.name}: ${newStatus} –≤ ${newLocation}`);
        }

      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ ${bot.name}:`, error);
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
   */
  private async updateBotActivity(
    botId: string, 
    activityType: 'chat' | 'status_change' | 'location_change', 
    details: string
  ): Promise<void> {
    try {
      await supabase
        .from('bot_activity')
        .insert([{
          bot_id: botId,
          activity_type: activityType,
          details: details,
          timestamp: new Date().toISOString()
        }]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
   */
  getActiveBots(): BotCharacter[] {
    return this.botCharacters;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø–æ ID
   */
  getBotById(id: string): BotCharacter | undefined {
    return this.botCharacters.find(bot => bot.id === id);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º
   */
  isBot(username: string): boolean {
    return this.botCharacters.some(bot => bot.username === username);
  }
}

export default BotService;
