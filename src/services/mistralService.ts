interface MistralMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface MistralResponse {
  choices: Array<{
    message: {
      content: string;
    };
  }>;
}

class MistralService {
  private static instance: MistralService;
  private apiKey: string;
  private baseUrl = 'https://api.mistral.ai/v1/chat/completions';
  private model = 'mistral-medium-latest';

  private constructor() {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞
    this.apiKey = import.meta.env.VITE_MISTRAL_API_KEY || 
                  (typeof window !== 'undefined' && (window as any).VITE_MISTRAL_API_KEY) || 
                  'cZGg3pBnGpBY6hA3m7cXcJ947eIy9KXC'; // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    if (!this.apiKey) {
      console.warn('Mistral API key not found. Bot responses will be disabled.');
      console.log('Available env vars:', Object.keys(import.meta.env));
    } else {
      console.log('‚úÖ Mistral API key loaded successfully');
    }
  }

  public static getInstance(): MistralService {
    if (!MistralService.instance) {
      MistralService.instance = new MistralService();
    }
    return MistralService.instance;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á –≤—Ä—É—á–Ω—É—é (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  public setApiKey(apiKey: string): void {
    this.apiKey = apiKey;
    console.log('‚úÖ Mistral API key set manually');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞ –∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
   */
  async generateBotResponse(
    botPersonality: string,
    chatHistory: Array<{ username: string; message: string; timestamp: string }>,
    currentMessage: string,
    botName: string
  ): Promise<string> {
    console.log(`üß† MistralService: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è ${botName}`);
    console.log(`üîë API –∫–ª—é—á: ${this.apiKey ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –ù–ê–ô–î–ï–ù'}`);
    
    if (!this.apiKey) {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç');
      return this.getFallbackResponse(botPersonality);
    }

    try {
      const systemPrompt = this.createSystemPrompt(botPersonality, botName);
      const messages = this.buildMessageHistory(systemPrompt, chatHistory, currentMessage);

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Mistral AI...');
      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏—è:', messages);

      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model: this.model,
          messages,
          max_tokens: 100,
          temperature: 0.8,
          top_p: 0.9,
        }),
      });

      if (!response.ok) {
        throw new Error(`Mistral API error: ${response.status}`);
      }

      const data: MistralResponse = await response.json();
      const botResponse = data.choices[0]?.message?.content?.trim();

      if (!botResponse) {
        return this.getFallbackResponse(botPersonality);
      }

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
      return botResponse.length > 200 ? botResponse.substring(0, 200) + '...' : botResponse;

    } catch (error) {
      console.error('Error generating bot response:', error);
      return this.getFallbackResponse(botPersonality);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –±–æ—Ç–∞
   */
  private createSystemPrompt(personality: string, botName: string): string {
    return `–¢—ã ${botName}, –∏–≥—Ä–æ–∫ –≤ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–µ "Realm of Champions". 

–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å: ${personality}

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
- –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∏–≥—Ä–æ–∫, –∞ –Ω–µ –∫–∞–∫ AI
- –ò—Å–ø–æ–ª—å–∑—É–π –∏–≥—Ä–æ–≤—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é (—É—Ä–æ–≤–Ω–∏, –∫–ª–∞—Å—Å—ã, –ø–æ–¥–∑–µ–º–µ–ª—å—è, –∞—Ä–µ–Ω–∞)
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–º–æ–≥–∞–π –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã AI –∏–ª–∏ –±–æ—Ç
- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –º–µ—Ä—É
- –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
- "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ –≤ –∏–≥—Ä–µ?"
- "–Ø —Å–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–∂—É –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ!"
- "–ú–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –æ—Ä—É–∂–∏—è?"
- "–£–≤–∏–¥–∏–º—Å—è –Ω–∞ –∞—Ä–µ–Ω–µ! üí™"`;
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private buildMessageHistory(
    systemPrompt: string,
    chatHistory: Array<{ username: string; message: string; timestamp: string }>,
    currentMessage: string
  ): MistralMessage[] {
    console.log(`üìö –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: ${chatHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log('üìù –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', chatHistory[0]);
    
    const messages: MistralMessage[] = [
      { role: 'system', content: systemPrompt }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const recentHistory = chatHistory.slice(-5);
    for (const msg of recentHistory) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π (username/player_name)
      const username = msg.username || msg.player_name;
      const message = msg.message;
      
      if (msg && username && message) {
        messages.push({
          role: username.includes('_bot') || username.includes('Bot') ? 'assistant' : 'user',
          content: `${username}: ${message}`
        });
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.push({
      role: 'user',
      content: currentMessage
    });

    return messages;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
   */
  private getFallbackResponse(personality: string): string {
    const fallbackResponses = [
      "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ",
      "–ü–æ–Ω—è–ª, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
      "–î–∞, —Å–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π",
      "–•–º, –Ω–µ –¥—É–º–∞–ª –æ–± —ç—Ç–æ–º",
      "–•–æ—Ä–æ—à–∞—è –∏–¥–µ—è!",
      "–ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ",
      "–£ –º–µ–Ω—è —Ç–æ–∂–µ —Ç–∞–∫ –±—ã–ª–æ",
      "–ö–ª–∞—Å—Å–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π"
    ];

    // –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏—á–Ω–æ—Å—Ç–∏
    if (personality.includes('–≤–æ–∏–Ω') || personality.includes('–∞–≥—Ä–µ—Å—Å–∏–≤–Ω')) {
      return "üí™ –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —Å —ç—Ç–∏–º!";
    } else if (personality.includes('–º–∞–≥') || personality.includes('–º—É–¥—Ä')) {
      return "üîÆ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å...";
    } else if (personality.includes('–ª—É—á–Ω–∏–∫') || personality.includes('–æ—Å—Ç–æ—Ä–æ–∂–Ω')) {
      return "üèπ –ù—É–∂–Ω–æ –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ";
    }

    return fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API
   */
  isAvailable(): boolean {
    return !!this.apiKey;
  }
}

export default MistralService;
