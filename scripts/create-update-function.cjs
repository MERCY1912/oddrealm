const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createUpdateFunction() {
  try {
    console.log('üîß Creating update_user_presence function...');

    // SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    const createFunctionSQL = `
      CREATE OR REPLACE FUNCTION public.update_user_presence(
        p_status text DEFAULT 'online',
        p_location text DEFAULT '–¢–∞–≤—Ä–æ—Å'
      )
      RETURNS void
      LANGUAGE sql
      SECURITY DEFINER
      AS $$
        INSERT INTO public.user_activity (user_id, last_seen, status, location, last_activity)
        VALUES (auth.uid(), now(), p_status::text, p_location, now())
        ON CONFLICT (user_id)
        DO UPDATE SET 
          last_seen = now(),
          status = p_status::text,
          location = p_location,
          last_activity = now();
      $$;
    `;

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
    console.log('üìù Attempting to create function via SQL...');
    
    // –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, Supabase –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π SQL —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
    // –ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    
    console.log('üß™ Testing simple update_user_presence...');
    
    const { error: simpleError } = await supabase.rpc('update_user_presence');
    
    if (simpleError) {
      console.log(`‚ùå Simple update_user_presence failed: ${simpleError.message}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É
      console.log('üîÑ Trying direct insert approach...');
      
      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        console.log('‚ùå No authenticated user found');
        return;
      }
      
      const { error: insertError } = await supabase
        .from('user_activity')
        .upsert({
          user_id: user.id,
          last_seen: new Date().toISOString(),
          status: 'online',
          location: '–¢–∞–≤—Ä–æ—Å',
          last_activity: new Date().toISOString()
        });
        
      if (insertError) {
        console.log(`‚ùå Direct insert failed: ${insertError.message}`);
      } else {
        console.log('‚úÖ Direct insert successful');
      }
    } else {
      console.log('‚úÖ Simple update_user_presence working');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüß™ Testing get_online_players after update...');
    
    const { data: players, error: playersError } = await supabase.rpc('get_online_players');
    
    if (playersError) {
      console.log(`‚ùå get_online_players failed: ${playersError.message}`);
    } else {
      console.log(`‚úÖ Found ${players?.length || 0} online players`);
      if (players && players.length > 0) {
        players.forEach(player => {
          console.log(`   - ${player.username} (${player.status}) in ${player.location}`);
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Function creation failed:', error);
  }
}

createUpdateFunction();
