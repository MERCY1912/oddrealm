const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './env.local' });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testMistralAI() {
  console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º Mistral AI –¥–ª—è –±–æ—Ç–æ–≤...\n');

  try {
    const apiKey = process.env.VITE_MISTRAL_API_KEY;
    
    if (!apiKey) {
      console.error('‚ùå Mistral API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local');
      console.log('–î–æ–±–∞–≤—å—Ç–µ: VITE_MISTRAL_API_KEY=–≤–∞—à_–∫–ª—é—á');
      return;
    }

    console.log(`‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: ${apiKey.substring(0, 20)}...`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API –Ω–∞–ø—Ä—è–º—É—é
    const testResponse = await fetch('https://api.mistral.ai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: 'mistral-medium-latest',
        messages: [
          {
            role: 'system',
            content: '–¢—ã –∏–≥—Ä–æ–∫ –≤ –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
          },
          {
            role: 'user',
            content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'
          }
        ],
        max_tokens: 100,
        temperature: 0.8,
      }),
    });

    if (!testResponse.ok) {
      const errorText = await testResponse.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${testResponse.status} - ${errorText}`);
      return;
    }

    const data = await testResponse.json();
    const response = data.choices[0]?.message?.content?.trim();
    
    if (response) {
      console.log(`‚úÖ Mistral AI —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
      console.log(`üìù –û—Ç–≤–µ—Ç: "${response}"`);
    } else {
      console.error('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Mistral AI');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const { data: bots, error } = await supabase
      .from('bot_characters')
      .select('*')
      .eq('is_active', true);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–≤:', error);
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${bots.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:`);
    bots.forEach((bot, index) => {
      console.log(`   ${index + 1}. ${bot.name} (@${bot.username}) - ${bot.personality}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

testMistralAI();
