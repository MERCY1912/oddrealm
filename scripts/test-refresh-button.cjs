const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testRefreshButton() {
  try {
    console.log('üß™ Testing refresh button functionality...\n');

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_online_players
    console.log('1Ô∏è‚É£ Testing get_online_players function...');
    const startTime = Date.now();
    
    const { data: players, error: playersError } = await supabase.rpc('get_online_players');
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (playersError) {
      console.log(`‚ùå get_online_players failed: ${playersError.message}`);
      return;
    } else {
      console.log(`‚úÖ get_online_players successful in ${duration}ms`);
      console.log(`   Found ${players?.length || 0} players`);
      
      if (players && players.length > 0) {
        players.slice(0, 3).forEach((player, index) => {
          console.log(`   ${index + 1}. ${player.username} (${player.status})`);
        });
        if (players.length > 3) {
          console.log(`   ... and ${players.length - 3} more`);
        }
      }
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_online_stats
    console.log('\n2Ô∏è‚É£ Testing get_online_stats function...');
    const statsStartTime = Date.now();
    
    const { data: stats, error: statsError } = await supabase.rpc('get_online_stats');
    
    const statsEndTime = Date.now();
    const statsDuration = statsEndTime - statsStartTime;
    
    if (statsError) {
      console.log(`‚ùå get_online_stats failed: ${statsError.message}`);
    } else {
      console.log(`‚úÖ get_online_stats successful in ${statsDuration}ms`);
      const stat = stats[0];
      console.log(`   Total: ${stat.total_online}, Online: ${stat.online_count}, AFK: ${stat.afk_count}`);
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n3Ô∏è‚É£ Performance check...');
    if (duration > 5000) {
      console.log(`‚ö†Ô∏è  Slow response: ${duration}ms (should be < 5000ms)`);
    } else {
      console.log(`‚úÖ Good response time: ${duration}ms`);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥ (–∫–∞–∫ –ø—Ä–∏ —á–∞—Å—Ç–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
    console.log('\n4Ô∏è‚É£ Testing multiple rapid requests...');
    const rapidRequests = [];
    
    for (let i = 0; i < 3; i++) {
      rapidRequests.push(
        supabase.rpc('get_online_players').then(({ data, error }) => ({
          success: !error,
          duration: Date.now(),
          error: error?.message
        }))
      );
    }
    
    const rapidResults = await Promise.all(rapidRequests);
    const successful = rapidResults.filter(r => r.success).length;
    
    console.log(`‚úÖ Rapid requests: ${successful}/3 successful`);
    
    if (successful < 3) {
      console.log('‚ùå Some rapid requests failed - this might cause infinite loading');
    } else {
      console.log('‚úÖ All rapid requests successful - refresh button should work');
    }

    console.log('\nüéâ Refresh button test completed!');
    
    if (duration < 5000 && successful === 3) {
      console.log('‚úÖ Refresh button should work properly');
    } else {
      console.log('‚ö†Ô∏è  There might be issues with the refresh button');
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testRefreshButton();
