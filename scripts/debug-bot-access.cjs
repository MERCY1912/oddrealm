const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './env.local' });

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function debugBotAccess() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç–∞–º...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    console.log(`   URL: ${supabaseUrl}`);
    console.log(`   Key: ${supabaseKey.substring(0, 20)}...`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
    } else if (user) {
      console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.id}`);
    } else {
      console.log('   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω (–∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø)');
    }

    // 3. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ is_active)
    console.log('\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)...');
    const { data: allBots, error: allBotsError } = await supabase
      .from('bot_characters')
      .select('*');

    if (allBotsError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤:', allBotsError);
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤: ${allBots?.length || 0}`);
      if (allBots && allBots.length > 0) {
        allBots.forEach((bot, index) => {
          console.log(`      ${index + 1}. ${bot.name} (@${bot.username}) - active: ${bot.is_active}`);
        });
      }
    }

    // 4. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
    console.log('\n4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤...');
    const { data: activeBots, error: activeBotsError } = await supabase
      .from('bot_characters')
      .select('*')
      .eq('is_active', true);

    if (activeBotsError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤:', activeBotsError);
    } else {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: ${activeBots?.length || 0}`);
      if (activeBots && activeBots.length > 0) {
        activeBots.forEach((bot, index) => {
          console.log(`      ${index + 1}. ${bot.name} (@${bot.username})`);
        });
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS —Å—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º RLS —Å—Ç–∞—Ç—É—Å —Ç–∞–±–ª–∏—Ü—ã bot_characters...');
    const { data: rlsStatus, error: rlsError } = await supabase
      .rpc('get_table_rls_status', { table_name: 'bot_characters' })
      .catch(() => {
        console.log('   ‚ö†Ô∏è RPC —Ñ—É–Ω–∫—Ü–∏—è get_table_rls_status –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
        return { data: null, error: null };
      });

    // 6. –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π SELECT –∑–∞–ø—Ä–æ—Å
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π SELECT –∑–∞–ø—Ä–æ—Å...');
    const { data: simpleSelect, error: simpleError } = await supabase
      .from('bot_characters')
      .select('id, name, username')
      .limit(1);

    if (simpleError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ SELECT:', simpleError);
    } else {
      console.log(`   ‚úÖ –ü—Ä–æ—Å—Ç–æ–π SELECT —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${simpleSelect?.length || 0}`);
    }

    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É bot_presence
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É bot_presence...');
    const { data: presenceData, error: presenceError } = await supabase
      .from('bot_presence')
      .select('*')
      .limit(5);

    if (presenceError) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è bot_presence:', presenceError);
    } else {
      console.log(`   ‚úÖ bot_presence –¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${presenceData?.length || 0}`);
    }

    console.log('\nüéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

debugBotAccess();
