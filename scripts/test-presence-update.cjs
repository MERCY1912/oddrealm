const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: './env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testPresenceUpdate() {
  try {
    console.log('üß™ Testing presence update functionality...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ user_activity
    console.log('1Ô∏è‚É£ Checking current user_activity...');
    const { data: beforeData, error: beforeError } = await supabase
      .from('user_activity')
      .select('*')
      .order('last_seen', { ascending: false })
      .limit(3);

    if (beforeError) {
      console.log(`‚ùå Error querying user_activity: ${beforeError.message}`);
      return;
    }

    console.log(`‚úÖ Found ${beforeData?.length || 0} recent activities`);
    if (beforeData && beforeData.length > 0) {
      beforeData.forEach((activity, index) => {
        console.log(`   ${index + 1}. User: ${activity.user_id}`);
        console.log(`      Status: ${activity.status || 'N/A'}`);
        console.log(`      Location: ${activity.location || 'N/A'}`);
        console.log(`      Last seen: ${new Date(activity.last_seen).toLocaleString()}`);
      });
    }

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º upsert —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º onConflict
    console.log('\n2Ô∏è‚É£ Testing upsert with onConflict...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π UUID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testUserId = '00000000-0000-0000-0000-000000000000';
    
    const { data: upsertData, error: upsertError } = await supabase
      .from('user_activity')
      .upsert({
        user_id: testUserId,
        last_seen: new Date().toISOString(),
        status: 'online',
        location: 'Test Location',
        last_activity: new Date().toISOString()
      }, {
        onConflict: 'user_id'
      })
      .select();

    if (upsertError) {
      console.log(`‚ùå Upsert failed: ${upsertError.message}`);
      console.log(`   Code: ${upsertError.code}`);
      console.log(`   Details: ${upsertError.details}`);
    } else {
      console.log(`‚úÖ Upsert successful`);
      if (upsertData && upsertData.length > 0) {
        console.log(`   Created/Updated: ${upsertData[0].user_id}`);
        console.log(`   Status: ${upsertData[0].status}`);
        console.log(`   Location: ${upsertData[0].location}`);
      }
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π upsert (–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å, –∞ –Ω–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å)
    console.log('\n3Ô∏è‚É£ Testing repeated upsert (should update, not create new)...');
    
    const { data: upsertData2, error: upsertError2 } = await supabase
      .from('user_activity')
      .upsert({
        user_id: testUserId,
        last_seen: new Date().toISOString(),
        status: 'in_battle',
        location: 'Arena',
        last_activity: new Date().toISOString()
      }, {
        onConflict: 'user_id'
      })
      .select();

    if (upsertError2) {
      console.log(`‚ùå Second upsert failed: ${upsertError2.message}`);
    } else {
      console.log(`‚úÖ Second upsert successful (should have updated existing record)`);
      if (upsertData2 && upsertData2.length > 0) {
        console.log(`   Updated: ${upsertData2[0].user_id}`);
        console.log(`   New Status: ${upsertData2[0].status}`);
        console.log(`   New Location: ${upsertData2[0].location}`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–µ–π –Ω–µ —Å—Ç–∞–ª–æ –±–æ–ª—å—à–µ
    console.log('\n4Ô∏è‚É£ Verifying no duplicate records...');
    const { data: afterData, error: afterError } = await supabase
      .from('user_activity')
      .select('*')
      .eq('user_id', testUserId);

    if (afterError) {
      console.log(`‚ùå Error querying test user: ${afterError.message}`);
    } else {
      console.log(`‚úÖ Test user has ${afterData?.length || 0} records (should be 1)`);
      if (afterData && afterData.length > 1) {
        console.log(`‚ùå Found duplicate records! This indicates the upsert is not working correctly.`);
      } else {
        console.log(`‚úÖ No duplicates found - upsert is working correctly`);
      }
    }

    // 5. –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\n5Ô∏è‚É£ Cleaning up test data...');
    const { error: deleteError } = await supabase
      .from('user_activity')
      .delete()
      .eq('user_id', testUserId);

    if (deleteError) {
      console.log(`‚ö†Ô∏è  Could not clean up test data: ${deleteError.message}`);
    } else {
      console.log(`‚úÖ Test data cleaned up`);
    }

    console.log('\nüéâ Presence update test completed!');

  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testPresenceUpdate();
