import React, { useState, useMemo } from 'react';
import { Player, Item, Equipment, ItemType } from '@/types/game';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { getEquipmentIcon } from './EquipmentIcons';
import { useToast } from '@/hooks/use-toast';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { enhancedShopItems } from '@/data/enhancedShopItems';

interface EnhancedInventoryPanelProps {
  player: Player;
  equipment: Equipment;
  inventory: Item[];
  onEquipmentUpdate: (equipment: Equipment) => void;
  onPlayerUpdate: (player: Player) => void;
  onRemoveFromInventory: (itemId: string) => void;
  onAddToInventory: (item: Item) => void;
}

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
const inventoryCategories = [
  { id: 'equipment', name: '–û–±–º—É–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ', icon: '‚öîÔ∏è' },
  { id: 'spells', name: '–ó–∞–∫–ª—è—Ç–∏—è', icon: 'üîÆ' },
  { id: 'elixirs', name: '–≠–ª–∏–∫—Å–∏—Ä—ã', icon: 'üß™' },
  { id: 'charms', name: '–ß–∞—Ä–∫–∏', icon: '‚ú®' },
  { id: 'runes', name: '–†—É–Ω—ã', icon: 'üîØ' },
  { id: 'food', name: '–ï–¥–∞', icon: 'üçñ' },
  { id: 'other', name: '–ü—Ä–æ—á–µ–µ', icon: 'üì¶' },
];

const EnhancedInventoryPanel = ({ 
  player, 
  equipment, 
  inventory, 
  onEquipmentUpdate, 
  onPlayerUpdate, 
  onRemoveFromInventory,
  onAddToInventory
}: EnhancedInventoryPanelProps) => {
  const { toast } = useToast();
  const [activeCategory, setActiveCategory] = useState('equipment');
  const [searchQuery, setSearchQuery] = useState('');

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const getItemsByCategory = (category: string) => {
    let filteredItems = inventory;
    
    switch (category) {
      case 'equipment':
        filteredItems = inventory.filter(item => 
          ['weapon', 'armor', 'helmet', 'boots', 'gloves', 'belt', 'necklace', 'ring', 'shield', 'leggings', 'bracers', 'earring'].includes(item.type)
        );
        break;
      case 'spells':
        filteredItems = inventory.filter(item => item.type === 'spell');
        break;
      case 'elixirs':
        filteredItems = inventory.filter(item => item.type === 'elixir');
        break;
      case 'charms':
        filteredItems = inventory.filter(item => item.type === 'charm');
        break;
      case 'runes':
        filteredItems = inventory.filter(item => item.type === 'rune');
        break;
      case 'food':
        filteredItems = inventory.filter(item => item.type === 'food');
        break;
      case 'other':
        filteredItems = inventory.filter(item => 
          ['quest', 'consumable', 'material', 'misc'].includes(item.type)
        );
        break;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
    if (searchQuery) {
      filteredItems = filteredItems.filter(item => 
        item.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    return filteredItems;
  };

  const currentItems = useMemo(() => getItemsByCategory(activeCategory), [inventory, activeCategory, searchQuery]);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –≤–µ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  const totalWeight = useMemo(() => {
    return inventory.reduce((total, item) => {
      const weight = item.weight || 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–µ—Å 1
      return total + (weight * (item.quantity || 1));
    }, 0);
  }, [inventory]);

  const maxWeight = 568; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ

  const handleEquip = (itemToEquip: Item) => {
    let newEquipment = { ...equipment };
    let targetSlot: keyof Equipment | null = null;

    if (itemToEquip.type === 'ring') {
      const ringSlots: (keyof Equipment)[] = ['ring1', 'ring2', 'ring3'];
      const emptySlot = ringSlots.find(slot => !newEquipment[slot]);
      targetSlot = emptySlot || 'ring1'; 
    } else {
      targetSlot = itemToEquip.type as keyof Equipment;
    }

    if (!targetSlot) {
      toast({ title: "–û—à–∏–±–∫–∞", description: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞", variant: "destructive" });
      return;
    }
    
    const oldItem = newEquipment[targetSlot];

    if (oldItem) {
      onAddToInventory(oldItem);
      toast({
        title: '–ü—Ä–µ–¥–º–µ—Ç –∑–∞–º–µ–Ω–µ–Ω',
        description: `${oldItem.name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.`,
      });
    }

    newEquipment[targetSlot] = itemToEquip;
    onEquipmentUpdate(newEquipment);
    onRemoveFromInventory(itemToEquip.id);
    
    toast({
      title: '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –Ω–∞–¥–µ—Ç–∞!',
      description: `${itemToEquip.name} —Ç–µ–ø–µ—Ä—å —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω`,
    });
  };

  const addTestItems = () => {
    const allItems = Object.values(enhancedShopItems).flat();
    const randomItems = allItems.slice(0, 12); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    randomItems.forEach(item => {
      onAddToInventory({
        ...item,
        id: `${item.id}_test_${Date.now()}_${Math.random()}`,
        weight: item.weight || Math.floor(Math.random() * 5) + 0.1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π
        quantity: 1,
        durability: item.durability || { current: Math.floor(Math.random() * 50) + 1, max: 50 },
        effects: item.effects || {}
      } as any);
    });
    
    toast({
      title: '–¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!',
      description: '–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–æ 12 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
    });
  };

  const getItemTooltip = (item: Item) => (
    <div className="p-3 max-w-xs">
      <div className="font-bold text-yellow-300 mb-2">{item.name}</div>
      <div className="text-sm text-gray-300 mb-2">{item.description}</div>
      
      <div className="space-y-1">
        <div className="text-xs font-semibold text-gray-400">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</div>
        {item.stats.attack && <div className="text-red-400 text-xs">‚öîÔ∏è –ê—Ç–∞–∫–∞: +{item.stats.attack}</div>}
        {item.stats.defense && <div className="text-blue-400 text-xs">üõ°Ô∏è –ó–∞—â–∏—Ç–∞: +{item.stats.defense}</div>}
        {item.stats.health && <div className="text-green-400 text-xs">‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: +{item.stats.health}</div>}
        {item.stats.mana && <div className="text-purple-400 text-xs">üîÆ –ú–∞–Ω–∞: +{item.stats.mana}</div>}
      </div>
    </div>
  );

  const getItemDetails = (item: Item) => {
    const weight = item.weight || 1;
    const durability = item.durability || { current: 50, max: 50 };
    const effects = item.effects || {};

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –∏ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
    const requirements: { [key: string]: any } = {};
    if (item.levelReq) requirements['–£—Ä–æ–≤–µ–Ω—å'] = item.levelReq;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    if (['weapon', 'armor', 'helmet', 'boots', 'gloves', 'belt', 'necklace', 'ring', 'shield', 'leggings', 'bracers', 'earring'].includes(item.type)) {
      if (item.stats.strength) requirements['–°–∏–ª–∞'] = item.stats.strength;
      if (item.stats.dexterity) requirements['–õ–æ–≤–∫–æ—Å—Ç—å'] = item.stats.dexterity;
      if (item.stats.endurance) requirements['–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å'] = item.stats.endurance;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –¥–ª—è –æ—Ä—É–∂–∏—è
      if (item.type === 'weapon' && item.weaponType) {
        const masteryMap: { [key: string]: string } = {
          'sword': '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è –º–µ—á–∞–º–∏',
          'axe': '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è —Ç–æ–ø–æ—Ä–∞–º–∏, —Å–µ–∫–∏—Ä–∞–º–∏',
          'bow': '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è –ª—É–∫–∞–º–∏',
          'staff': '–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –≤–ª–∞–¥–µ–Ω–∏—è –ø–æ—Å–æ—Ö–∞–º–∏'
        };
        if (masteryMap[item.weaponType]) {
          requirements[masteryMap[item.weaponType]] = Math.max(1, Math.floor((item.levelReq || 1) / 2));
        }
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–∞
    const itemEffects: { [key: string]: any } = {};
    if (item.stats.attack) itemEffects['–ê—Ç–∞–∫–∞'] = item.stats.attack;
    if (item.stats.defense) itemEffects['–ó–∞—â–∏—Ç–∞'] = item.stats.defense;
    if (item.stats.health) itemEffects['–£—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏ (–ù–†)'] = item.stats.health;
    if (item.stats.mana) itemEffects['–ú–∞–Ω–∞'] = item.stats.mana;
    if (item.stats.strength) itemEffects['–°–∏–ª–∞'] = item.stats.strength;
    if (item.stats.dexterity) itemEffects['–õ–æ–≤–∫–æ—Å—Ç—å'] = item.stats.dexterity;
    if (item.stats.luck) itemEffects['–£–¥–∞—á–∞'] = item.stats.luck;
    if (item.stats.criticalChance) itemEffects['–ú—Ñ. –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ (%)'] = item.stats.criticalChance;
    if (item.stats.antiCriticalChance) itemEffects['–ú—Ñ. –ø—Ä–æ—Ç–∏–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞ (%)'] = item.stats.antiCriticalChance;
    if (item.stats.dodgeChance) itemEffects['–ú—Ñ. —É–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (%)'] = item.stats.dodgeChance;
    if (item.stats.antiDodgeChance) itemEffects['–ú—Ñ. –ø—Ä–æ—Ç–∏–≤ —É–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (%)'] = item.stats.antiDodgeChance;
    if (item.stats.blockChance) itemEffects['–ú—Ñ. –∫–æ–Ω—Ç—Ä—É–¥–∞—Ä–∞ (%)'] = item.stats.blockChance;

    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞
    Object.assign(itemEffects, effects);

    return (
      <div className="bg-gray-700 rounded p-3 mb-2">
        <div className="flex items-start gap-3">
          {/* –ò–∫–æ–Ω–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
          <div className="w-12 h-12 inventory-empty-slot flex items-center justify-center flex-shrink-0">
            {item.image_url ? (
              <img src={item.image_url} alt={item.name} className="w-full h-full object-contain rounded" />
            ) : (
              <span className="text-lg">{getEquipmentIcon(item.name, item.type)}</span>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ */}
          <div className="flex-1 min-w-0">
            <div className="text-blue-400 font-bold text-sm mb-1">{item.name}</div>
            <div className="text-gray-400 text-xs mb-1">
              (–ú–∞—Å—Å–∞: {weight}, id: {item.id})
            </div>
            <div className="text-gray-400 text-xs mb-1">–¶–µ–Ω–∞: {item.price} –∫—Ä.</div>
            <div className="text-gray-400 text-xs mb-2">–î–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å: {durability.current}/{durability.max}</div>

            {/* –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è */}
            {Object.keys(requirements).length > 0 && (
              <div className="mb-2">
                <div className="text-gray-400 text-xs font-semibold mb-1">–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ:</div>
                <div className="space-y-1">
                  {Object.entries(requirements).map(([key, value]) => (
                    <div key={key} className="text-xs">
                      <span className="text-gray-400">‚Ä¢ </span>
                      <span className={key.includes('–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ') ? 'text-red-400' : 'text-white'}>
                        {key}: {value}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* –≠—Ñ—Ñ–µ–∫—Ç—ã */}
            {Object.keys(itemEffects).length > 0 && (
              <div className="mb-2">
                <div className="text-gray-400 text-xs font-semibold mb-1">–î–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞:</div>
                <div className="space-y-1">
                  {Object.entries(itemEffects).map(([key, value]) => (
                    <div key={key} className="text-xs">
                      <span className="text-gray-400">‚Ä¢ </span>
                      <span className="text-green-400">{key}: +{value}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* –°–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ */}
            <div className="mb-2">
              <div className="text-gray-400 text-xs font-semibold mb-1">–°–≤–æ–π—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞:</div>
              <div className="space-y-1">
                {item.stats.attack && (
                  <div className="text-xs text-gray-400">‚Ä¢ –£—Ä–æ–Ω: {item.stats.attack}</div>
                )}
                {item.stats.defense && (
                  <div className="text-xs text-gray-400">‚Ä¢ –ó–∞—â–∏—Ç–∞: {item.stats.defense}</div>
                )}
                {item.stats.blockChance && (
                  <div className="text-xs text-gray-400">‚Ä¢ –ó–æ–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è: +</div>
                )}
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex flex-col gap-1">
            <Button
              onClick={() => onRemoveFromInventory(item.id)}
              size="sm"
              variant="destructive"
              className="w-6 h-6 p-0 text-xs"
            >
              ‚úï
            </Button>
            {['weapon', 'armor', 'helmet', 'boots', 'gloves', 'belt', 'necklace', 'ring', 'shield', 'leggings', 'bracers', 'earring'].includes(item.type) && (
              <Button
                onClick={() => handleEquip(item)}
                size="sm"
                variant="outline"
                className="w-6 h-6 p-0 text-xs"
              >
                üë§
              </Button>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <TooltipProvider>
      <div className="panel h-full flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ */}
        <div className="bg-gray-700 px-3 py-2 border-b border-gray-500 flex-shrink-0">
          <h3 className="text-white font-bold text-sm text-center mb-2">–ò–ù–í–ï–ù–¢–ê–†–¨</h3>
          <div className="flex gap-1">
            {inventoryCategories.map((category) => (
              <Button
                key={category.id}
                onClick={() => setActiveCategory(category.id)}
                variant={activeCategory === category.id ? "default" : "ghost"}
                size="sm"
                className={`text-xs px-2 py-1 h-6 ${
                  activeCategory === category.id 
                    ? 'bg-gray-600 text-white' 
                    : 'text-gray-400 hover:text-white hover:bg-gray-600'
                }`}
              >
                {category.name}
              </Button>
            ))}
          </div>
        </div>

        <div className="flex-1 flex overflow-hidden">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –ü—Ä–µ–¥–º–µ—Ç—ã */}
          <div className="w-full p-3 flex flex-col">
            {/* –ü–æ–∏—Å–∫ */}
            <div className="mb-3">
              <div className="flex gap-2">
                <Input
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞..."
                  className="bg-gray-700 border-gray-600 text-white text-sm flex-1"
                />
                <Button
                  onClick={() => setSearchQuery('')}
                  variant="destructive"
                  size="sm"
                  className="px-2"
                >
                  ‚úï
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="bg-gray-700 border-gray-600 text-white"
                >
                  –ò—Å–∫–∞—Ç—å
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  className="bg-gray-700 border-gray-600 text-white"
                >
                  –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                </Button>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */}
            <div className="flex-1 overflow-y-auto game-scrollbar">
              {currentItems.length === 0 ? (
                <div className="text-center text-gray-500 text-sm p-8">
                  {searchQuery ? '–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' : '–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
                </div>
              ) : (
                <div className="space-y-2 py-0.5">
                  {currentItems.map((item) => getItemDetails(item))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </TooltipProvider>
  );
};

export default EnhancedInventoryPanel;
