import React from 'react';
import { Item, ItemRarity } from '@/types/game';
import { MedievalTooltip } from '@/components/ui/medieval-tooltip';
import { cn } from '@/lib/utils';

interface EnhancedItemTooltipProps {
  item: Item;
  children: React.ReactNode;
  side?: "top" | "right" | "bottom" | "left";
  className?: string;
}

const EnhancedItemTooltip = ({ item, children, side = "right", className }: EnhancedItemTooltipProps) => {
  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ item.stats
  const stats = item.stats || {};
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
  const getRarityColor = (rarity: ItemRarity) => {
    switch (rarity) {
      case 'common':
        return 'text-gray-300';
      case 'rare':
        return 'text-blue-400';
      case 'epic':
        return 'text-purple-400';
      case 'legendary':
        return 'text-amber-400';
      default:
        return 'text-gray-300';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Ä–∞–º–∫–∏ —Ä–µ–¥–∫–æ—Å—Ç–∏
  const getRarityBorderColor = (rarity: ItemRarity) => {
    switch (rarity) {
      case 'common':
        return 'border-gray-500/60';
      case 'rare':
        return 'border-blue-500/60';
      case 'epic':
        return 'border-purple-500/60';
      case 'legendary':
        return 'border-amber-500/60';
      default:
        return 'border-gray-500/60';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'weapon':
        return '‚öîÔ∏è';
      case 'armor':
        return 'üõ°Ô∏è';
      case 'helmet':
        return '‚õëÔ∏è';
      case 'gloves':
        return 'üß§';
      case 'boots':
        return 'üë¢';
      case 'belt':
        return 'üîó';
      case 'ring':
        return 'üíç';
      case 'necklace':
        return 'üìø';
      case 'earring':
        return 'üìø';
      case 'shield':
        return 'üõ°Ô∏è';
      case 'leggings':
        return 'üëñ';
      case 'bracers':
        return 'ü¶æ';
      default:
        return 'üì¶';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
  const formatStat = (value: number, suffix: string = '') => {
    if (value && value > 0) {
      const numValue = Number(value);
      let formattedValue = numValue;
      
      // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 1000, –¥–µ–ª–∏–º –Ω–∞ 1000
      if (numValue >= 1000) {
        formattedValue = Math.floor(numValue / 1000);
      }
      
      // –£–±–∏—Ä–∞–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      formattedValue = Math.floor(formattedValue);
      
      return `+${formattedValue}${suffix}`;
    }
    return null;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const getRarityName = (rarity: ItemRarity) => {
    switch (rarity) {
      case 'common':
        return '–û–±—ã—á–Ω—ã–π';
      case 'rare':
        return '–†–µ–¥–∫–∏–π';
      case 'epic':
        return '–≠–ø–∏—á–µ—Å–∫–∏–π';
      case 'legendary':
        return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  const getTypeName = (type: string) => {
    switch (type) {
      case 'weapon':
        return '–û—Ä—É–∂–∏–µ';
      case 'armor':
        return '–î–æ—Å–ø–µ—Ö';
      case 'helmet':
        return '–®–ª–µ–º';
      case 'gloves':
        return '–ü–µ—Ä—á–∞—Ç–∫–∏';
      case 'boots':
        return '–ë–æ—Ç–∏–Ω–∫–∏';
      case 'belt':
        return '–ü–æ—è—Å';
      case 'ring':
        return '–ö–æ–ª—å—Ü–æ';
      case 'necklace':
        return '–û–∂–µ—Ä–µ–ª—å–µ';
      case 'earring':
        return '–°–µ—Ä—å–≥–∞';
      case 'shield':
        return '–©–∏—Ç';
      case 'leggings':
        return '–ü–æ–Ω–æ–∂–∏';
      case 'bracers':
        return '–ù–∞—Ä—É—á–∏';
      default:
        return '–ü—Ä–µ–¥–º–µ—Ç';
    }
  };

  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getStatEntries = () => {
    const entries = [];
    
    // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if (stats.attack && stats.attack > 0) {
      entries.push({ name: '–ê—Ç–∞–∫–∞', value: formatStat(stats.attack), color: 'text-red-400', icon: '‚öîÔ∏è' });
    }
    if (stats.defense && stats.defense > 0) {
      entries.push({ name: '–ó–∞—â–∏—Ç–∞', value: formatStat(stats.defense), color: 'text-blue-400', icon: 'üõ°Ô∏è' });
    }
    if (stats.health && stats.health > 0) {
      entries.push({ name: '–ó–¥–æ—Ä–æ–≤—å–µ', value: formatStat(stats.health), color: 'text-green-400', icon: '‚ù§Ô∏è' });
    }
    if (stats.mana && stats.mana > 0) {
      entries.push({ name: '–ú–∞–Ω–∞', value: formatStat(stats.mana), color: 'text-purple-400', icon: 'üîÆ' });
    }
    
    // –ê—Ç—Ä–∏–±—É—Ç—ã
    if (stats.strength && stats.strength > 0) {
      entries.push({ name: '–°–∏–ª–∞', value: formatStat(stats.strength), color: 'text-orange-400', icon: 'üí™' });
    }
    if (stats.dexterity && stats.dexterity > 0) {
      entries.push({ name: '–õ–æ–≤–∫–æ—Å—Ç—å', value: formatStat(stats.dexterity), color: 'text-teal-400', icon: 'ü§∏' });
    }
    if (stats.luck && stats.luck > 0) {
      entries.push({ name: '–£–¥–∞—á–∞', value: formatStat(stats.luck), color: 'text-yellow-400', icon: 'üçÄ' });
    }
    if (stats.endurance && stats.endurance > 0) {
      entries.push({ name: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', value: formatStat(stats.endurance), color: 'text-lime-400', icon: 'üèÉ' });
    }
    if (stats.magic && stats.magic > 0) {
      entries.push({ name: '–ú–∞–≥–∏—è', value: formatStat(stats.magic), color: 'text-indigo-400', icon: 'üßô' });
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    if (stats.criticalChance && stats.criticalChance > 0) {
      entries.push({ name: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä', value: formatStat(stats.criticalChance, '%'), color: 'text-yellow-400', icon: 'üí•' });
    }
    if (stats.dodgeChance && stats.dodgeChance > 0) {
      entries.push({ name: '–£–≤–æ—Ä–æ—Ç', value: formatStat(stats.dodgeChance, '%'), color: 'text-green-400', icon: 'üçÉ' });
    }
    if (stats.vampirism && stats.vampirism > 0) {
      entries.push({ name: '–í–∞–º–ø–∏—Ä–∏–∑–º', value: formatStat(stats.vampirism, '%'), color: 'text-red-500', icon: 'üßõ' });
    }
    if (stats.blockChance && stats.blockChance > 0) {
      entries.push({ name: '–ë–ª–æ–∫', value: formatStat(stats.blockChance, '%'), color: 'text-gray-400', icon: '‚úã' });
    }
    if (stats.antiCriticalChance && stats.antiCriticalChance > 0) {
      entries.push({ name: '–ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∞', value: formatStat(stats.antiCriticalChance, '%'), color: 'text-blue-500', icon: 'üõ°Ô∏è' });
    }
    if (stats.antiDodgeChance && stats.antiDodgeChance > 0) {
      entries.push({ name: '–¢–æ—á–Ω–æ—Å—Ç—å', value: formatStat(stats.antiDodgeChance, '%'), color: 'text-orange-500', icon: 'üéØ' });
    }
    
    // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    if (stats.fireResistance && stats.fireResistance > 0) {
      entries.push({ name: '–û–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å', value: formatStat(stats.fireResistance, '%'), color: 'text-red-600', icon: 'üî•' });
    }
    if (stats.coldResistance && stats.coldResistance > 0) {
      entries.push({ name: '–ú–æ—Ä–æ–∑–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å', value: formatStat(stats.coldResistance, '%'), color: 'text-blue-600', icon: '‚ùÑÔ∏è' });
    }
    if (stats.darkResistance && stats.darkResistance > 0) {
      entries.push({ name: '–¢–µ–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å', value: formatStat(stats.darkResistance, '%'), color: 'text-purple-600', icon: 'üåë' });
    }
    if (stats.crushResistance && stats.crushResistance > 0) {
      entries.push({ name: '–£–¥–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç—å', value: formatStat(stats.crushResistance, '%'), color: 'text-gray-600', icon: 'üí•' });
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if (stats.stealth && stats.stealth > 0) {
      entries.push({ name: '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å', value: formatStat(stats.stealth), color: 'text-gray-500', icon: 'üë§' });
    }
    if (stats.intuition && stats.intuition > 0) {
      entries.push({ name: '–ò–Ω—Ç—É–∏—Ü–∏—è', value: formatStat(stats.intuition), color: 'text-pink-400', icon: 'üîÆ' });
    }
    
    return entries;
  };

  const statEntries = getStatEntries();

  const tooltipContent = (
    <div className="p-4 max-w-sm min-w-[250px]">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ä–µ–¥–∫–æ—Å—Ç—å—é */}
      <div className="mb-3">
        <div className="flex items-center gap-2 mb-1">
          <span className="text-lg">{getTypeIcon(item.type)}</span>
          <h3 className={cn("font-bold text-base leading-tight", getRarityColor(item.rarity))}>
            {item.name}
          </h3>
        </div>
        <div className="text-sm text-gray-400">
          {getRarityName(item.rarity)} ‚Ä¢ {getTypeName(item.type)}
        </div>
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      {item.description && (
        <div className="text-sm text-gray-300 mb-3 leading-relaxed border-l-2 border-amber-500/30 pl-3">
          {item.description}
        </div>
      )}

      {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
      {statEntries.length > 0 && (
        <div className="space-y-2">
          <div className="text-sm font-semibold text-amber-400 border-b border-amber-500/30 pb-1">
            –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
          </div>
          <div className="grid grid-cols-1 gap-1">
            {statEntries.map((stat, index) => (
              <div key={index} className="flex items-center justify-between text-sm">
                <div className="flex items-center gap-2">
                  <span className="text-base">{stat.icon}</span>
                  <span className={stat.color}>{stat.name}:</span>
                </div>
                <span className="text-white font-semibold">{stat.value}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mt-3 pt-2 border-t border-gray-600/30">
        <div className="flex justify-between text-sm text-gray-400">
          {item.price > 0 && (
            <span>üí∞ –¶–µ–Ω–∞: {item.price.toLocaleString()}</span>
          )}
          {item.levelReq && (
            <span>üìä –£—Ä–æ–≤–µ–Ω—å: {item.levelReq}</span>
          )}
        </div>
        {item.weight && (
          <div className="text-sm text-gray-400 mt-1">
            ‚öñÔ∏è –í–µ—Å: {item.weight}
          </div>
        )}
        {item.durability && (
          <div className="text-sm text-gray-400 mt-1">
            üîß –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {item.durability.current}/{item.durability.max}
          </div>
        )}
      </div>
    </div>
  );

  return (
    <MedievalTooltip 
      content={tooltipContent} 
      side={side} 
      className={className}
      contentClassName={cn("border-2", getRarityBorderColor(item.rarity))}
      delayDuration={200}
    >
      {children}
    </MedievalTooltip>
  );
};

export default EnhancedItemTooltip;




