import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Player, Dungeon, Item } from '@/types/game';
import { 
  EnhancedDungeonRun, 
  EnhancedDungeonMap, 
  EnhancedRoom,
  ExpeditionResource,
  ExplorationPoints,
  DungeonGoal,
  DungeonAffix
} from '@/types/game';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { generateEnhancedDungeon } from '@/data/enhancedDungeonGenerator';
import { createExpeditionResource, consumeTorch, applyExhaustionPenalties } from '@/utils/expeditionResources';
import { createExplorationPoints, addExplorationPoints, calculateFinalRewards } from '@/utils/explorationPoints';
import { updateGoalProgress, canEnterBossRoom } from '@/data/dungeonGoals';
import { applyAffixEffects } from '@/data/dungeonAffixes';
import EnhancedDungeonUI, { RoomThreatIndicator } from './EnhancedDungeonUI';
import DungeonBattle from './DungeonBattle';
import DungeonMapComponent from './DungeonMap';
import { useSound } from '@/hooks/useSound';

interface EnhancedDungeonSystemProps {
  player: Player;
  onPlayerUpdate: (player: Player) => void;
  onBack: () => void;
  onAddToInventory?: (item: Item) => void;
}

export default function EnhancedDungeonSystem({ 
  player, 
  onPlayerUpdate, 
  onBack, 
  onAddToInventory 
}: EnhancedDungeonSystemProps) {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [dungeons, setDungeons] = useState<Dungeon[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeRun, setActiveRun] = useState<EnhancedDungeonRun | null>(null);
  const [dungeonMap, setDungeonMap] = useState<EnhancedDungeonMap | null>(null);
  const [currentRoomId, setCurrentRoomId] = useState<string>('');
  const [visitedRooms, setVisitedRooms] = useState<Set<string>>(new Set());
  const [roomState, setRoomState] = useState<'exploring' | 'battle' | 'event' | 'completed'>('exploring');
  const [currentEnemy, setCurrentEnemy] = useState<any>(null);

  const { toast } = useToast();
  const { sounds } = useSound();

  useEffect(() => {
    loadDungeons();
  }, []);

  const loadDungeons = async () => {
    try {
      const { data, error } = await supabase
        .from('dungeons')
        .select('*')
        .eq('is_active', true)
        .order('min_level', { ascending: true });

      if (error) throw error;
      setDungeons(data || []);
    } catch (error) {
      console.error('Error loading dungeons:', error);
      
      // Fallback data
      const fallbackDungeons = [
        {
          id: 'enhanced-catacombs',
          dungeon_id: 'enhanced_catacombs',
          name: 'üî• –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ö–∞—Ç–∞–∫–æ–º–±—ã',
          description: '–ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥–∑–µ–º–µ–ª–∏–π —Å —Ü–µ–ª—è–º–∏, –∞—Ñ—Ñ–∏–∫—Å–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏.',
          min_level: 1,
          max_level: 10,
          difficulty: 'normal',
          rooms_count: 12,
          base_reward_gold: 200,
          base_reward_exp: 100,
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        },
        {
          id: 'enhanced-mines',
          dungeon_id: 'enhanced_mines',
          name: '‚ö° –ì–µ—Ä–æ–∏—á–µ—Å–∫–∏–µ –®–∞—Ö—Ç—ã',
          description: '–ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –º–µ—Ö–∞–Ω–∏–∫–∞–º–∏.',
          min_level: 5,
          max_level: 15,
          difficulty: 'heroic',
          rooms_count: 15,
          base_reward_gold: 400,
          base_reward_exp: 250,
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
      ];
      
      setDungeons(fallbackDungeons);
      
      toast({
        title: '–î–µ–º–æ —Ä–µ–∂–∏–º',
        description: '–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø–æ–¥–∑–µ–º–µ–ª–∏–π',
      });
    } finally {
      setLoading(false);
    }
  };

  const startEnhancedDungeon = async (dungeon: Dungeon) => {
    if (player.level < dungeon.min_level) {
      toast({
        title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å',
        description: `–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${dungeon.min_level}`,
        variant: 'destructive',
      });
      return;
    }

    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
      const enhancedMap = generateEnhancedDungeon({
        roomCount: dungeon.rooms_count,
        difficulty: dungeon.difficulty as any,
        playerLevel: player.level,
        goalType: Math.random() < 0.5 ? 'key_boss' : 'collect_shards', // –°–ª—É—á–∞–π–Ω–∞—è —Ü–µ–ª—å
        affixCount: dungeon.difficulty === 'heroic' ? 3 : 2
      });

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏
      const expeditionResource = createExpeditionResource(player.level, enhancedMap.affixes);
      
      // –°–æ–∑–¥–∞–µ–º –æ—á–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
      const explorationPoints = createExplorationPoints();

      // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–±–µ–≥
      const enhancedRun: EnhancedDungeonRun = {
        id: `enhanced-run-${Date.now()}`,
        player_id: player.id,
        dungeon_id: dungeon.dungeon_id,
        current_room: enhancedMap.startId,
        visited_rooms: [enhancedMap.startId],
        player_health: player.health,
        player_mana: player.mana,
        player_gold: 0,
        player_exp: 0,
        inventory_delta: {},
        started_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        goal: enhancedMap.goal,
        resources: expeditionResource,
        explorationPoints,
        affixes: enhancedMap.affixes,
        status: 'in_progress'
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setDungeonMap(enhancedMap);
      setActiveRun(enhancedRun);
      setCurrentRoomId(enhancedMap.startId);
      setVisitedRooms(new Set([enhancedMap.startId]));
      setRoomState('exploring');

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
      toast({
        title: 'üéØ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –Ω–∞—á–∞—Ç–æ!',
        description: `${enhancedMap.goal.description}`,
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã
      setTimeout(() => {
        const affixNames = enhancedMap.affixes.map(a => `${a.icon} ${a.name}`).join(', ');
        toast({
          title: '‚ú® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ñ—Ñ–∏–∫—Å—ã',
          description: affixNames,
        });
      }, 1000);

    } catch (error) {
      console.error('Error starting enhanced dungeon:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ',
        variant: 'destructive',
      });
    }
  };

  const handleRoomMove = async (roomId: string) => {
    if (!dungeonMap || !activeRun) return;
    
    const targetRoom = dungeonMap.rooms[roomId];
    const currentRoom = dungeonMap.rooms[currentRoomId];
    
    if (!targetRoom || !currentRoom) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–Ω–∞—Ç—ã
    if (!currentRoom.neighbors.includes(roomId)) {
      toast({
        title: '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
        description: '–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã',
        variant: 'destructive',
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É (–≤—Ä–∞—Ç–∞ –∫ –±–æ—Å—Å—É)
    if (targetRoom.locked && !canEnterBossRoom(activeRun.goal, 'gate')) {
      toast({
        title: '–ó–∞–ø–µ—Ä—Ç–æ',
        description: '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ü–µ–ª—å –ø–æ–¥–∑–µ–º–µ–ª—å—è',
        variant: 'destructive',
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—è
    if (roomState === 'battle') {
      toast({
        title: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ',
        description: '–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –±–æ–π!',
        variant: 'destructive',
      });
      return;
    }

    try {
      // –¢—Ä–∞—Ç–∏–º —Ñ–∞–∫–µ–ª –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥
      const newResources = consumeTorch(activeRun.resources);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∏—Å—Ç–æ—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const { modifiedPlayer, penalties } = applyExhaustionPenalties(player, newResources);
      if (penalties.healthReduction > 0) {
        onPlayerUpdate(modifiedPlayer);
        toast({
          title: 'üíÄ –ò—Å—Ç–æ—â–µ–Ω–∏–µ',
          description: `–§–∞–∫–µ–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! -${penalties.healthReduction} HP, –≤—Ä–∞–≥–∏ –Ω–∞–Ω–æ—Å—è—Ç +${penalties.damageIncrease}% —É—Ä–æ–Ω–∞`,
          variant: 'destructive',
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
      const newExplorationPoints = addExplorationPoints(
        activeRun.explorationPoints, 
        targetRoom.type
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–±–µ–≥
      const updatedRun: EnhancedDungeonRun = {
        ...activeRun,
        current_room: roomId,
        visited_rooms: [...activeRun.visited_rooms, roomId],
        resources: newResources,
        explorationPoints: newExplorationPoints
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setActiveRun(updatedRun);
      setCurrentRoomId(roomId);
      setVisitedRooms(prev => new Set([...prev, roomId]));

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
      sounds.roomEnter();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã
      await handleRoomEnter(targetRoom, updatedRun);

    } catch (error) {
      console.error('Error moving to room:', error);
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É',
        variant: 'destructive',
      });
    }
  };

  const handleRoomEnter = async (room: EnhancedRoom, run: EnhancedDungeonRun) => {
    switch (room.type) {
      case 'combat':
      case 'boss':
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞ —Å —É—á–µ—Ç–æ–º –∞—Ñ—Ñ–∏–∫—Å–æ–≤
        const baseEnemy = generateRoomEnemy(room, run.affixes);
        setCurrentEnemy(baseEnemy);
        setRoomState('battle');
        sounds.battleStart();
        break;

      case 'altar':
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å —É—á–µ—Ç–æ–º –∞—Ñ—Ñ–∏–∫—Å–æ–≤
        const healAmount = applyAffixEffects(run.affixes, {
          type: 'altar_heal',
          value: 50
        });
        
        const newHealth = Math.min(player.maxHealth, player.health + healAmount);
        onPlayerUpdate({ ...player, health: newHealth });
        
        sounds.altarHeal();
        toast({
          title: '‚õ™ –ê–ª—Ç–∞—Ä—å',
          description: `–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${healAmount} –∑–¥–æ—Ä–æ–≤—å—è`,
        });
        break;

      case 'trap':
        // –£—Ä–æ–Ω –æ—Ç –ª–æ–≤—É—à–∫–∏ —Å —É—á–µ—Ç–æ–º –∞—Ñ—Ñ–∏–∫—Å–æ–≤
        const trapDamage = applyAffixEffects(run.affixes, {
          type: 'trap_damage',
          value: 20
        });
        
        const avoidChance = player.dexterity / 100;
        if (Math.random() < avoidChance) {
          sounds.trapAvoid();
          toast({
            title: 'ü™§ –õ–æ–≤—É—à–∫–∞ –æ–±–µ–∑–≤—Ä–µ–∂–µ–Ω–∞',
            description: '–í—ã –ª–æ–≤–∫–æ –∏–∑–±–µ–∂–∞–ª–∏ –ª–æ–≤—É—à–∫–∏!',
          });
        } else {
          const newHealth = Math.max(1, player.health - trapDamage);
          onPlayerUpdate({ ...player, health: newHealth });
          sounds.trapTrigger();
          toast({
            title: 'ü™§ –õ–æ–≤—É—à–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞',
            description: `–ü–æ–ª—É—á–µ–Ω–æ ${trapDamage} —É—Ä–æ–Ω–∞`,
            variant: 'destructive',
          });
        }
        break;

      case 'chest':
        // –°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏
        const chestLoot = generateChestLoot(room, run.affixes);
        
        if (chestLoot.gold > 0) {
          const updatedRun = { ...run, player_gold: run.player_gold + chestLoot.gold };
          setActiveRun(updatedRun);
        }
        
        if (chestLoot.items.length > 0 && onAddToInventory) {
          chestLoot.items.forEach(item => onAddToInventory(item));
        }
        
        sounds.chestOpen();
        toast({
          title: 'üí∞ –°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏',
          description: `–ù–∞–π–¥–µ–Ω–æ: ${chestLoot.gold} –∑–æ–ª–æ—Ç–∞, ${chestLoot.items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`,
        });
        break;

      case 'merchant':
        sounds.merchantGreet();
        toast({
          title: 'üè™ –¢–æ—Ä–≥–æ–≤–µ—Ü',
          description: '–¢–æ—Ä–≥–æ–≤–µ—Ü –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã',
        });
        setRoomState('event');
        break;

      default:
        // –û–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        setRoomState('event');
        break;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Ü–µ–ª–∏
    if (room.goal_item) {
      const updatedGoal = updateGoalProgress(run.goal, 1);
      const updatedRun = { ...run, goal: updatedGoal };
      setActiveRun(updatedRun);
      
      toast({
        title: 'üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–∏',
        description: `${updatedGoal.description}: ${updatedGoal.current}/${updatedGoal.required}`,
      });
      
      if (updatedGoal.completed) {
        toast({
          title: '‚úÖ –¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!',
          description: '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–ª',
        });
      }
    }
  };

  const handleBattleEnd = async (victory: boolean, rewards?: any) => {
    if (!activeRun) return;

    if (victory) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
      if (rewards?.gold) {
        const updatedRun = { ...activeRun, player_gold: activeRun.player_gold + rewards.gold };
        setActiveRun(updatedRun);
      }
      if (rewards?.exp) {
        const updatedRun = { ...activeRun, player_exp: activeRun.player_exp + rewards.exp };
        setActiveRun(updatedRun);
      }

      sounds.victory();
      setCurrentEnemy(null);
      setRoomState('exploring');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É –Ω–∞–¥ –±–æ—Å—Å–æ–º
      if (dungeonMap && currentRoomId === dungeonMap.bossId) {
        sounds.dungeonComplete();
        await completeDungeon();
      }
    } else {
      // –°–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
      await handlePlayerDeath();
    }
  };

  const completeDungeon = async () => {
    if (!activeRun || !dungeonMap) return;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    const finalRewards = calculateFinalRewards(
      dungeonMap.level * 100, // –±–∞–∑–æ–≤–æ–µ –∑–æ–ª–æ—Ç–æ
      dungeonMap.level * 50,  // –±–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç
      activeRun.explorationPoints,
      activeRun.resources,
      activeRun.goal.completed
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
    const updatedPlayer = {
      ...player,
      gold: player.gold + finalRewards.finalGold,
      experience: player.experience + finalRewards.finalExp
    };
    onPlayerUpdate(updatedPlayer);

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setActiveRun(null);
    setDungeonMap(null);
    setCurrentRoomId('');
    setVisitedRooms(new Set());
    setRoomState('exploring');

    toast({
      title: 'üèÜ –ü–æ–¥–∑–µ–º–µ–ª—å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!',
      description: `–ü–æ–ª—É—á–µ–Ω–æ: ${finalRewards.finalGold} –∑–æ–ª–æ—Ç–∞, ${finalRewards.finalExp} –æ–ø—ã—Ç–∞ (–±–æ–Ω—É—Å: +${Math.round((finalRewards.explorationMultiplier - 1) * 100)}%)`,
    });
  };

  const abandonDungeon = () => {
    if (!activeRun) return;

    // –ß–∞—Å—Ç–∏—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    const partialGold = Math.floor(activeRun.player_gold * 0.5);
    const partialExp = Math.floor(activeRun.player_exp * 0.3);

    if (partialGold > 0 || partialExp > 0) {
      const updatedPlayer = {
        ...player,
        gold: player.gold + partialGold,
        experience: player.experience + partialExp
      };
      onPlayerUpdate(updatedPlayer);
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setActiveRun(null);
    setDungeonMap(null);
    setCurrentRoomId('');
    setVisitedRooms(new Set());
    setRoomState('exploring');

    toast({
      title: '–ü–æ–¥–∑–µ–º–µ–ª—å–µ –ø–æ–∫–∏–Ω—É—Ç–æ',
      description: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${partialGold} –∑–æ–ª–æ—Ç–∞, ${partialExp} –æ–ø—ã—Ç–∞`,
    });
  };

  const handlePlayerDeath = async () => {
    if (!activeRun) return;

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –Ω–∞–≥—Ä–∞–¥
    setActiveRun(null);
    setDungeonMap(null);
    setCurrentRoomId('');
    setVisitedRooms(new Set());
    setRoomState('exploring');

    toast({
      title: 'üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ!',
      description: '–í—ã –ø–æ–≥–∏–±–ª–∏ –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ –∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã',
      variant: 'destructive',
    });
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

  const generateRoomEnemy = (room: EnhancedRoom, affixes: DungeonAffix[]) => {
    const baseLevel = Math.max(1, player.level + (room.distance_from_start || 0) - 2);
    const baseHp = room.type === 'boss' ? 200 : 80;
    const baseAttack = room.type === 'boss' ? 30 : 15;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã
    const modifiedHp = applyAffixEffects(affixes, {
      type: 'enemy_stats',
      value: baseHp
    });

    return {
      id: `enemy_${room.id}`,
      name: room.type === 'boss' ? '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü–æ–¥–∑–µ–º–µ–ª—å—è' : '–°—Ç—Ä–∞–∂ –ö–æ–º–Ω–∞—Ç—ã',
      level: baseLevel,
      health: modifiedHp,
      maxHealth: modifiedHp,
      attack: baseAttack,
      defense: 10,
      experience: baseLevel * 20,
      gold: baseLevel * 10,
      difficulty: room.threat.level === 3 ? 'hard' : room.threat.level === 2 ? 'medium' : 'easy',
      image: room.type === 'boss' ? 'üëë' : '‚öîÔ∏è'
    };
  };

  const generateChestLoot = (room: EnhancedRoom, affixes: DungeonAffix[]) => {
    const baseGold = 50 + (room.distance_from_start || 0) * 10;
    const baseItemCount = 2;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã
    const modifiedItemCount = applyAffixEffects(affixes, {
      type: 'chest_loot',
      value: baseItemCount
    });

    return {
      gold: baseGold,
      items: [] as Item[] // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –±–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–∫–∞
    };
  };

  if (loading) {
    return (
      <div className="min-h-screen p-6">
        <div className="text-center text-white">
          <h2 className="text-2xl mb-4">–ó–∞–≥—Ä—É–∑–∫–∞ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø–æ–¥–∑–µ–º–µ–ª–∏–π...</h2>
        </div>
      </div>
    );
  }

  // –ê–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ
  if (activeRun && dungeonMap) {
    return (
      <div className="min-h-screen p-4">
        <div className="flex justify-between items-center mb-6">
          <Button 
            onClick={abandonDungeon}
            className="bg-red-600 hover:bg-red-700 text-white"
          >
            üö™ –ü–æ–∫–∏–Ω—É—Ç—å –ø–æ–¥–∑–µ–º–µ–ª—å–µ
          </Button>
          <div className="text-yellow-400 font-bold">
            üí∞ {player.gold} –∑–æ–ª–æ—Ç–∞ | ‚ö° {dungeonMap.name}
          </div>
        </div>
        
        <div className="max-w-7xl mx-auto">
          {/* –£–ª—É—á—à–µ–Ω–Ω—ã–π UI —Å —Ü–µ–ª—è–º–∏, —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ –∞—Ñ—Ñ–∏–∫—Å–∞–º–∏ */}
          <div className="mb-6">
            <EnhancedDungeonUI 
              dungeonRun={activeRun}
              onExitDungeon={abandonDungeon}
            />
          </div>

          {/* –ö–∞—Ä—Ç–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ */}
          <div className="mb-6">
            <Card className="bg-gray-800 border-gray-600">
              <CardHeader>
                <CardTitle className="text-white text-center">
                  üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–¥–∑–µ–º–µ–ª—å—è
                </CardTitle>
              </CardHeader>
              <CardContent>
                <DungeonMapComponent
                  dungeon={dungeonMap}
                  visited={visitedRooms}
                  current={currentRoomId}
                  onMove={handleRoomMove}
                />
                
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≥—Ä–æ–∑—ã —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–æ–º–Ω–∞—Ç */}
                <div className="mt-4 grid grid-cols-1 md:grid-cols-3 gap-4">
                  {dungeonMap.rooms[currentRoomId]?.neighbors.map(neighborId => {
                    const neighbor = dungeonMap.rooms[neighborId];
                    return (
                      <div key={neighborId} className="bg-gray-700 p-3 rounded-lg">
                        <div className="flex items-center justify-between">
                          <span className="text-white font-medium">
                            {neighbor.type}
                          </span>
                          <RoomThreatIndicator 
                            threatLevel={neighbor.threat.level}
                            hint={neighbor.threat.hint}
                          />
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—è */}
          {roomState === 'battle' && currentEnemy && (
            <div className="mt-6">
              <DungeonBattle
                player={player}
                enemy={currentEnemy}
                dungeonRun={activeRun}
                onBattleEnd={handleBattleEnd}
                onFlee={() => setRoomState('exploring')}
              />
            </div>
          )}
        </div>
      </div>
    );
  }

  // –í—ã–±–æ—Ä –ø–æ–¥–∑–µ–º–µ–ª—å—è
  return (
    <div className="min-h-screen p-4">
      <div className="flex justify-between items-center mb-6">
        <Button 
          onClick={onBack}
          className="bg-gray-800 bg-opacity-80 text-white hover:bg-gray-700"
        >
          ‚Üê –ù–∞–∑–∞–¥ –≤ –≥–æ—Ä–æ–¥
        </Button>
        <div className="text-yellow-400 font-bold">üí∞ {player.gold} –∑–æ–ª–æ—Ç–∞</div>
      </div>
      
      <div className="max-w-6xl mx-auto">
        <h1 className="text-4xl font-bold text-center text-white mb-8">
          üè∞ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ü–æ–¥–∑–µ–º–µ–ª—å—è
        </h1>
        
        <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-4 mb-8">
          <h2 className="text-xl font-bold text-blue-400 mb-2">‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h2>
          <ul className="text-gray-300 space-y-1">
            <li>üéØ <strong>–¶–µ–ª–∏ –ø–æ–¥–∑–µ–º–µ–ª–∏–π:</strong> –ö–ª—é—á–∏, –ø–ª–µ–Ω–Ω–∏–∫–∏, –æ—Å–∫–æ–ª–∫–∏</li>
            <li>üî• <strong>–†–µ—Å—É—Ä—Å—ã —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏:</strong> –°–∏—Å—Ç–µ–º–∞ —Ñ–∞–∫–µ–ª–æ–≤</li>
            <li>‚ú® <strong>–ê—Ñ—Ñ–∏–∫—Å—ã –∑–∞–±–µ–≥–∞:</strong> –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</li>
            <li>‚≠ê <strong>–û—á–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</strong> –ë–æ–Ω—É—Å—ã –∫ –Ω–∞–≥—Ä–∞–¥–∞–º</li>
            <li>üõ°Ô∏è <strong>–°–∏—Å—Ç–µ–º–∞ —É–≥—Ä–æ–∑:</strong> –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
          </ul>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {dungeons.map((dungeon) => (
            <Card key={dungeon.id} className="bg-gray-800 bg-opacity-80 border-gray-600 hover:border-purple-500/50 transition-colors">
              <CardHeader>
                <CardTitle className="text-white text-xl">{dungeon.name}</CardTitle>
                <p className="text-gray-300 text-sm">{dungeon.description}</p>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-sm text-gray-300 mb-4">
                  <div>üìä –£—Ä–æ–≤–µ–Ω—å: {dungeon.min_level}-{dungeon.max_level}</div>
                  <div>‚öîÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {dungeon.difficulty}</div>
                  <div>üè† –ö–æ–º–Ω–∞—Ç: {dungeon.rooms_count}</div>
                  <div>üí∞ –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {dungeon.base_reward_gold} –∑–æ–ª–æ—Ç–∞</div>
                  <div>‚≠ê –ë–∞–∑–æ–≤—ã–π –æ–ø—ã—Ç: {dungeon.base_reward_exp}</div>
                  <div className="text-yellow-400">‚ú® + –±–æ–Ω—É—Å—ã –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è!</div>
                </div>
                
                <Button
                  onClick={() => startEnhancedDungeon(dungeon)}
                  disabled={player.level < dungeon.min_level}
                  className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white"
                >
                  {player.level < dungeon.min_level 
                    ? `–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${dungeon.min_level}`
                    : 'üöÄ –ù–∞—á–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∑–µ–º–µ–ª—å–µ'
                  }
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}




