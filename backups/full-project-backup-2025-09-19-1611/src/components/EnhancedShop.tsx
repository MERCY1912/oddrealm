import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Player, Item, WeaponType, ItemRarity } from '@/types/game';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { shopCategories, weaponSubcategories } from '@/data/enhancedShopItems';
import { useToast } from '@/hooks/use-toast';
import { fetchShopItems } from '@/data/shopApi';
import { Skeleton } from './ui/skeleton';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import ItemTooltip from './ItemTooltip';

interface EnhancedShopProps {
  player: Player;
  onPlayerUpdate: (player: Player) => void;
  onAddToInventory: (item: Item) => void;
}

const EnhancedShop = ({ player, onPlayerUpdate, onAddToInventory }: EnhancedShopProps) => {
  const [activeCategory, setActiveCategory] = useState('weapon');
  const [activeSubcategory, setActiveSubcategory] = useState('sword');
  const [sortBy, setSortBy] = useState<'level' | 'price' | 'rarity' | 'name'>('level');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('asc');
  const [filterRarity, setFilterRarity] = useState<ItemRarity | 'all'>('all');
  const { toast } = useToast();
  
  const { data: shopItems = [], isLoading } = useQuery({
    queryKey: ['shopItems'],
    queryFn: fetchShopItems,
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  useEffect(() => {
    console.log('Shop items loaded:', shopItems);
    console.log('Items count:', shopItems.length);
    if (shopItems.length > 0) {
      console.log('Sample item:', shopItems[0]);
      const weaponItems = shopItems.filter(item => item.type === 'weapon');
      console.log('Weapon items:', weaponItems);
      weaponItems.forEach(item => {
        console.log(`Weapon: ${item.name}, weaponType: ${item.weaponType}`);
      });
    }
  }, [shopItems]);

  useEffect(() => {
    console.log('Active category:', activeCategory, 'Active subcategory:', activeSubcategory);
  }, [activeCategory, activeSubcategory]);

  const rarityColors = {
    common: 'bg-gray-500',
    rare: 'bg-blue-500',
    epic: 'bg-purple-500',
    legendary: 'bg-yellow-500',
  };

  const rarityNames = {
    common: '–û–±—ã—á–Ω–æ–µ',
    rare: '–†–µ–¥–∫–æ–µ',
    epic: '–≠–ø–∏—á–µ—Å–∫–æ–µ',
    legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ',
  };

  const weaponTypeNames: Record<WeaponType, string> = {
    sword: '–ú–µ—á',
    axe: '–¢–æ–ø–æ—Ä',
    bow: '–õ—É–∫',
    staff: '–ü–æ—Å–æ—Ö',
    dagger: '–ö–∏–Ω–∂–∞–ª',
    mace: '–ë—É–ª–∞–≤–∞',
  };

  const buyItem = async (item: Item) => {
    if (player.gold < item.price) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞",
        description: `–í–∞–º –Ω—É–∂–Ω–æ ${item.price} –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.`,
        variant: "destructive",
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–≤–Ω—é
    if (item.levelReq && player.level < item.levelReq) {
      toast({
        title: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
        description: `–î–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è ${item.levelReq} —É—Ä–æ–≤–µ–Ω—å.`,
        variant: "destructive",
      });
      return;
    }

    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
      if (item.name && item.name.includes('—Ö–æ–ª–æ–¥–Ω–æ–π')) {
        console.log('EnhancedShop buyItem: Buying "–í–µ–ª–∏—á–∏–µ —Ö–æ–ª–æ–¥–Ω–æ–π —Å—Ç–∞–ª–∏":', {
          item,
          image_url: item.image_url,
          rarity: item.rarity,
          type: item.type
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ –∏–≥—Ä–æ–∫–∞
      const updatedPlayer: Player = {
        ...player,
        gold: player.gold - item.price,
      };

      onPlayerUpdate(updatedPlayer);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      if (onAddToInventory) {
        console.log('EnhancedShop buyItem: Calling onAddToInventory with item:', item);
        await onAddToInventory(item);
      }
      
      toast({
        title: "‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
        description: `${item.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å`,
        duration: 3000,
      });
    } catch (error) {
      console.error('Error buying item:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        variant: "destructive",
      });
    }
  };

  const getItemIcon = (item: Item) => {
    const icons: Record<string, string> = {
      weapon: '‚öîÔ∏è',
      armor: 'üõ°Ô∏è',
      helmet: '‚õëÔ∏è',
      boots: 'üë¢',
      gloves: 'üß§',
      ring: 'üíç',
      necklace: 'üìø',
      belt: 'üîó',
      shield: 'üõ°Ô∏è',
      leggings: 'üëñ',
    };
    return icons[item.type] || 'üì¶';
  };

  const getCurrentItems = () => {
    if (!shopItems) return [];
    
    let items: Item[] = [];
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (activeCategory === 'weapon') {
      const weaponTypeMapping: Record<string, WeaponType> = {
        'sword': 'sword',
        'axe': 'axe', 
        'bow': 'bow',
        'staff': 'staff',
      };
      
      const targetWeaponType = weaponTypeMapping[activeSubcategory];
      items = shopItems.filter(item => {
        const isWeapon = item.type === 'weapon';
        const hasCorrectWeaponType = item.weaponType === targetWeaponType;
        return isWeapon && hasCorrectWeaponType;
      });
    } else if (activeCategory === 'armor') {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–∏–¥—ã –±—Ä–æ–Ω–∏
      items = shopItems.filter(item => 
        ['armor', 'helmet', 'boots', 'gloves', 'belt', 'shield', 'bracers', 'leggings'].includes(item.type)
      );
    } else if (activeCategory === 'accessories') {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
      items = shopItems.filter(item => 
        ['ring', 'necklace', 'earring'].includes(item.type)
      );
    } else if (activeCategory === 'consumables') {
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏
      items = shopItems.filter(item => 
        ['spell', 'elixir', 'charm', 'rune', 'food', 'consumable'].includes(item.type)
      );
    } else {
      items = shopItems.filter(item => item.type === activeCategory);
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    if (filterRarity !== 'all') {
      items = items.filter(item => item.rarity === filterRarity);
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    return items.sort((a, b) => {
      let comparison = 0;
      
      switch (sortBy) {
        case 'level':
          const levelA = a.levelReq || 0;
          const levelB = b.levelReq || 0;
          comparison = levelA - levelB;
          break;
        case 'price':
          comparison = a.price - b.price;
          break;
        case 'rarity':
          const rarityOrder = { common: 1, rare: 2, epic: 3, legendary: 4 };
          comparison = rarityOrder[a.rarity] - rarityOrder[b.rarity];
          break;
        case 'name':
          comparison = a.name.localeCompare(b.name);
          break;
      }
      
      return sortOrder === 'asc' ? comparison : -comparison;
    });
  };

  const handleCategoryChange = (categoryId: string) => {
    setActiveCategory(categoryId);
    if (categoryId === 'weapon') {
      setActiveSubcategory('sword');
    }
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const extendedCategories = [
    { id: 'weapon', name: '–û—Ä—É–∂–∏–µ', icon: '‚öîÔ∏è' },
    { id: 'armor', name: '–î–æ—Å–ø–µ—Ö–∏', icon: 'üõ°Ô∏è' },
    { id: 'accessories', name: '–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', icon: 'üíç' },
    { id: 'consumables', name: '–°–≤–∏—Ç–∫–∏ –∏ –∑–µ–ª—å—è', icon: 'üß™' },
  ];

  return (
    <div className="space-y-4">
      <Card className="panel text-white border-yellow-600">
        <CardHeader>
          <CardTitle className="text-center text-yellow-400">üè™ –ú–ê–ì–ê–ó–ò–ù</CardTitle>
          <div className="text-center text-yellow-300">
            üí∞ –£ –≤–∞—Å: {player.gold} –∑–æ–ª–æ—Ç–∞
          </div>
        </CardHeader>
        <CardContent>
          {/* –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div className="flex flex-wrap gap-2 mb-4">
            {extendedCategories.map((category) => (
              <Button
                key={category.id}
                onClick={() => handleCategoryChange(category.id)}
                variant={activeCategory === category.id ? "default" : "outline"}
                className="text-xs sm:text-sm px-2 sm:px-4 py-2 flex-1 sm:flex-none min-w-0"
              >
                <span className="hidden sm:inline">{category.icon} </span>
                <span className="truncate">{category.name}</span>
              </Button>
            ))}
          </div>

          {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ä—É–∂–∏—è */}
          {activeCategory === 'weapon' && (
            <div className="flex flex-wrap gap-2 mb-4 border-t border-gray-600 pt-4">
              {weaponSubcategories.map((subcategory) => (
                <Button
                  key={subcategory.id}
                  onClick={() => setActiveSubcategory(subcategory.id)}
                  variant={activeSubcategory === subcategory.id ? "default" : "outline"}
                  className="text-xs flex-1 sm:flex-none min-w-0"
                  size="sm"
                >
                  <span className="hidden sm:inline">{subcategory.icon} </span>
                  <span className="truncate">{subcategory.name}</span>
                </Button>
              ))}
            </div>
          )}

          {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π */}
          <div className="flex flex-col sm:flex-row flex-wrap gap-3 sm:gap-4 mb-6 border-t border-gray-600 pt-4">
            {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
            <div className="flex items-center gap-2 w-full sm:w-auto">
              <span className="text-sm text-gray-300 whitespace-nowrap">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
              <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>
                <SelectTrigger className="flex-1 sm:w-32 bg-gray-700 border-gray-600 text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-gray-600">
                  <SelectItem value="level">–ü–æ —É—Ä–æ–≤–Ω—é</SelectItem>
                  <SelectItem value="price">–ü–æ —Ü–µ–Ω–µ</SelectItem>
                  <SelectItem value="rarity">–ü–æ —Ä–µ–¥–∫–æ—Å—Ç–∏</SelectItem>
                  <SelectItem value="name">–ü–æ –∏–º–µ–Ω–∏</SelectItem>
                </SelectContent>
              </Select>
              
              <Button
                onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                variant="outline"
                size="sm"
                className="text-xs flex-shrink-0"
              >
                {sortOrder === 'asc' ? '‚Üë' : '‚Üì'}
              </Button>
            </div>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏ */}
            <div className="flex items-center gap-2 w-full sm:w-auto">
              <span className="text-sm text-gray-300 whitespace-nowrap">–†–µ–¥–∫–æ—Å—Ç—å:</span>
              <Select value={filterRarity} onValueChange={(value: any) => setFilterRarity(value)}>
                <SelectTrigger className="flex-1 sm:w-32 bg-gray-700 border-gray-600 text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="bg-gray-800 border-gray-600">
                  <SelectItem value="all">–í—Å–µ</SelectItem>
                  <SelectItem value="common">–û–±—ã—á–Ω—ã–µ</SelectItem>
                  <SelectItem value="rare">–†–µ–¥–∫–∏–µ</SelectItem>
                  <SelectItem value="epic">–≠–ø–∏—á–µ—Å–∫–∏–µ</SelectItem>
                  <SelectItem value="legendary">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* –°—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */}
            <div className="flex items-center gap-2 w-full sm:w-auto sm:ml-auto">
              <span className="text-sm text-gray-300">
                –ù–∞–π–¥–µ–Ω–æ: {getCurrentItems().length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤
              </span>
            </div>
          </div>

          {/* –¢–æ–≤–∞—Ä—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã */}
          <div className="max-h-[600px] overflow-y-auto game-scrollbar">
            {isLoading && Array.from({ length: 3 }).map((_, i) => <Skeleton key={i} className="h-20 w-full bg-gray-700" />)}
            
            {!isLoading && getCurrentItems().length === 0 && (
              <div className="text-center py-8 text-gray-400">
                <div className="text-4xl mb-2">üì¶</div>
                <p>–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤</p>
              </div>
            )}
            
            {!isLoading && getCurrentItems().length > 0 && (
              <div className="space-y-2">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã - —Å–∫—Ä—ã—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
                <div className="hidden sm:grid grid-cols-12 gap-4 p-4 bg-gray-800 rounded-lg text-sm font-medium text-gray-300">
                  <div className="col-span-1">–ò–∫–æ–Ω–∫–∞</div>
                  <div className="col-span-6">–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</div>
                  <div className="col-span-2">–†–µ–¥–∫–æ—Å—Ç—å</div>
                  <div className="col-span-1">–£—Ä–æ–≤–µ–Ω—å</div>
                  <div className="col-span-1">–¶–µ–Ω–∞</div>
                  <div className="col-span-1">–î–µ–π—Å—Ç–≤–∏–µ</div>
                </div>
                
                {/* –°—Ç—Ä–æ–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ */}
                {getCurrentItems().map((item) => (
                  <div key={item.id}>
                    {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
                    <ItemTooltip item={item} side="top">
                      <div className="hidden sm:grid grid-cols-12 gap-4 p-6 bg-gray-700 rounded-lg hover:bg-gray-600 transition-colors items-start cursor-pointer min-h-[200px]">
                    {/* –ò–∫–æ–Ω–∫–∞ */}
                    <div className="col-span-1">
                      <div className="w-16 h-16 text-3xl bg-gray-800 rounded flex items-center justify-center overflow-hidden">
                        {item.image_url ? (
                          <img src={item.image_url} alt={item.name} className="w-full h-full object-cover" />
                        ) : (
                          getItemIcon(item)
                        )}
                      </div>
                    </div>
                    
                    {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                    <div className="col-span-6">
                      <div className="font-bold text-white text-lg mb-2">{item.name}</div>
                      <div className="text-sm text-gray-300 mb-3">{item.description}</div>
                      
                      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–º */}
                      <div className="space-y-1 text-sm mb-3">
                        {item.weight && (
                          <div className="text-gray-400">
                            ‚öñÔ∏è –í–µ—Å: {item.weight}
                          </div>
                        )}
                        {item.durability && (
                          <div className="text-yellow-400">
                            üõ°Ô∏è –ü—Ä–æ—á–Ω–æ—Å—Ç—å: {item.durability.current}/{item.durability.max}
                          </div>
                        )}
                      {item.requirements && (
                          <div className="text-red-400">
                          üìã {item.requirements}
                        </div>
                      )}
                      </div>

                      {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                      <div className="space-y-2">
                        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                        <div>
                          <div className="text-sm font-semibold text-blue-400 mb-1">–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</div>
                          <div className="space-y-1">
                            {Object.entries(item.stats).filter(([stat, value]) => 
                              value && value !== 0 && ['attack', 'defense', 'health', 'mana'].includes(stat)
                            ).map(([stat, value]) => {
                              const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                attack: { label: '–ê—Ç–∞–∫–∞', color: 'text-red-400', icon: '‚öîÔ∏è'},
                                defense: { label: '–ó–∞—â–∏—Ç–∞', color: 'text-blue-400', icon: 'üõ°Ô∏è'},
                                health: { label: '–ó–¥–æ—Ä–æ–≤—å–µ', color: 'text-green-400', icon: '‚ù§Ô∏è'},
                                mana: { label: '–ú–∞–Ω–∞', color: 'text-purple-400', icon: 'üîÆ'},
                              };
                              return (
                                <div key={stat} className={`text-sm ${statsMap[stat].color} flex items-center gap-2`}>
                                  <span>{statsMap[stat].icon}</span>
                                  <span>{statsMap[stat].label}: +{value}</span>
                                </div>
                              );
                            })}
                          </div>
                        </div>

                        {/* –ê—Ç—Ä–∏–±—É—Ç—ã */}
                        <div>
                          <div className="text-sm font-semibold text-orange-400 mb-1">–ê—Ç—Ä–∏–±—É—Ç—ã:</div>
                          <div className="space-y-1">
                            {Object.entries(item.stats).filter(([stat, value]) => 
                              value && value !== 0 && ['strength', 'dexterity', 'luck', 'endurance', 'magic', 'intuition'].includes(stat)
                            ).map(([stat, value]) => {
                              const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                strength: { label: '–°–∏–ª–∞', color: 'text-orange-400', icon: 'üí™'},
                                dexterity: { label: '–õ–æ–≤–∫–æ—Å—Ç—å', color: 'text-cyan-400', icon: 'ü§∏'},
                                luck: { label: '–£–¥–∞—á–∞', color: 'text-yellow-400', icon: 'üçÄ'},
                                endurance: { label: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', color: 'text-amber-400', icon: 'üèÉ'},
                                magic: { label: '–ú–∞–≥–∏—è', color: 'text-indigo-400', icon: 'üßô'},
                                intuition: { label: '–ò–Ω—Ç—É–∏—Ü–∏—è', color: 'text-pink-400', icon: 'üîÆ'},
                              };
                              return (
                                <div key={stat} className={`text-sm ${statsMap[stat].color} flex items-center gap-2`}>
                                  <span>{statsMap[stat].icon}</span>
                                  <span>{statsMap[stat].label}: +{value}</span>
                                </div>
                              );
                            })}
                          </div>
                        </div>

                        {/* –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã */}
                        <div>
                          <div className="text-sm font-semibold text-purple-400 mb-1">–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:</div>
                          <div className="space-y-1">
                            {Object.entries(item.stats).filter(([stat, value]) => 
                              value && value !== 0 && ['criticalChance', 'antiCriticalChance', 'dodgeChance', 'antiDodgeChance', 'vampirism', 'blockChance'].includes(stat)
                            ).map(([stat, value]) => {
                              const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                criticalChance: { label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä', color: 'text-orange-400', icon: 'üí•'},
                                antiCriticalChance: { label: '–ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∞', color: 'text-orange-600', icon: 'üõ°Ô∏èüí•'},
                                dodgeChance: { label: '–£–≤–æ—Ä–æ—Ç', color: 'text-cyan-400', icon: 'üí®'},
                                antiDodgeChance: { label: '–¢–æ—á–Ω–æ—Å—Ç—å', color: 'text-cyan-600', icon: 'üéØ'},
                                vampirism: { label: '–í–∞–º–ø–∏—Ä–∏–∑–º', color: 'text-red-300', icon: 'ü©∏'},
                                blockChance: { label: '–ë–ª–æ–∫', color: 'text-gray-400', icon: 'üõ°Ô∏è'},
                              };
                              return (
                                <div key={stat} className={`text-sm ${statsMap[stat].color} flex items-center gap-2`}>
                                  <span>{statsMap[stat].icon}</span>
                                  <span>{statsMap[stat].label}: +{value}%</span>
                                </div>
                              );
                            })}
                          </div>
                        </div>

                        {/* –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è */}
                        <div>
                          <div className="text-sm font-semibold text-red-400 mb-1">–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:</div>
                          <div className="space-y-1">
                            {Object.entries(item.stats).filter(([stat, value]) => 
                              value && value !== 0 && ['fireResistance', 'coldResistance', 'darkResistance', 'crushResistance'].includes(stat)
                            ).map(([stat, value]) => {
                              const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                fireResistance: { label: '–û–≥–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å', color: 'text-red-500', icon: 'üî•'},
                                coldResistance: { label: '–ú–æ—Ä–æ–∑–æ—Å—Ç–æ–π–∫–æ—Å—Ç—å', color: 'text-blue-500', icon: '‚ùÑÔ∏è'},
                                darkResistance: { label: '–¢–µ–Ω–µ—Å—Ç–æ–π–∫–æ—Å—Ç—å', color: 'text-purple-500', icon: 'üåë'},
                                crushResistance: { label: '–£–¥–∞—Ä–æ–ø—Ä–æ—á–Ω–æ—Å—Ç—å', color: 'text-gray-500', icon: 'üí•'},
                              };
                              return (
                                <div key={stat} className={`text-sm ${statsMap[stat].color} flex items-center gap-2`}>
                                  <span>{statsMap[stat].icon}</span>
                                  <span>{statsMap[stat].label}: +{value}%</span>
                                </div>
                              );
                            })}
                          </div>
                        </div>

                        {/* –ë—Ä–æ–Ω—è */}
                        <div>
                          <div className="text-sm font-semibold text-blue-300 mb-1">–ë—Ä–æ–Ω—è:</div>
                          <div className="space-y-1">
                            {Object.entries(item.stats).filter(([stat, value]) => 
                              value && value !== 0 && ['bodyArmor', 'headArmor', 'armArmor', 'legArmor'].includes(stat)
                            ).map(([stat, value]) => {
                              const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                bodyArmor: { label: '–ë—Ä–æ–Ω—è —Ç–µ–ª–∞', color: 'text-blue-300', icon: 'üëï'},
                                headArmor: { label: '–ë—Ä–æ–Ω—è –≥–æ–ª–æ–≤—ã', color: 'text-blue-300', icon: 'üéì'},
                                armArmor: { label: '–ë—Ä–æ–Ω—è —Ä—É–∫', color: 'text-blue-300', icon: 'üß§'},
                                legArmor: { label: '–ë—Ä–æ–Ω—è –Ω–æ–≥', color: 'text-blue-300', icon: 'üë¢'},
                              };
                              return (
                                <div key={stat} className={`text-sm ${statsMap[stat].color} flex items-center gap-2`}>
                                  <span>{statsMap[stat].icon}</span>
                                  <span>{statsMap[stat].label}: +{value}</span>
                                </div>
                              );
                            })}
                          </div>
                        </div>

                        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                        <div>
                          {Object.entries(item.stats).filter(([stat, value]) => 
                            value && value !== 0 && !['attack', 'defense', 'health', 'mana', 'strength', 'dexterity', 'luck', 'endurance', 'magic', 'intuition', 'criticalChance', 'antiCriticalChance', 'dodgeChance', 'antiDodgeChance', 'vampirism', 'blockChance', 'fireResistance', 'coldResistance', 'darkResistance', 'crushResistance', 'bodyArmor', 'headArmor', 'armArmor', 'legArmor'].includes(stat)
                          ).length > 0 && (
                            <>
                              <div className="text-sm font-semibold text-gray-400 mb-1">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</div>
                              <div className="space-y-1">
                                {Object.entries(item.stats).filter(([stat, value]) => 
                                  value && value !== 0 && !['attack', 'defense', 'health', 'mana', 'strength', 'dexterity', 'luck', 'endurance', 'magic', 'intuition', 'criticalChance', 'antiCriticalChance', 'dodgeChance', 'antiDodgeChance', 'vampirism', 'blockChance', 'fireResistance', 'coldResistance', 'darkResistance', 'crushResistance', 'bodyArmor', 'headArmor', 'armArmor', 'legArmor'].includes(stat)
                                ).map(([stat, value]) => {
                                  const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                    stealth: { label: '–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å', color: 'text-purple-400', icon: 'üë§'},
                                  };
                                  if (!statsMap[stat]) return null;
                                  return (
                                    <div key={stat} className={`text-sm ${statsMap[stat].color} flex items-center gap-2`}>
                                      <span>{statsMap[stat].icon}</span>
                                      <span>{statsMap[stat].label}: +{value}</span>
                                    </div>
                                  );
                                })}
                              </div>
                            </>
                          )}
                        </div>

                        {Object.keys(item.stats).filter(stat => item.stats[stat as keyof typeof item.stats] && item.stats[stat as keyof typeof item.stats] !== 0).length === 0 && (
                          <div className="text-sm text-gray-500">–ù–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</div>
                      )}
                      </div>
                    </div>
                    
                    {/* –†–µ–¥–∫–æ—Å—Ç—å */}
                    <div className="col-span-2">
                      <Badge className={`${rarityColors[item.rarity]} text-xs`}>
                        {rarityNames[item.rarity]}
                      </Badge>
                      {item.weaponType && (
                        <div className="text-xs text-gray-400 mt-1">
                          {weaponTypeNames[item.weaponType]}
                        </div>
                      )}
                    </div>
                    
                    
                    {/* –£—Ä–æ–≤–µ–Ω—å */}
                    <div className="col-span-1 text-center">
                      <span className="text-yellow-400 font-bold">{item.levelReq || 1}</span>
                    </div>
                    
                    {/* –¶–µ–Ω–∞ */}
                    <div className="col-span-1 text-center">
                      <span className="text-yellow-400 font-bold">üí∞ {item.price}</span>
                    </div>
                    
                    {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ */}
                    <div className="col-span-1 flex items-center justify-center">
                      <Button 
                        onClick={() => buyItem(item)}
                        disabled={player.gold < item.price || (item.levelReq && player.level < item.levelReq)}
                        size="sm"
                        className="bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-xs px-2 py-1"
                      >
                        {player.gold < item.price ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞' : 
                         (item.levelReq && player.level < item.levelReq) ? '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å' : 
                         '–ö—É–ø–∏—Ç—å'}
                      </Button>
                    </div>
                    </div>
                  </ItemTooltip>

                    {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
                    <ItemTooltip item={item} side="top">
                      <div className="sm:hidden bg-gray-700 rounded-lg hover:bg-gray-600 transition-colors cursor-pointer p-4 space-y-4">
                      {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –∏–∫–æ–Ω–∫–æ–π, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ü–µ–Ω–æ–π */}
                      <div className="flex items-start gap-3">
                        {/* –ò–∫–æ–Ω–∫–∞ */}
                        <div className="w-12 h-12 text-2xl bg-gray-800 rounded flex items-center justify-center overflow-hidden flex-shrink-0">
                          {item.image_url ? (
                            <img src={item.image_url} alt={item.name} className="w-full h-full object-cover" />
                          ) : (
                            getItemIcon(item)
                          )}
                        </div>
                        
                        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        <div className="flex-1 min-w-0">
                          <div className="font-bold text-white text-base mb-1">{item.name}</div>
                          <div className="text-sm text-gray-300 mb-2 line-clamp-2">{item.description}</div>
                          
                          {/* –†–µ–¥–∫–æ—Å—Ç—å –∏ —É—Ä–æ–≤–µ–Ω—å */}
                          <div className="flex items-center gap-2 mb-2">
                            <Badge className={`${rarityColors[item.rarity]} text-xs`}>
                              {rarityNames[item.rarity]}
                            </Badge>
                            <span className="text-yellow-400 font-bold text-sm">–£—Ä. {item.levelReq || 1}</span>
                          </div>
                          
                          {/* –¶–µ–Ω–∞ */}
                          <div className="text-yellow-400 font-bold text-lg mb-3">
                            üí∞ {item.price}
                          </div>
                        </div>
                      </div>

                      {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
                      <div className="space-y-2">
                        {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
                        {Object.entries(item.stats).filter(([stat, value]) => 
                          value && value !== 0 && ['attack', 'defense', 'health', 'mana'].includes(stat)
                        ).length > 0 && (
                          <div>
                            <div className="text-xs font-semibold text-blue-400 mb-1">–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</div>
                            <div className="flex flex-wrap gap-2">
                              {Object.entries(item.stats).filter(([stat, value]) => 
                                value && value !== 0 && ['attack', 'defense', 'health', 'mana'].includes(stat)
                              ).map(([stat, value]) => {
                                const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                  attack: { label: '–ê—Ç–∞–∫–∞', color: 'text-red-400', icon: '‚öîÔ∏è'},
                                  defense: { label: '–ó–∞—â–∏—Ç–∞', color: 'text-blue-400', icon: 'üõ°Ô∏è'},
                                  health: { label: '–ó–¥–æ—Ä–æ–≤—å–µ', color: 'text-green-400', icon: '‚ù§Ô∏è'},
                                  mana: { label: '–ú–∞–Ω–∞', color: 'text-purple-400', icon: 'üîÆ'},
                                };
                                return (
                                  <span key={stat} className={`text-xs ${statsMap[stat].color}`}>
                                    {statsMap[stat].icon} {statsMap[stat].label}: +{value}
                                  </span>
                                );
                              })}
                            </div>
                          </div>
                        )}

                        {/* –ê—Ç—Ä–∏–±—É—Ç—ã */}
                        {Object.entries(item.stats).filter(([stat, value]) => 
                          value && value !== 0 && ['strength', 'dexterity', 'luck', 'endurance', 'magic', 'intuition'].includes(stat)
                        ).length > 0 && (
                          <div>
                            <div className="text-xs font-semibold text-orange-400 mb-1">–ê—Ç—Ä–∏–±—É—Ç—ã:</div>
                            <div className="flex flex-wrap gap-2">
                              {Object.entries(item.stats).filter(([stat, value]) => 
                                value && value !== 0 && ['strength', 'dexterity', 'luck', 'endurance', 'magic', 'intuition'].includes(stat)
                              ).map(([stat, value]) => {
                                const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                  strength: { label: '–°–∏–ª–∞', color: 'text-orange-400', icon: 'üí™'},
                                  dexterity: { label: '–õ–æ–≤–∫–æ—Å—Ç—å', color: 'text-cyan-400', icon: 'ü§∏'},
                                  luck: { label: '–£–¥–∞—á–∞', color: 'text-yellow-400', icon: 'üçÄ'},
                                  endurance: { label: '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å', color: 'text-amber-400', icon: 'üèÉ'},
                                  magic: { label: '–ú–∞–≥–∏—è', color: 'text-indigo-400', icon: 'üßô'},
                                  intuition: { label: '–ò–Ω—Ç—É–∏—Ü–∏—è', color: 'text-pink-400', icon: 'üîÆ'},
                                };
                                return (
                                  <span key={stat} className={`text-xs ${statsMap[stat].color}`}>
                                    {statsMap[stat].icon} {statsMap[stat].label}: +{value}
                                  </span>
                                );
                              })}
                            </div>
                          </div>
                        )}

                        {/* –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã */}
                        {Object.entries(item.stats).filter(([stat, value]) => 
                          value && value !== 0 && ['criticalChance', 'antiCriticalChance', 'dodgeChance', 'antiDodgeChance', 'vampirism', 'blockChance'].includes(stat)
                        ).length > 0 && (
                          <div>
                            <div className="text-xs font-semibold text-purple-400 mb-1">–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:</div>
                            <div className="flex flex-wrap gap-2">
                              {Object.entries(item.stats).filter(([stat, value]) => 
                                value && value !== 0 && ['criticalChance', 'antiCriticalChance', 'dodgeChance', 'antiDodgeChance', 'vampirism', 'blockChance'].includes(stat)
                              ).map(([stat, value]) => {
                                const statsMap: Record<string, {label: string, color: string, icon: string}> = {
                                  criticalChance: { label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä', color: 'text-orange-400', icon: 'üí•'},
                                  antiCriticalChance: { label: '–ó–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∏—Ç–∞', color: 'text-orange-600', icon: 'üõ°Ô∏èüí•'},
                                  dodgeChance: { label: '–£–≤–æ—Ä–æ—Ç', color: 'text-cyan-400', icon: 'üí®'},
                                  antiDodgeChance: { label: '–¢–æ—á–Ω–æ—Å—Ç—å', color: 'text-cyan-600', icon: 'üéØ'},
                                  vampirism: { label: '–í–∞–º–ø–∏—Ä–∏–∑–º', color: 'text-red-300', icon: 'ü©∏'},
                                  blockChance: { label: '–ë–ª–æ–∫', color: 'text-gray-400', icon: 'üõ°Ô∏è'},
                                };
                                return (
                                  <span key={stat} className={`text-xs ${statsMap[stat].color}`}>
                                    {statsMap[stat].icon} {statsMap[stat].label}: +{value}%
                                  </span>
                                );
                              })}
                            </div>
                          </div>
                        )}
                      </div>

                      {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ */}
                      <div className="pt-2 border-t border-gray-600">
                        <Button 
                          onClick={() => buyItem(item)}
                          disabled={player.gold < item.price || (item.levelReq && player.level < item.levelReq)}
                          size="sm"
                          className="w-full bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-sm py-2"
                      >
                        {player.gold < item.price ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞' : 
                         (item.levelReq && player.level < item.levelReq) ? '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å' : 
                         '–ö—É–ø–∏—Ç—å'}
                      </Button>
                    </div>
                      </div>
                    </ItemTooltip>
                  </div>
                ))}
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default EnhancedShop;
