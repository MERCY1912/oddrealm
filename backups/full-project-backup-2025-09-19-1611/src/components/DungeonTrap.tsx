import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Player } from '@/types/game';
import { useSound } from '@/hooks/useSound';

interface DungeonTrapProps {
  player: Player;
  onDamage: (amount: number) => void;
  onComplete: () => void;
  onSkip: () => void;
}

export default function DungeonTrap({ 
  player, 
  onDamage, 
  onComplete, 
  onSkip 
}: DungeonTrapProps) {
  const [triggered, setTriggered] = useState(false);
  const [avoided, setAvoided] = useState(false);
  const { sounds } = useSound();

  const handleTrigger = () => {
    const damage = Math.floor(Math.random() * 20) + 10;
    const avoidChance = player.dexterity / 100;
    const isAvoided = Math.random() < avoidChance;
    
    if (isAvoided) {
      setAvoided(true);
      sounds.trapAvoid();
    } else {
      onDamage(damage);
      sounds.trapTrigger();
    }
    setTriggered(true);
  };

  const handleDisarm = () => {
    const disarmChance = (player.dexterity + player.luck) / 200;
    const isDisarmed = Math.random() < disarmChance;
    
    if (isDisarmed) {
      setAvoided(true);
      sounds.trapAvoid();
    } else {
      const damage = Math.floor(Math.random() * 15) + 5;
      onDamage(damage);
      sounds.trapTrigger();
    }
    setTriggered(true);
  };

  if (triggered) {
    return (
      <Card className="bg-gray-800 border-gray-600">
        <CardHeader>
          <CardTitle className="text-white text-center">‚ò†Ô∏è –õ–æ–≤—É—à–∫–∞</CardTitle>
        </CardHeader>
        <CardContent className="text-center">
          {avoided ? (
            <div>
              <p className="text-green-400 mb-4 text-lg">
                üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–±–µ–∂–∞–ª–∏ –ª–æ–≤—É—à–∫–∏!
              </p>
              <p className="text-gray-300 mb-4">
                –í–∞—à–∞ –ª–æ–≤–∫–æ—Å—Ç—å –∏ —É–¥–∞—á–∞ –ø–æ–º–æ–≥–ª–∏ –≤–∞–º –∏–∑–±–µ–∂–∞—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
              </p>
            </div>
          ) : (
            <div>
              <p className="text-red-400 mb-4 text-lg">
                üí• –õ–æ–≤—É—à–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞!
              </p>
              <p className="text-gray-300 mb-4">
                –í—ã –ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–Ω –æ—Ç –ª–æ–≤—É—à–∫–∏.
              </p>
            </div>
          )}
          <Button 
            onClick={onComplete}
            className="bg-gray-600 hover:bg-gray-700 text-white"
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </Button>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-gray-800 border-gray-600">
      <CardHeader>
        <CardTitle className="text-white text-center">‚ò†Ô∏è –û–ø–∞—Å–Ω–∞—è –õ–æ–≤—É—à–∫–∞</CardTitle>
      </CardHeader>
      <CardContent className="text-center">
        <p className="text-gray-300 mb-6">
          –í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∫–æ–≤–∞—Ä–Ω—É—é –ª–æ–≤—É—à–∫—É! –û—Å—Ç—Ä—ã–µ —à–∏–ø—ã —Ç–æ—Ä—á–∞—Ç –∏–∑ –ø–æ–ª–∞. 
          –ß—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å?
        </p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <Button
            onClick={handleTrigger}
            className="bg-red-600 hover:bg-red-700 text-white h-16 flex flex-col items-center justify-center"
          >
            <span className="text-xl mb-1">‚ö°</span>
            <span>–ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–π—Ç–∏</span>
            <span className="text-xs opacity-75">
              –®–∞–Ω—Å –∏–∑–±–µ–∂–∞—Ç—å: {Math.floor(player.dexterity)}%
            </span>
          </Button>
          
          <Button
            onClick={handleDisarm}
            className="bg-yellow-600 hover:bg-yellow-700 text-white h-16 flex flex-col items-center justify-center"
          >
            <span className="text-xl mb-1">üîß</span>
            <span>–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–µ–∑–≤—Ä–µ–¥–∏—Ç—å</span>
            <span className="text-xs opacity-75">
              –®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {Math.floor((player.dexterity + player.luck) / 2)}%
            </span>
          </Button>
        </div>
        
        <Button 
          onClick={onSkip}
          variant="outline"
          className="border-gray-500 text-gray-300 hover:bg-gray-700"
        >
          –û–±–æ–π—Ç–∏ –ª–æ–≤—É—à–∫—É
        </Button>
      </CardContent>
    </Card>
  );
}
