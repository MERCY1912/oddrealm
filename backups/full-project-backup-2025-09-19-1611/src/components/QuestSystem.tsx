import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Player } from '@/types/game';

interface Quest {
  id: string;
  title: string;
  description: string;
  requirements: {
    level?: number;
    strength?: number;
    dexterity?: number;
    magic?: number;
    luck?: number;
    endurance?: number;
  };
  rewards: {
    experience: number;
    gold: number;
    items?: string[];
  };
  difficulty: 'easy' | 'medium' | 'hard' | 'legendary';
  completed: boolean;
}

interface QuestSystemProps {
  player: Player;
  onPlayerUpdate: (player: Player) => void;
}

const quests: Quest[] = [
  {
    id: 'first_steps',
    title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 2 —É—Ä–æ–≤–Ω—è –∏ –∏–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã –±–æ—è.',
    requirements: { level: 2 },
    rewards: { experience: 50, gold: 100 },
    difficulty: 'easy',
    completed: false,
  },
  {
    id: 'gear_up',
    title: '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞',
    description: '–ö—É–ø–∏—Ç–µ –ª—é–±–æ–µ –æ—Ä—É–∂–∏–µ –∏ –±—Ä–æ–Ω—é –≤ –º–∞–≥–∞–∑–∏–Ω–µ.',
    requirements: {},
    rewards: { experience: 75, gold: 150 },
    difficulty: 'easy',
    completed: false,
  },
  {
    id: 'strong_warrior',
    title: '–°–∏–ª—å–Ω—ã–π –≤–æ–∏–Ω',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 15 —Å–∏–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–≤–µ—Å—Ç–∞.',
    requirements: { strength: 15 },
    rewards: { experience: 200, gold: 300 },
    difficulty: 'medium',
    completed: false,
  },
  {
    id: 'agile_fighter',
    title: '–õ–æ–≤–∫–∏–π –±–æ–µ—Ü',
    description: '–†–∞–∑–≤–µ–π—Ç–µ –ª–æ–≤–∫–æ—Å—Ç—å –¥–æ 15 –¥–ª—è –æ—Å–≤–æ–µ–Ω–∏—è —É–∫–ª–æ–Ω–µ–Ω–∏–π.',
    requirements: { dexterity: 15 },
    rewards: { experience: 200, gold: 300 },
    difficulty: 'medium',
    completed: false,
  },
  {
    id: 'master_mage',
    title: '–ú–∞—Å—Ç–µ—Ä –º–∞–≥–∏–∏',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 20 –º–∞–≥–∏–∏ –∏ —Å—Ç–∞–Ω—å—Ç–µ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —á–∞—Ä–æ–¥–µ–µ–º.',
    requirements: { magic: 20 },
    rewards: { experience: 500, gold: 800 },
    difficulty: 'hard',
    completed: false,
  },
  {
    id: 'legendary_hero',
    title: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –≥–µ—Ä–æ–π',
    description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è –∏ –¥–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –≤–µ–ª–∏—á–∏–µ.',
    requirements: { level: 10 },
    rewards: { experience: 1000, gold: 2000 },
    difficulty: 'legendary',
    completed: false,
  },
];

const QuestSystem = ({ player, onPlayerUpdate }: QuestSystemProps) => {
  const [playerQuests, setPlayerQuests] = useState<Quest[]>(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–µ—Å—Ç–æ–≤ –∏–∑ localStorage
    const savedQuests = localStorage.getItem('completedQuests');
    if (savedQuests) {
      const completedQuestIds = JSON.parse(savedQuests);
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–≤–µ—Å—Ç—ã, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
      return quests.filter(quest => !completedQuestIds.includes(quest.id));
    }
    return quests;
  });
  const { toast } = useToast();

  const difficultyColors = {
    easy: 'bg-green-500',
    medium: 'bg-yellow-500',
    hard: 'bg-red-500',
    legendary: 'bg-purple-500',
  };

  const difficultyNames = {
    easy: '–õ–µ–≥–∫–∏–π',
    medium: '–°—Ä–µ–¥–Ω–∏–π',
    hard: '–°–ª–æ–∂–Ω—ã–π',
    legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
  };

  const canCompleteQuest = (quest: Quest): boolean => {
    if (quest.completed) return false;
    
    const req = quest.requirements;
    return (
      (!req.level || player.level >= req.level) &&
      (!req.strength || player.strength >= req.strength) &&
      (!req.dexterity || player.dexterity >= req.dexterity) &&
      (!req.magic || player.magic >= req.magic) &&
      (!req.luck || player.luck >= req.luck) &&
      (!req.endurance || player.endurance >= req.endurance)
    );
  };

  const completeQuest = (questId: string) => {
    const quest = playerQuests.find(q => q.id === questId);
    if (!quest || !canCompleteQuest(quest)) return;

    // –£–¥–∞–ª—è–µ–º –∫–≤–µ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
    const updatedQuests = playerQuests.filter(q => q.id !== questId);
    setPlayerQuests(updatedQuests);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –≤ localStorage
    const savedQuests = localStorage.getItem('completedQuests');
    const completedQuestIds = savedQuests ? JSON.parse(savedQuests) : [];
    completedQuestIds.push(questId);
    localStorage.setItem('completedQuests', JSON.stringify(completedQuestIds));

    const updatedPlayer = {
      ...player,
      experience: player.experience + quest.rewards.experience,
      gold: player.gold + quest.rewards.gold,
    };

    onPlayerUpdate(updatedPlayer);

    toast({
      title: '–ö–≤–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!',
      description: `–ü–æ–ª—É—á–µ–Ω–æ: ${quest.rewards.experience} –æ–ø—ã—Ç–∞, ${quest.rewards.gold} –∑–æ–ª–æ—Ç–∞`,
    });
  };

  return (
    <Card className="bg-gray-800 border-gray-600 text-white">
      <CardHeader>
        <CardTitle className="text-center text-yellow-400">üìú –ö–í–ï–°–¢–´</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {playerQuests.length === 0 ? (
          <div className="text-center text-gray-400 py-8">
            <div className="text-2xl mb-2">üéâ</div>
            <div className="text-lg font-bold mb-2">–í—Å–µ –∫–≤–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</div>
            <div className="text-sm">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–µ—Å—Ç—ã.</div>
          </div>
        ) : (
          playerQuests.map((quest) => (
            <div 
              key={quest.id}
              className={`p-4 rounded-lg border-2 ${
                canCompleteQuest(quest)
                  ? 'bg-yellow-900/30 border-yellow-500'
                  : 'bg-gray-700 border-gray-600'
              }`}
            >
              <div className="flex justify-between items-start mb-2">
                <h3 className="font-bold text-white">{quest.title}</h3>
                <Badge className={difficultyColors[quest.difficulty]}>
                  {difficultyNames[quest.difficulty]}
                </Badge>
              </div>
              
              <p className="text-gray-300 text-sm mb-3">{quest.description}</p>
              
              {Object.keys(quest.requirements).length > 0 && (
                <div className="mb-3">
                  <div className="text-xs text-gray-400 mb-1">–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</div>
                  <div className="flex flex-wrap gap-2">
                    {Object.entries(quest.requirements).map(([key, value]) => (
                      <span 
                        key={key} 
                        className={`text-xs px-2 py-1 rounded ${
                          (player as any)[key] >= value ? 'bg-green-600' : 'bg-red-600'
                        }`}
                      >
                        {key === 'level' ? '–£—Ä–æ–≤–µ–Ω—å' : 
                         key === 'strength' ? '–°–∏–ª–∞' :
                         key === 'dexterity' ? '–õ–æ–≤–∫–æ—Å—Ç—å' :
                         key === 'magic' ? '–ú–∞–≥–∏—è' :
                         key === 'luck' ? '–£–¥–∞—á–∞' :
                         key === 'endurance' ? '–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å' : key}: {value}
                      </span>
                    ))}
                  </div>
                </div>
              )}
              
              <div className="mb-3">
                <div className="text-xs text-gray-400 mb-1">–ù–∞–≥—Ä–∞–¥—ã:</div>
                <div className="text-sm text-yellow-300">
                  üí∞ {quest.rewards.gold} –∑–æ–ª–æ—Ç–∞, ‚≠ê {quest.rewards.experience} –æ–ø—ã—Ç–∞
                </div>
              </div>
              
              {canCompleteQuest(quest) ? (
                <Button 
                  onClick={() => completeQuest(quest.id)}
                  className="bg-green-600 hover:bg-green-700"
                  size="sm"
                >
                  –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
                </Button>
              ) : (
                <Badge variant="outline" className="text-gray-400">
                  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
                </Badge>
              )}
            </div>
          ))
        )}
      </CardContent>
    </Card>
  );
};

export default QuestSystem;
