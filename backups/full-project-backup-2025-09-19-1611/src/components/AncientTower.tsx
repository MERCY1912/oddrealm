import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Bot, Player, TowerProgress } from '@/types/game';
import AncientTowerBattle from './AncientTowerBattle';
import { calculateFinalStats } from '@/utils/enhancedCharacterStats';

interface AncientTowerProps {
  player: Player;
  onPlayerUpdate: (player: Player) => void;
}

const AncientTower = ({ player, onPlayerUpdate }: AncientTowerProps) => {
  const [towerProgress, setTowerProgress] = useState<TowerProgress>({
    currentFloor: 1,
    maxFloorReached: 1,
    isInTower: false,
    canRest: false
  });
  const [currentEnemy, setCurrentEnemy] = useState<Bot | null>(null);
  const [isInBattle, setIsInBattle] = useState(false);
  const [wasDefeated, setWasDefeated] = useState(false); // –§–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
  const { toast } = useToast();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞—á–∞—Ç—å –±–æ–π
  const canStartBattle = () => {
    const finalStats = calculateFinalStats(player, player.equipment);
    
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –±—ã–ª –ø–æ–±–µ–∂–¥–µ–Ω, –æ–Ω –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –±–æ—è
    if (wasDefeated && player.health < finalStats.maxHealth) {
      return false;
    }
    
    return player.health > 0;
  };

  const generateEnemy = (floor: number): Bot => {
    // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è —Å –∫–∞–∂–¥—ã–º —ç—Ç–∞–∂–æ–º
    const baseLevel = Math.floor(floor / 5) + 1;
    const levelMultiplier = 1 + (floor - 1) * 0.15;
    
    let enemy: Bot;
    
    if (floor % 10 === 0) {
      // –ë–æ—Å—Å –∫–∞–∂–¥—ã–µ 10 —ç—Ç–∞–∂–µ–π
      const bossNames = [
        '–ê—Ä—Ö–∞–Ω–≥–µ–ª –ì–∞–±—Ä–∏—ç–ª–∞ –í–µ–ª–∏–∫–∞—è',
        '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –¢–µ–Ω–µ–π –ú–æ—Ä–¥—Ä–µ–∫',
        '–î—Ä–µ–≤–Ω–∏–π –î—Ä–∞–∫–æ–Ω –ê–∑—É—Ä–∏—Ç',
        '–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–∞—É–∫–æ–≤ –ê—Ä–∞—Ö–Ω–∏—è',
        '–î–µ–º–æ–Ω –†–∞–∑—Ä—É—à–µ–Ω–∏—è –í–∞–ª–≥—Ä–∏–º',
        '–õ–µ–¥—è–Ω–∞—è –í–µ–¥—å–º–∞ –ö—Ä–∏—Å—Ç–∞–ª–ª–∞',
        '–û–≥–Ω–µ–Ω–Ω—ã–π –¢–∏—Ç–∞–Ω –ü—Ä–æ–º–µ—Ç–µ–π',
        '–í–ª–∞–¥—ã–∫–∞ –°–º–µ—Ä—Ç–∏ –ù–µ–∫—Ä–æ—Å',
        '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–∏—Ü–∞ –í—Ä–µ–º–µ–Ω–∏ –•—Ä–æ–Ω–æ—Å',
        '–ü–æ—Å–ª–µ–¥–Ω–∏–π –°—Ç—Ä–∞–∂ –≠—Ç–µ—Ä–Ω–∏—è'
      ];
      
      const bossIndex = Math.floor((floor - 1) / 10) % bossNames.length;
      
      enemy = {
        id: `boss_${floor}`,
        name: bossNames[bossIndex],
        level: baseLevel + 5,
        health: Math.floor(300 * levelMultiplier),
        maxHealth: Math.floor(300 * levelMultiplier),
        attack: Math.floor(35 * levelMultiplier),
        defense: Math.floor(20 * levelMultiplier),
        experience: Math.floor(150 * levelMultiplier),
        gold: Math.floor(300 * levelMultiplier),
        difficulty: 'boss' as const,
        image: 'üëë',
        floorType: 'boss'
      };
    } else {
      // –û–±—ã—á–Ω—ã–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏
      const enemyNames = [
        '–¢–µ–Ω–µ–≤–æ–π –ê—Å—Å–∞—Å–∏–Ω',
        '–ö–æ—Å—Ç—è–Ω–æ–π –í–æ–∏–Ω',
        '–ü—Ä–æ–∫–ª—è—Ç—ã–π –ú–∞–≥',
        '–î—Ä–µ–≤–Ω–∏–π –ì–æ–ª–µ–º',
        '–ö—Ä–æ–≤–∞–≤—ã–π –í–∞–º–ø–∏—Ä',
        '–õ–µ–¥—è–Ω–æ–π –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å',
        '–û–≥–Ω–µ–Ω–Ω—ã–π –î–µ–º–æ–Ω',
        '–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –†—ã—Ü–∞—Ä—å',
        '–¢—ë–º–Ω—ã–π –ù–µ–∫—Ä–æ–º–∞–Ω—Ç',
        '–ö–∞–º–µ–Ω–Ω—ã–π –°—Ç—Ä–∞–∂',
        '–Ø–¥–æ–≤–∏—Ç—ã–π –ü–∞—É–∫',
        '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω—ã–π –î—É—Ö',
        '–ñ–µ–ª–µ–∑–Ω—ã–π –ì–æ–ª–∏–∞—Ñ',
        '–ü–µ—Å—á–∞–Ω—ã–π –í–∏—Ö—Ä—å',
        '–õ—É–Ω–Ω—ã–π –í–æ–ª–∫',
        '–ü—Ä–æ–∫–ª—è—Ç—ã–π –ñ—Ä–µ—Ü',
        '–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –°—Ç—Ä–∞–∂',
        '–¢—ë–º–Ω—ã–π –≠–ª—å—Ñ',
        '–ö–æ—Å—Ç–ª—è–≤—ã–π –õ–∏—á',
        '–ê–¥—Å–∫–∏–π –ü—ë—Å'
      ];
      
      const randomName = enemyNames[Math.floor(Math.random() * enemyNames.length)];
      const titles = ['–ú–æ–≥—É—á–∏–π', '–î—Ä–µ–≤–Ω–∏–π', '–ü—Ä–æ–∫–ª—è—Ç—ã–π', '–ó–ª–æ–±–Ω—ã–π', '–ú—Ä–∞—á–Ω—ã–π', '–°–≤–∏—Ä–µ–ø—ã–π'];
      const randomTitle = titles[Math.floor(Math.random() * titles.length)];
      
      enemy = {
        id: `enemy_${floor}`,
        name: `${randomName} ${randomTitle}`,
        level: baseLevel,
        health: Math.floor(120 * levelMultiplier),
        maxHealth: Math.floor(120 * levelMultiplier),
        attack: Math.floor(20 * levelMultiplier),
        defense: Math.floor(12 * levelMultiplier),
        experience: Math.floor(40 * levelMultiplier),
        gold: Math.floor(70 * levelMultiplier),
        difficulty: floor < 5 ? 'easy' : floor < 15 ? 'medium' : 'hard',
        image: '‚öîÔ∏è',
        floorType: 'normal'
      };
    }
    
    return enemy;
  };

  const enterTower = () => {
    setTowerProgress(prev => ({ ...prev, isInTower: true }));
    const enemy = generateEnemy(towerProgress.currentFloor);
    setCurrentEnemy(enemy);
    setWasDefeated(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –≤—Ö–æ–¥–µ
    toast({
      title: '–í—Ö–æ–¥ –≤ –ë–∞—à–Ω—é –î—Ä–µ–≤–Ω–∏—Ö',
      description: `–í—ã –≤–æ—à–ª–∏ –Ω–∞ ${towerProgress.currentFloor} —ç—Ç–∞–∂`,
    });
  };

  const startBattle = () => {
    if (!currentEnemy || !canStartBattle()) {
      if (wasDefeated) {
        toast({
          title: '–ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ',
          description: '–ü–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –±–æ–µ–º',
          variant: 'destructive',
        });
      }
      return;
    }
    setIsInBattle(true);
  };

  const handleBattleEnd = (victory: boolean) => {
    setIsInBattle(false);
    
    if (victory) {
      const isFloorBoss = currentEnemy?.floorType === 'boss';
      const nextFloor = towerProgress.currentFloor + 1;

      setTowerProgress(prev => ({
        ...prev,
        currentFloor: nextFloor,
        maxFloorReached: Math.max(prev.maxFloorReached, nextFloor),
        canRest: isFloorBoss
      }));

      setWasDefeated(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ

      if (isFloorBoss) {
        toast({
          title: '–ë–æ—Å—Å –ø–æ–≤–µ—Ä–∂–µ–Ω!',
          description: '–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ –º–∞–Ω—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç—Ç–∞–∂–æ–º',
        });
      }

      setCurrentEnemy(null);
    } else {
      // –ü–æ—Ä–∞–∂–µ–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
      setWasDefeated(true);
      leaveTower();
      toast({
        title: '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞—à–Ω–µ',
        description: '–í—ã –±—ã–ª–∏ –∏–∑–≥–Ω–∞–Ω—ã –∏–∑ –±–∞—à–Ω–∏. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π!',
        variant: 'destructive',
      });
    }
  };

  const handleFlee = () => {
    leaveTower();
  };

  const restAfterBoss = () => {
    // Use enhanced character stats to get the correct max values
    const finalStats = calculateFinalStats(player, player.equipment);
    
    const updatedPlayer = {
      ...player,
      health: finalStats.maxHealth,
      mana: finalStats.maxMana,
    };
    onPlayerUpdate(updatedPlayer);
    setTowerProgress(prev => ({ ...prev, canRest: false }));
    setWasDefeated(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–¥—ã—Ö–∞
    toast({
      title: '–û—Ç–¥—ã—Ö',
      description: '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!',
    });
  };

  const proceedToNextFloor = () => {
    const enemy = generateEnemy(towerProgress.currentFloor);
    setCurrentEnemy(enemy);
  };

  const leaveTower = () => {
    setTowerProgress(prev => ({ ...prev, isInTower: false, canRest: false }));
    setCurrentEnemy(null);
    setIsInBattle(false);
    
    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —ç—Ç–∞–∂–∏
    const floorsCleared = towerProgress.maxFloorReached - 1;
    if (floorsCleared > 0) {
      const goldReward = floorsCleared * 100;
      const expReward = floorsCleared * 50;
      
      const updatedPlayer = {
        ...player,
        gold: player.gold + goldReward,
        experience: player.experience + expReward,
      };
      
      onPlayerUpdate(updatedPlayer);
      
      toast({
        title: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –±–∞—à–Ω–∏!',
        description: `–ü–æ–ª—É—á–µ–Ω–æ: ${expReward} –æ–ø—ã—Ç–∞, ${goldReward} –∑–æ–ª–æ—Ç–∞ –∑–∞ ${floorsCleared} —ç—Ç–∞–∂–µ–π`,
      });
    }
  };

  const resetTowerProgress = () => {
    setTowerProgress({
      currentFloor: 1,
      maxFloorReached: 1,
      isInTower: false,
      canRest: false
    });
    setCurrentEnemy(null);
    setIsInBattle(false);
    setWasDefeated(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
  };

  if (isInBattle && currentEnemy) {
    return (
      <AncientTowerBattle
        player={player}
        enemy={currentEnemy}
        onPlayerUpdate={onPlayerUpdate}
        onBattleEnd={handleBattleEnd}
        onFlee={handleFlee}
      />
    );
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
  const finalStats = calculateFinalStats(player, player.equipment);

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-br from-purple-900 to-indigo-900 border-purple-600 text-white">
        <CardHeader>
          <CardTitle className="text-center text-3xl text-yellow-400">
            üèóÔ∏è –ë–ê–®–ù–Ø –î–†–ï–í–ù–ò–• üèóÔ∏è
          </CardTitle>
          <div className="text-center text-gray-300">
            –ü–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤—ã—à–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã!
          </div>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ */}
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="text-sm text-gray-400">–¢–µ–∫—É—â–∏–π —ç—Ç–∞–∂</div>
              <div className="text-2xl font-bold text-yellow-400">{towerProgress.currentFloor}</div>
            </div>
            <div className="bg-gray-800 rounded-lg p-4">
              <div className="text-sm text-gray-400">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂</div>
              <div className="text-2xl font-bold text-blue-400">{towerProgress.maxFloorReached}</div>
            </div>
          </div>

          {!towerProgress.isInTower ? (
            /* –≠–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ –≤ –±–∞—à–Ω—é */
            <div className="text-center space-y-4">
              <div className="text-6xl">üèóÔ∏è</div>
              <p className="text-gray-300">
                –ë–∞—à–Ω—è –î—Ä–µ–≤–Ω–∏—Ö –∂–¥—ë—Ç —Ö—Ä–∞–±—Ä—ã—Ö –≤–æ–∏–Ω–æ–≤. –ö–∞–∂–¥—ã–π —ç—Ç–∞–∂ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–æ–∂–Ω–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ.
                –ö–∞–∂–¥—ã–µ 10 —ç—Ç–∞–∂–µ–π –≤–∞—Å –∂–¥—ë—Ç —Å—Ä–∞–∂–µ–Ω–∏–µ —Å –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –±–æ—Å—Å–æ–º!
              </p>
              
              {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è */}
              {wasDefeated && player.health < finalStats.maxHealth && (
                <Card className="bg-red-900 border-red-600">
                  <CardContent className="p-4">
                    <div className="text-center space-y-2">
                      <div className="text-red-400 font-bold">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</div>
                      <p className="text-gray-300">
                        –ü–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.
                        –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player.health}/{finalStats.maxHealth}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              )}
              
              <div className="space-y-2">
                <Button 
                  onClick={enterTower}
                  className="bg-purple-600 hover:bg-purple-700"
                  size="lg"
                  disabled={wasDefeated && player.health < finalStats.maxHealth}
                >
                  –í–æ–π—Ç–∏ –≤ –±–∞—à–Ω—é
                </Button>
                {towerProgress.maxFloorReached > 1 && (
                  <Button 
                    onClick={resetTowerProgress}
                    variant="outline"
                    className="ml-4"
                  >
                    –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                  </Button>
                )}
              </div>
            </div>
          ) : (
            /* –≠–∫—Ä–∞–Ω –±–∞—à–Ω–∏ */
            <div className="space-y-4">
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–∞–∂–µ */}
              <div className="bg-gray-800 rounded-lg p-4">
                <div className="flex justify-between items-center mb-2">
                  <h3 className="text-xl font-bold">–≠—Ç–∞–∂ {towerProgress.currentFloor}</h3>
                  <Badge variant="outline" className={
                    towerProgress.currentFloor % 10 === 0 ? 'border-red-500 text-red-500' : 'border-yellow-500 text-yellow-500'
                  }>
                    {towerProgress.currentFloor % 10 === 0 ? '–ë–û–°–° –≠–¢–ê–ñ' : '–û–±—ã—á–Ω—ã–π —ç—Ç–∞–∂'}
                  </Badge>
                </div>
                <Progress 
                  value={(towerProgress.currentFloor % 10) * 10} 
                  className="h-2"
                />
                <div className="text-xs text-gray-400 mt-1">
                  –î–æ –±–æ—Å—Å–∞: {10 - (towerProgress.currentFloor % 10)} —ç—Ç–∞–∂–µ–π
                </div>
              </div>

              {/* –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–¥—ã—Ö–∞ –ø–æ—Å–ª–µ –±–æ—Å—Å–∞ */}
              {towerProgress.canRest && (
                <Card className="bg-green-900 border-green-600">
                  <CardContent className="p-4">
                    <div className="text-center space-y-2">
                      <div className="text-green-400 font-bold">–ú–µ—Å—Ç–æ –æ—Ç–¥—ã—Ö–∞</div>
                      <p className="text-gray-300">–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏ –º–∞–Ω—É</p>
                      <Button 
                        onClick={restAfterBoss}
                        className="bg-green-600 hover:bg-green-700"
                      >
                        üíö –û—Ç–¥–æ—Ö–Ω—É—Ç—å
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ */}
              {currentEnemy && (
                <Card className="bg-red-900 border-red-600">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-4">
                      <div>
                        <h4 className="text-xl font-bold text-red-400">{currentEnemy.name}</h4>
                        <div className="text-sm text-gray-300">
                          –£—Ä–æ–≤–µ–Ω—å {currentEnemy.level} ‚Ä¢ {currentEnemy.difficulty}
                        </div>
                      </div>
                      <div className="text-4xl">{currentEnemy.image}</div>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-2 text-sm mb-4">
                      <div className="text-red-400">‚ù§Ô∏è {currentEnemy.health}</div>
                      <div className="text-orange-400">‚öîÔ∏è {currentEnemy.attack}</div>
                      <div className="text-blue-400">üõ°Ô∏è {currentEnemy.defense}</div>
                    </div>

                    {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –±–æ–π */}
                    {!canStartBattle() && (
                      <div className="mb-4 p-2 bg-yellow-900 border border-yellow-600 rounded text-yellow-300 text-sm">
                        ‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è!
                      </div>
                    )}

                    <Button 
                      onClick={startBattle}
                      className="w-full bg-red-600 hover:bg-red-700"
                      disabled={!canStartBattle()}
                    >
                      ‚öîÔ∏è –ù–∞—á–∞—Ç—å —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –±–æ–π
                    </Button>
                  </CardContent>
                </Card>
              )}

              {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
              {!currentEnemy && (
                <div className="flex gap-2">
                  <Button 
                    onClick={proceedToNextFloor}
                    className="flex-1 bg-purple-600 hover:bg-purple-700"
                  >
                    ‚¨ÜÔ∏è –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂
                  </Button>
                  <Button 
                    onClick={leaveTower}
                    variant="outline"
                    className="flex-1"
                  >
                    üö™ –ü–æ–∫–∏–Ω—É—Ç—å –±–∞—à–Ω—é
                  </Button>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default AncientTower;
