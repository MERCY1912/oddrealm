// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π —Å –∫–æ–º–Ω–∞—Ç–Ω—ã–º –≥—Ä–∞—Ñ–æ–º
import { RoomType, Room, DungeonMap } from '@/types/game';

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª (Mulberry32)
function mulberry32(a: number) {
  return () => {
    a |= 0;
    a = a + 0x6d2b79f5 | 0;
    let t = Math.imul(a ^ a >>> 15, 1 | a);
    t = t + Math.imul(t ^ t >>> 7, 61 | t) ^ t;
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function pick<T>(arr: T[], rnd: () => number): T {
  return arr[Math.floor(rnd() * arr.length)];
}

function connect(rooms: Record<string, Room>, a: string, b: string) {
  if (!rooms[a].neighbors.includes(b)) rooms[a].neighbors.push(b);
  if (!rooms[b].neighbors.includes(a)) rooms[b].neighbors.push(a);
}

function rollType(rnd: () => number): RoomType {
  const p = rnd();
  if (p < 0.25) return 'combat';      // 25% - –±–æ–∏
  if (p < 0.35) return 'unknown';     // 10% - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ (—Ä–∏—Å–∫)
  if (p < 0.45) return 'event';       // 10% - —Å–æ–±—ã—Ç–∏—è
  if (p < 0.55) return 'chest';       // 10% - —Å—É–Ω–¥—É–∫–∏
  if (p < 0.62) return 'trap';        // 7% - –ª–æ–≤—É—à–∫–∏
  if (p < 0.69) return 'altar';       // 7% - –∞–ª—Ç–∞—Ä–∏
  if (p < 0.76) return 'merchant';    // 7% - —Ç–æ—Ä–≥–æ–≤—Ü—ã
  if (p < 0.83) return 'secret';      // 7% - —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫/–Ω–∞–≥—Ä–∞–¥–∞)
  if (p < 0.90) return 'cursed';      // 7% - –ø—Ä–æ–∫–ª—è—Ç—ã–µ (—Ä–∏—Å–∫)
  if (p < 0.97) return 'blessed';     // 7% - –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω—ã–µ (–Ω–∞–≥—Ä–∞–¥–∞)
  return 'event';                     // 3% - —Å–æ–±—ã—Ç–∏—è (fallback)
}

function farthestNode(rooms: Record<string, Room>, start: string): string {
  // BFS –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∞–º–æ–π –¥–∞–ª—å–Ω–µ–π –∫–æ–º–Ω–∞—Ç—ã
  const dist: Record<string, number> = { [start]: 0 };
  const q = [start];
  
  while (q.length) {
    const v = q.shift()!;
    for (const nb of rooms[v].neighbors) {
      if (dist[nb] == null) {
        dist[nb] = dist[v] + 1;
        q.push(nb);
      }
    }
  }
  
  return Object.entries(dist).sort((a, b) => b[1] - a[1])[0][0];
}

// –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ –±–æ—Å—Å—É
function createMainPath(ids: string[], start: string, boss: string, rnd: () => number): string[] {
  const path = [start];
  const remaining = ids.filter(id => id !== start && id !== boss);
  
  // –î–æ–±–∞–≤–ª—è–µ–º 2-4 –∫–æ–º–Ω–∞—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å
  const pathLength = Math.min(2 + Math.floor(rnd() * 3), remaining.length);
  
  for (let i = 0; i < pathLength; i++) {
    const randomRoom = pick(remaining, rnd);
    path.push(randomRoom);
    const index = remaining.indexOf(randomRoom);
    remaining.splice(index, 1);
  }
  
  path.push(boss);
  return path;
}

// –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à—É—é –∫–æ–º–Ω–∞—Ç—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
function findNearestRoom(rooms: Record<string, Room>, targetId: string, candidates: string[]): string {
  const target = rooms[targetId];
  let nearest = candidates[0];
  let minDistance = getDistance(target, rooms[nearest]);
  
  for (const candidateId of candidates.slice(1)) {
    const distance = getDistance(target, rooms[candidateId]);
    if (distance < minDistance) {
      minDistance = distance;
      nearest = candidateId;
    }
  }
  
  return nearest;
}

// –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –∫–æ–º–Ω–∞—Ç–∞–º–∏
function getDistance(room1: Room, room2: Room): number {
  const dx = room1.x - room2.x;
  const dy = room1.y - room2.y;
  return Math.sqrt(dx * dx + dy * dy);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∑–µ–º–µ–ª—å—è
export function generateDungeon(
  seed: number = Date.now(),
  nRooms: number = 12,
  difficulty: 'normal' | 'heroic' | 'mythic' = 'normal'
): DungeonMap {
  const rnd = mulberry32(seed);
  const rooms: Record<string, Room> = {};
  const ids = Array.from({ length: nRooms }, (_, i) => `r${i}`);

  // –†–∞—Å–∫–∏–¥—ã–≤–∞–µ–º —É–∑–ª—ã –≤ —Å–µ—Ç–∫–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
  const cols = Math.ceil(Math.sqrt(nRooms));
  const rows = Math.ceil(nRooms / cols);
  const cellWidth = 140;
  const cellHeight = 100;
  const startX = 60;
  const startY = 40;
  
  ids.forEach((id, i) => {
    const col = i % cols;
    const row = Math.floor(i / cols);
    rooms[id] = {
      id,
      type: 'combat',
      neighbors: [],
      x: startX + col * cellWidth,
      y: startY + row * cellHeight
    };
  });

  // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥—Ä–∞—Ñ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ç—É–ø–∏–∫–∞–º–∏
  const start = ids[0];
  // –ë–æ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ –∫–∞—Ä—Ç—ã - –±–µ—Ä–µ–º –∫–æ–º–Ω–∞—Ç—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π
  const bossId = rooms[Object.keys(rooms).reduce((maxId, id) => 
    rooms[id].x > rooms[maxId].x ? id : maxId
  )].id;
  
  // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –∫ –±–æ—Å—Å—É (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å)
  const mainPath = createMainPath(ids, start, bossId, rnd);
  
  // –°–æ–µ–¥–∏–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—É—Ç–∏
  for (let i = 0; i < mainPath.length - 1; i++) {
    connect(rooms, mainPath[i], mainPath[i + 1]);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω—ã —Ç—É–ø–∏–∫–∏)
  const totalConnections = Math.floor(nRooms * (0.4 + rnd() * 0.3)); // 40-70% –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
  let connectionsAdded = mainPath.length - 1; // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏
  
  while (connectionsAdded < totalConnections) {
    const a = pick(ids, rnd);
    const b = pick(ids, rnd);
    
    // –ù–µ —Å–æ–µ–¥–∏–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É —Å–∞–º—É —Å —Å–æ–±–æ–π
    if (a === b) continue;
    
    // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    if (rooms[a].neighbors.includes(b)) continue;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —É –∫–æ–º–Ω–∞—Ç—ã
    if (rooms[a].neighbors.length >= 4 || rooms[b].neighbors.length >= 4) continue;
    
    connect(rooms, a, b);
    connectionsAdded++;
  }

  // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∏–º–µ–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—ã—Ö–æ–¥
  if (rooms[start].neighbors.length === 0) {
    const availableRooms = ids.filter(id => id !== start && rooms[id].neighbors.length < 4);
    if (availableRooms.length > 0) {
      const targetRoom = pick(availableRooms, rnd);
      connect(rooms, start, targetRoom);
    }
  }

  // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏ –±–æ—Å—Å–∞
  const startId = start;
  rooms[startId].type = 'start';
  
  // –ë–æ—Å—Å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—É—Ç–∏
  rooms[bossId].type = 'boss';

  // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
  for (const id of ids) {
    if (id === startId || id === bossId) continue;
    rooms[id].type = rollType(rnd);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
  const dungeonNames = [
    '–ö–∞—Ç–∞–∫–æ–º–±—ã –ê–¥–∞',
    '–ì–æ–±–ª–∏–Ω—Å–∫–∏–µ –®–∞—Ö—Ç—ã',
    '–õ–æ–≥–æ–≤–æ –î—Ä–∞–∫–æ–Ω–∞',
    '–ó–∞–±—ã—Ç—ã–π –•—Ä–∞–º',
    '–ü—Ä–æ–∫–ª—è—Ç—ã–µ –†—É–∏–Ω—ã',
    '–¢–µ–º–Ω—ã–µ –ü–µ—â–µ—Ä—ã',
    '–î—Ä–µ–≤–Ω—è—è –ì—Ä–æ–±–Ω–∏—Ü–∞',
    '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –õ–∞–±–∏—Ä–∏–Ω—Ç'
  ];

  const dungeonDescriptions = [
    '–¢–µ–º–Ω—ã–µ –∫–∞—Ç–∞–∫–æ–º–±—ã, –ø–æ–ª–Ω—ã–µ –Ω–µ–∂–∏—Ç–∏ –∏ –¥—Ä–µ–≤–Ω–∏—Ö –ø—Ä–æ–∫–ª—è—Ç–∏–π.',
    '–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ —à–∞—Ö—Ç—ã, –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–µ –ø–ª–µ–º–µ–Ω–∞–º–∏ –≥–æ–±–ª–∏–Ω–æ–≤.',
    '–î—Ä–µ–≤–Ω–µ–µ –ª–æ–≥–æ–≤–æ –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞ —Å –≥–æ—Ä–∞–º–∏ –∑–æ–ª–æ—Ç–∞.',
    '–ó–∞–±—ã—Ç—ã–π —Ö—Ä–∞–º, –≥–¥–µ –ø–æ–∫–æ—è—Ç—Å—è –¥—Ä–µ–≤–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã.',
    '–ü—Ä–æ–∫–ª—è—Ç—ã–µ —Ä—É–∏–Ω—ã, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–µ–º–Ω–æ–π –º–∞–≥–∏–µ–π.',
    '–ì–ª—É–±–æ–∫–∏–µ –ø–µ—â–µ—Ä—ã, –≥–¥–µ –æ–±–∏—Ç–∞—é—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞.',
    '–î—Ä–µ–≤–Ω—è—è –≥—Ä–æ–±–Ω–∏—Ü–∞ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏ –∏ –ª–æ–≤—É—à–∫–∞–º–∏.',
    '–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–∞–±–∏—Ä–∏–Ω—Ç —Å –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π.'
  ];

  const name = pick(dungeonNames, rnd);
  const description = pick(dungeonDescriptions, rnd);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  const level = difficulty === 'normal' ? 1 + Math.floor(rnd() * 5) :
                difficulty === 'heroic' ? 6 + Math.floor(rnd() * 5) :
                11 + Math.floor(rnd() * 5);

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('Dungeon generation completed:', {
    id: `dungeon_${seed}`,
    nRooms,
    cols,
    rows,
    rooms: Object.keys(rooms).length,
    startId,
    bossId,
    roomCoordinates: Object.values(rooms).map(r => ({ id: r.id, x: r.x, y: r.y, type: r.type, neighbors: r.neighbors.length }))
  });

  return {
    id: `dungeon_${seed}`,
    seed,
    rooms,
    startId,
    bossId,
    name,
    description,
    difficulty,
    level
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∫–æ–Ω–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
export function getRoomIcon(type: RoomType, isKnown: boolean = true): string {
  if (!isKnown) return '‚Ä¢';
  
  const icons: Record<RoomType, string> = {
    start: 'üèÅ',
    combat: '‚öîÔ∏è',
    event: '‚ùì',
    altar: '‚õ™',
    trap: '‚ò†Ô∏è',
    merchant: 'üõí',
    chest: 'üóùÔ∏è',
    boss: 'üëë',
    unknown: '‚ùî',
    secret: 'üîç',
    cursed: 'üíÄ',
    blessed: '‚ú®'
  };
  
  return icons[type] || '‚Ä¢';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–æ–º–Ω–∞—Ç—ã
export function getRoomColor(type: RoomType, isCurrent: boolean = false, isVisited: boolean = false): string {
  if (isCurrent) return 'bg-amber-400 text-black ring-4 ring-amber-200';
  if (isVisited) return 'bg-sky-700 hover:ring-2 ring-sky-300';
  
  const colors: Record<RoomType, string> = {
    start: 'bg-green-600',
    combat: 'bg-red-600',
    event: 'bg-purple-600',
    altar: 'bg-yellow-600',
    trap: 'bg-orange-600',
    merchant: 'bg-blue-600',
    chest: 'bg-yellow-500',
    boss: 'bg-red-800'
  };
  
  return colors[type] || 'bg-gray-600';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
export function canMoveToRoom(
  dungeon: DungeonMap,
  currentRoomId: string,
  targetRoomId: string,
  visitedRooms: Set<string>
): boolean {
  const currentRoom = dungeon.rooms[currentRoomId];
  if (!currentRoom) return false;
  
  // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å–µ–¥–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
  return currentRoom.neighbors.includes(targetRoomId);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç
export function getAvailableRooms(
  dungeon: DungeonMap,
  currentRoomId: string,
  visitedRooms: Set<string>
): string[] {
  const currentRoom = dungeon.rooms[currentRoomId];
  if (!currentRoom) return [];
  
  return currentRoom.neighbors;
}
