import { 
  EnhancedDungeonMap, 
  EnhancedRoom, 
  RoomType, 
  EnhancedDungeonGenConfig,
  DungeonGoalType,
  ThreatLevel,
  RoomThreat
} from '@/types/game';
import { getRandomAffixes } from './dungeonAffixes';
import { createDungeonGoal, getGoalRoomRequirements } from './dungeonGoals';

// –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–æ–º–Ω–∞—Ç
const ROOM_HINTS: Record<RoomType, string[]> = {
  start: [],
  combat: ['–∑–∞–ø–∞—Ö –∫—Ä–æ–≤–∏', '–∑–≤—É–∫ –æ—Ä—É–∂–∏—è', '—Ä—ã—á–∞–Ω–∏–µ'],
  boss: ['–∑–ª–æ–≤–µ—â–∞—è –∞—É—Ä–∞', '–º–æ—â–Ω–∞—è –º–∞–≥–∏—è', '–¥—Ä–µ–≤–Ω—è—è —Å–∏–ª–∞'],
  altar: ['—Å–≤—è—Ç–æ–µ —Å–∏—è–Ω–∏–µ', '—Ç–∏—Ö–∏–µ –º–æ–ª–∏—Ç–≤—ã', '–±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è'],
  trap: ['—â–µ–ª—á–∫–∏ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤', '–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–Ω–∏', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å'],
  merchant: ['–∑–≤–æ–Ω –º–æ–Ω–µ—Ç', '–∑–∞–ø–∞—Ö —Å–ø–µ—Ü–∏–π', '—Ç–æ—Ä–≥–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞'],
  chest: ['–±–ª–µ—Å–∫ —Å–æ–∫—Ä–æ–≤–∏—â', '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π –∑–≤–æ–Ω', '—Å–∫—Ä—ã—Ç—ã–µ –±–æ–≥–∞—Ç—Å—Ç–≤–∞'],
  event: ['—Å—Ç—Ä–∞–Ω–Ω—ã–µ –∑–≤—É–∫–∏', '–Ω–µ–æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–∑–∞–≥–∞–¥–æ—á–Ω—ã–µ –∑–Ω–∞–∫–∏']
};

// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const DEFAULT_CONFIG: EnhancedDungeonGenConfig = {
  roomCount: 12,
  minPathToBoss: 6,
  roomDistribution: {
    combat: 4,
    event: 2,
    trap: 1,
    altar: 1,
    merchant: 1,
    chest: 1
  },
  goalType: 'key_boss',
  affixCount: 2,
  difficulty: 'normal',
  playerLevel: 1
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∑–µ–º–µ–ª—å—è
export function generateEnhancedDungeon(
  config: Partial<EnhancedDungeonGenConfig> = {},
  seed: number = Date.now()
): EnhancedDungeonMap {
  const fullConfig = { ...DEFAULT_CONFIG, ...config };
  const rng = mulberry32(seed);
  
  console.log('üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∑–µ–º–µ–ª—å—è:', {
    seed,
    config: fullConfig
  });

  // 1. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–Ω–∞—Ç
  const rooms = generateRoomLayout(fullConfig, rng);
  
  // 2. –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø—ã –∫–æ–º–Ω–∞—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
  assignRoomTypes(rooms, fullConfig, rng);
  
  // 3. –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —É–≥—Ä–æ–∑ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  addThreatSystem(rooms, fullConfig, rng);
  
  // 4. –†–∞–∑–º–µ—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Ü–µ–ª–∏
  const goalRooms = placeGoalItems(rooms, fullConfig, rng);
  
  // 5. –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—Ç–∞ –∫ –±–æ—Å—Å—É
  const gateRoomId = addBossGate(rooms, rng);
  
  // 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã
  const affixes = getRandomAffixes(fullConfig.affixCount, seed);
  
  // 7. –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ñ—Ñ–∏–∫—Å—ã –∫ –∫–∞—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É–Ω–¥—É–∫ –¥–ª—è treasure_call)
  applyAffixesToMap(rooms, affixes, rng);
  
  // 8. –°–æ–∑–¥–∞–µ–º —Ü–µ–ª—å –ø–æ–¥–∑–µ–º–µ–ª—å—è
  const goal = createDungeonGoal(fullConfig.goalType);
  
  const dungeonMap: EnhancedDungeonMap = {
    id: `enhanced_dungeon_${seed}`,
    seed,
    rooms,
    startId: 'r0',
    bossId: findBossRoom(rooms),
    name: `–ü–æ–¥–∑–µ–º–µ–ª—å–µ —É—Ä–æ–≤–Ω—è ${fullConfig.playerLevel}`,
    description: generateDungeonDescription(fullConfig, affixes),
    difficulty: fullConfig.difficulty,
    level: fullConfig.playerLevel,
    goal,
    affixes,
    gateRoomId,
    keyRooms: goalRooms
  };
  
  console.log('‚úÖ –ü–æ–¥–∑–µ–º–µ–ª—å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', {
    rooms: Object.keys(rooms).length,
    goal: goal.description,
    affixes: affixes.map(a => a.name),
    keyRooms: goalRooms
  });
  
  return dungeonMap;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–Ω–∞—Ç (–≥—Ä–∞—Ñ —Å–≤—è–∑–Ω–æ—Å—Ç–∏)
function generateRoomLayout(config: EnhancedDungeonGenConfig, rng: () => number): Record<string, EnhancedRoom> {
  const rooms: Record<string, EnhancedRoom> = {};
  const roomIds = Array.from({ length: config.roomCount }, (_, i) => `r${i}`);
  
  // –†–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã –≤ —Å–µ—Ç–∫–µ
  const cols = Math.ceil(Math.sqrt(config.roomCount));
  const rows = Math.ceil(config.roomCount / cols);
  const cellWidth = 140;
  const cellHeight = 100;
  const startX = 60;
  const startY = 40;
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã
  roomIds.forEach((id, i) => {
    const col = i % cols;
    const row = Math.floor(i / cols);
    
    rooms[id] = {
      id,
      type: 'combat', // –≤—Ä–µ–º–µ–Ω–Ω–æ, –Ω–∞–∑–Ω–∞—á–∏–º –ø–æ–∑–∂–µ
      neighbors: [],
      x: startX + col * cellWidth,
      y: startY + row * cellHeight,
      visited: false,
      used: false,
      threat: { level: 1, hintChance: 20 },
      distance_from_start: 0
    };
  });
  
  // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–≤—è–∑–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (MST)
  const edges = generateMST(roomIds, rng);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–∏–∫–ª–æ–≤ (10-20%)
  const extraEdges = Math.floor(edges.length * 0.15);
  addExtraConnections(roomIds, edges, extraEdges, rng);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≤—è–∑–∏ –∫ –∫–æ–º–Ω–∞—Ç–∞–º
  edges.forEach(([a, b]) => {
    rooms[a].neighbors.push(b);
    rooms[b].neighbors.push(a);
  });
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç —Å—Ç–∞—Ä—Ç–∞
  calculateDistances(rooms, 'r0');
  
  return rooms;
}

// –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–æ–º–Ω–∞—Ç –ø–æ —à–∞–±–ª–æ–Ω—É
function assignRoomTypes(rooms: Record<string, EnhancedRoom>, config: EnhancedDungeonGenConfig, rng: () => number) {
  const roomIds = Object.keys(rooms);
  const distribution = config.roomDistribution;
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
  rooms['r0'].type = 'start'; // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –¥–∞–ª—å–Ω—é—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –±–æ—Å—Å–∞
  const bossId = roomIds.reduce((farthest, id) => 
    (rooms[id].distance_from_start || 0) > (rooms[farthest].distance_from_start || 0) ? id : farthest
  );
  rooms[bossId].type = 'boss';
  
  // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
  const availableRooms = roomIds.filter(id => id !== 'r0' && id !== bossId);
  const typePool: RoomType[] = [];
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É–ª —Ç–∏–ø–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é
  Object.entries(distribution).forEach(([type, count]) => {
    for (let i = 0; i < count; i++) {
      typePool.push(type as RoomType);
    }
  });
  
  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º
  const shuffledTypes = typePool.sort(() => rng() - 0.5);
  availableRooms.forEach((roomId, index) => {
    if (index < shuffledTypes.length) {
      rooms[roomId].type = shuffledTypes[index];
    }
  });
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≥—Ä–æ–∑ –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫
function addThreatSystem(rooms: Record<string, EnhancedRoom>, config: EnhancedDungeonGenConfig, rng: () => number) {
  Object.values(rooms).forEach(room => {
    const baseThreat = getThreatForRoomType(room.type);
    const depthBonus = Math.floor((room.distance_from_start || 0) / 3); // +1 —É–≥—Ä–æ–∑–∞ –∫–∞–∂–¥—ã–µ 3 –∫–æ–º–Ω–∞—Ç—ã
    const difficultyBonus = config.difficulty === 'heroic' ? 1 : config.difficulty === 'mythic' ? 2 : 0;
    
    const threatLevel = Math.min(3, baseThreat + depthBonus + difficultyBonus) as ThreatLevel;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    const hints = ROOM_HINTS[room.type];
    const hint = hints.length > 0 && rng() < 0.3 ? hints[Math.floor(rng() * hints.length)] : undefined;
    
    room.threat = {
      level: threatLevel,
      hint,
      hintChance: 20 + threatLevel * 10 // –±–æ–ª—å—à–µ —É–≥—Ä–æ–∑–∞ = –±–æ–ª—å—à–µ —à–∞–Ω—Å –ø–æ–¥—Å–∫–∞–∑–∫–∏
    };
  });
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ü–µ–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö
function placeGoalItems(rooms: Record<string, EnhancedRoom>, config: EnhancedDungeonGenConfig, rng: () => number): string[] {
  const requirements = getGoalRoomRequirements(config.goalType);
  const suitableRooms = Object.values(rooms).filter(room => 
    requirements.roomTypes.includes(room.type as any) &&
    room.type !== 'start' &&
    (room.distance_from_start || 0) >= 4 // –º–∏–Ω–∏–º—É–º –≤ 4 —à–∞–≥–∞—Ö –æ—Ç —Å—Ç–∞—Ä—Ç–∞
  );
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç —Å—Ç–∞—Ä—Ç–∞ (–¥–∞–ª—å–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ)
  suitableRooms.sort((a, b) => (b.distance_from_start || 0) - (a.distance_from_start || 0));
  
  const goalRooms: string[] = [];
  
  for (let i = 0; i < requirements.count && i < suitableRooms.length; i++) {
    const room = suitableRooms[i];
    room.goal_item = requirements.itemType;
    goalRooms.push(room.id);
  }
  
  return goalRooms;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—Ç –∫ –±–æ—Å—Å—É
function addBossGate(rooms: Record<string, EnhancedRoom>, rng: () => number): string | undefined {
  const bossRoom = Object.values(rooms).find(room => room.type === 'boss');
  if (!bossRoom) return undefined;
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π –±–æ—Å—Å–∞
  const bossNeighbors = bossRoom.neighbors;
  if (bossNeighbors.length === 0) return undefined;
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ—Å–µ–¥–∞ –∫–∞–∫ –≤—Ä–∞—Ç–∞
  const gateId = bossNeighbors[Math.floor(rng() * bossNeighbors.length)];
  const gateRoom = rooms[gateId];
  
  if (gateRoom) {
    gateRoom.type = 'event'; // –≤—Ä–∞—Ç–∞ - —ç—Ç–æ –æ—Å–æ–±–æ–µ —Å–æ–±—ã—Ç–∏–µ
    gateRoom.locked = true;
    return gateId;
  }
  
  return undefined;
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∞—Ñ—Ñ–∏–∫—Å–æ–≤ –∫ –∫–∞—Ä—Ç–µ
function applyAffixesToMap(rooms: Record<string, EnhancedRoom>, affixes: any[], rng: () => number) {
  const treasureCallAffix = affixes.find(a => a.type === 'treasure_call');
  
  if (treasureCallAffix) {
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫
    const availableRooms = Object.values(rooms).filter(room => 
      room.type === 'combat' && !room.goal_item
    );
    
    if (availableRooms.length > 0) {
      const randomRoom = availableRooms[Math.floor(rng() * availableRooms.length)];
      randomRoom.type = 'chest';
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function getThreatForRoomType(type: RoomType): ThreatLevel {
  switch (type) {
    case 'start': return 1;
    case 'altar': return 1;
    case 'merchant': return 1;
    case 'chest': return 1;
    case 'event': return 2;
    case 'trap': return 2;
    case 'combat': return 2;
    case 'boss': return 3;
    default: return 1;
  }
}

function findBossRoom(rooms: Record<string, EnhancedRoom>): string {
  return Object.values(rooms).find(room => room.type === 'boss')?.id || 'r1';
}

function generateDungeonDescription(config: EnhancedDungeonGenConfig, affixes: any[]): string {
  const difficultyDesc = {
    normal: '–û–±—ã—á–Ω–æ–µ',
    heroic: '–ì–µ—Ä–æ–∏—á–µ—Å–∫–æ–µ', 
    mythic: '–ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ'
  };
  
  const affixNames = affixes.map(a => a.name).join(', ');
  
  return `${difficultyDesc[config.difficulty]} –ø–æ–¥–∑–µ–º–µ–ª—å–µ. –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ñ—Ñ–∏–∫—Å—ã: ${affixNames}`;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–≤—è–∑–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
function generateMST(nodes: string[], rng: () => number): [string, string][] {
  const edges: [string, string][] = [];
  const connected = new Set([nodes[0]]);
  const remaining = new Set(nodes.slice(1));
  
  while (remaining.size > 0) {
    const connectedArray = Array.from(connected);
    const remainingArray = Array.from(remaining);
    
    const from = connectedArray[Math.floor(rng() * connectedArray.length)];
    const to = remainingArray[Math.floor(rng() * remainingArray.length)];
    
    edges.push([from, to]);
    connected.add(to);
    remaining.delete(to);
  }
  
  return edges;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
function addExtraConnections(nodes: string[], existingEdges: [string, string][], count: number, rng: () => number) {
  const edgeSet = new Set(existingEdges.map(([a, b]) => `${a}-${b}`));
  
  for (let i = 0; i < count; i++) {
    const a = nodes[Math.floor(rng() * nodes.length)];
    const b = nodes[Math.floor(rng() * nodes.length)];
    
    if (a !== b && !edgeSet.has(`${a}-${b}`) && !edgeSet.has(`${b}-${a}`)) {
      existingEdges.push([a, b]);
      edgeSet.add(`${a}-${b}`);
    }
  }
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç —Å—Ç–∞—Ä—Ç–∞ (BFS)
function calculateDistances(rooms: Record<string, EnhancedRoom>, startId: string) {
  const queue = [startId];
  const visited = new Set([startId]);
  rooms[startId].distance_from_start = 0;
  
  while (queue.length > 0) {
    const current = queue.shift()!;
    const currentDistance = rooms[current].distance_from_start || 0;
    
    for (const neighborId of rooms[current].neighbors) {
      if (!visited.has(neighborId)) {
        visited.add(neighborId);
        rooms[neighborId].distance_from_start = currentDistance + 1;
        queue.push(neighborId);
      }
    }
  }
}

// –ü—Ä–æ—Å—Ç–æ–π PRNG –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
function mulberry32(a: number) {
  return function() {
    let t = a += 0x6D2B79F5;
    t = Math.imul(t ^ t >>> 15, t | 1);
    t ^= t + Math.imul(t ^ t >>> 7, t | 61);
    return ((t ^ t >>> 14) >>> 0) / 4294967296;
  }
}



