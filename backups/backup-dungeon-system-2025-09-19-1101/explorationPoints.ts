import { ExplorationPoints, RoomType, DungeonRunRewards, ExpeditionResource } from '@/types/game';

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –æ—á–∫–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
export function createExplorationPoints(): ExplorationPoints {
  return {
    current: 0,
    fromSafeRooms: 0,
    fromDangerous: 0,
    fromBoss: 0
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
export function getPointsForRoom(roomType: RoomType): {
  points: number;
  category: 'safe' | 'dangerous' | 'boss';
} {
  switch (roomType) {
    case 'start':
    case 'altar':
    case 'merchant':
    case 'chest':
      return { points: 1, category: 'safe' };
      
    case 'combat':
    case 'event':
    case 'trap':
      return { points: 2, category: 'dangerous' };
      
    case 'boss':
      return { points: 3, category: 'boss' };
      
    default:
      return { points: 1, category: 'safe' };
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
export function addExplorationPoints(
  current: ExplorationPoints, 
  roomType: RoomType
): ExplorationPoints {
  const { points, category } = getPointsForRoom(roomType);
  
  const updated = {
    ...current,
    current: current.current + points
  };
  
  switch (category) {
    case 'safe':
      updated.fromSafeRooms += points;
      break;
    case 'dangerous':
      updated.fromDangerous += points;
      break;
    case 'boss':
      updated.fromBoss += points;
      break;
  }
  
  return updated;
}

// –†–∞—Å—á–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞–≥—Ä–∞–¥ –æ—Ç –æ—á–∫–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
export function calculateExplorationMultiplier(points: ExplorationPoints): number {
  // 5% –±–æ–Ω—É—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–µ –æ—á–∫–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
  return 1 + (points.current * 0.05);
}

// –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∑–∞–±–µ–≥
export function calculateFinalRewards(
  baseGold: number,
  baseExp: number,
  explorationPoints: ExplorationPoints,
  expeditionResource: ExpeditionResource,
  goalCompleted: boolean = false
): DungeonRunRewards {
  // –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
  const explorationMultiplier = calculateExplorationMultiplier(explorationPoints);
  const torchBonus = calculateTorchBonus(expeditionResource);
  const goalBonus = goalCompleted ? 0.5 : 0; // +50% –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏
  
  const totalMultiplier = explorationMultiplier + torchBonus + goalBonus;
  
  const finalGold = Math.round(baseGold * totalMultiplier);
  const finalExp = Math.round(baseExp * totalMultiplier);
  
  return {
    baseGold,
    baseExp,
    explorationMultiplier,
    torchBonus,
    finalGold,
    finalExp,
    items: [] // –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
  };
}

// –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –æ—Ç –Ω–µ–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —Ñ–∞–∫–µ–ª–æ–≤
function calculateTorchBonus(resource: ExpeditionResource): number {
  const unusedTorches = resource.torches;
  const maxTorches = resource.maxTorches;
  
  // 3% –±–æ–Ω—É—Å–∞ –∑–∞ –∫–∞–∂–¥—ã–π –Ω–µ–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–∫–µ–ª
  return (unusedTorches / maxTorches) * 0.03;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
export function getExplorationDescription(points: ExplorationPoints): {
  total: number;
  breakdown: string;
  multiplier: string;
  rank: 'novice' | 'explorer' | 'veteran' | 'master';
} {
  const total = points.current;
  const multiplier = `+${Math.round(calculateExplorationMultiplier(points) * 100 - 100)}%`;
  
  const breakdown = [
    points.fromSafeRooms > 0 ? `–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ: ${points.fromSafeRooms}` : '',
    points.fromDangerous > 0 ? `–û–ø–∞—Å–Ω—ã–µ: ${points.fromDangerous}` : '',
    points.fromBoss > 0 ? `–ë–æ—Å—Å: ${points.fromBoss}` : ''
  ].filter(Boolean).join(', ');
  
  let rank: 'novice' | 'explorer' | 'veteran' | 'master';
  if (total >= 20) rank = 'master';
  else if (total >= 15) rank = 'veteran';
  else if (total >= 10) rank = 'explorer';
  else rank = 'novice';
  
  return {
    total,
    breakdown,
    multiplier,
    rank
  };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
export function getExplorationAchievements(points: ExplorationPoints): {
  name: string;
  description: string;
  icon: string;
}[] {
  const achievements = [];
  
  if (points.fromSafeRooms >= 5) {
    achievements.push({
      name: '–û—Å—Ç–æ—Ä–æ–∂–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      description: '–ü–æ—Å–µ—Ç–∏—Ç–µ 5+ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç',
      icon: 'üõ°Ô∏è'
    });
  }
  
  if (points.fromDangerous >= 8) {
    achievements.push({
      name: '–°–º–µ–ª—å—á–∞–∫',
      description: '–ü–æ—Å–µ—Ç–∏—Ç–µ 4+ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã',
      icon: '‚öîÔ∏è'
    });
  }
  
  if (points.fromBoss >= 3) {
    achievements.push({
      name: '–£–±–∏–π—Ü–∞ –±–æ—Å—Å–æ–≤',
      description: '–ü–æ–±–µ–¥–∏—Ç–µ –±–æ—Å—Å–∞',
      icon: 'üëë'
    });
  }
  
  if (points.current >= 20) {
    achievements.push({
      name: '–ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π',
      description: '–ù–∞–±–µ—Ä–∏—Ç–µ 20+ –æ—á–∫–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
      icon: 'üèÜ'
    });
  }
  
  return achievements;
}

// –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (–¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–≥—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º)
export function predictRewards(
  currentPoints: ExplorationPoints,
  currentResource: ExpeditionResource,
  baseGold: number,
  baseExp: number,
  goalCompleted: boolean = false
): {
  estimatedGold: number;
  estimatedExp: number;
  bonusBreakdown: {
    exploration: string;
    torches: string;
    goal: string;
  };
} {
  const rewards = calculateFinalRewards(
    baseGold, 
    baseExp, 
    currentPoints, 
    currentResource, 
    goalCompleted
  );
  
  return {
    estimatedGold: rewards.finalGold,
    estimatedExp: rewards.finalExp,
    bonusBreakdown: {
      exploration: `+${Math.round((rewards.explorationMultiplier - 1) * 100)}%`,
      torches: `+${Math.round(rewards.torchBonus * 100)}%`,
      goal: goalCompleted ? '+50%' : '+0%'
    }
  };
}

// –°–∏—Å—Ç–µ–º–∞ —Ä–∏—Å–∫–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–π
export function getExitDecisionInfo(
  currentPoints: ExplorationPoints,
  currentResource: ExpeditionResource,
  goalCompleted: boolean,
  roomsLeft: number
): {
  recommendation: 'continue' | 'consider_exit' | 'exit_now';
  reasoning: string;
  riskLevel: 'low' | 'medium' | 'high';
} {
  const torchPercentage = currentResource.torches / currentResource.maxTorches;
  const pointsPerRoom = currentPoints.current / Math.max(1, currentPoints.current);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
  let riskLevel: 'low' | 'medium' | 'high';
  if (currentResource.exhausted) {
    riskLevel = 'high';
  } else if (torchPercentage < 0.3) {
    riskLevel = 'medium';
  } else {
    riskLevel = 'low';
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
  let recommendation: 'continue' | 'consider_exit' | 'exit_now';
  let reasoning: string;
  
  if (currentResource.exhausted && !goalCompleted) {
    recommendation = 'exit_now';
    reasoning = '–§–∞–∫–µ–ª—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∞ —Ü–µ–ª—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ —Å–º–µ—Ä—Ç–∏.';
  } else if (goalCompleted && torchPercentage < 0.2) {
    recommendation = 'consider_exit';
    reasoning = '–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ñ–∞–∫–µ–ª–æ–≤ –º–∞–ª–æ. –ú–æ–∂–Ω–æ –≤—ã–π—Ç–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π.';
  } else if (goalCompleted && roomsLeft > 5 && torchPercentage > 0.5) {
    recommendation = 'continue';
    reasoning = '–¶–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ú–æ–∂–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥–ª—è –±–æ–Ω—É—Å–æ–≤.';
  } else if (!goalCompleted && torchPercentage > 0.3) {
    recommendation = 'continue';
    reasoning = '–¶–µ–ª—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫–∏.';
  } else {
    recommendation = 'consider_exit';
    reasoning = '–í–∑–≤–µ—Å—å—Ç–µ —Ä–∏—Å–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã.';
  }
  
  return {
    recommendation,
    reasoning,
    riskLevel
  };
}



